{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/DocumentTypeChange/DocTypeChange.js\",\n    _theme$breakpoints;\n\nimport React, { useState, useEffect } from \"react\";\nimport theme from \"../../../assets/theme\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport CustomSelect from \"../../common/CustomSelect/CustomSelectDoc\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport styled from \"styled-components\";\nimport useNotification from \"../../../hooks/useNotification\";\n\nconst DocChangeType = ({\n  rowData,\n  docName,\n  setState,\n  refreshDetails,\n  setRefreshDetails\n}) => {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    setLoader\n  } = useLoader();\n  let docId = rowData === null || rowData === void 0 ? void 0 : rowData.id;\n  let caseId = rowData === null || rowData === void 0 ? void 0 : rowData.entityId;\n  const [docType, setDocType] = useState(docName);\n  const {\n    triggerNotify,\n    setTriggerNotify\n  } = useNotification();\n  useEffect(() => {\n    if (triggerNotify) {\n      setRefreshDetails(true);\n      setTriggerNotify(false);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [triggerNotify]);\n\n  const changeDocType = async value => {\n    try {\n      setLoader({\n        state: true,\n        message: \"Change Document...\"\n      });\n      const payload = {\n        uploadType: value\n      };\n      const res = await CaseService.changeDocType(payload, caseId, docId);\n\n      if (res) {\n        enqueueSnackbar(\"Document Type Changed Successfully\", {\n          variant: \"success\"\n        });\n        setDocType(value);\n        setRefreshDetails(true);\n      }\n\n      if (refreshDetails) {\n        setRefreshDetails(false);\n        changeDocType();\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n      setState(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomSelect, {\n    menuItemValues: caseDocumentType,\n    name: docType,\n    value: docType,\n    disabled: docType === \"Arbitration Notice\" ? true : false,\n    onChange: e => changeDocType(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default DocChangeType;\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  @media ${theme === null || theme === void 0 ? void 0 : (_theme$breakpoints = theme.breakpoints) === null || _theme$breakpoints === void 0 ? void 0 : _theme$breakpoints.sm_up} {\n    width: auto;\n  }\n`;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/DocumentTypeChange/DocTypeChange.js"],"names":["React","useState","useEffect","theme","CaseService","getErrorMessage","useSnackbar","CustomSelect","useLoader","caseDocumentType","styled","useNotification","DocChangeType","rowData","docName","setState","refreshDetails","setRefreshDetails","enqueueSnackbar","setLoader","docId","id","caseId","entityId","docType","setDocType","triggerNotify","setTriggerNotify","changeDocType","value","state","message","payload","uploadType","res","variant","error","display","alignItems","e","target","Container","div","breakpoints","sm_up"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport theme from \"../../../assets/theme\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport CustomSelect from \"../../common/CustomSelect/CustomSelectDoc\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport styled from \"styled-components\";\nimport useNotification from \"../../../hooks/useNotification\";\n\nconst DocChangeType = ({ rowData, docName, setState, refreshDetails, setRefreshDetails }) => {\n  const { enqueueSnackbar } = useSnackbar();\n  const { setLoader } = useLoader();\n  let docId = rowData?.id;\n  let caseId = rowData?.entityId;\n  const [docType, setDocType] = useState(docName);\n  const { triggerNotify, setTriggerNotify } = useNotification();\n\n  useEffect(() => {\n    if (triggerNotify) {\n      setRefreshDetails(true);\n      setTriggerNotify(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [triggerNotify]);\n  \n  const changeDocType = async value => {\n    try {\n      setLoader({ state: true, message: \"Change Document...\" });\n      const payload = {\n        uploadType: value\n      };\n      const res = await CaseService.changeDocType(payload, caseId, docId);\n      if (res) {\n        enqueueSnackbar(\"Document Type Changed Successfully\", {\n          variant: \"success\"\n        });\n        setDocType(value);\n        setRefreshDetails(true);\n      }\n      if (refreshDetails) {\n        setRefreshDetails(false);\n        changeDocType();\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({ state: false });\n      setState(false);\n    }\n  };\n\n  return (\n    <Container style={{ display: \"flex\", alignItems: \"center\" }}>\n      <CustomSelect\n        menuItemValues={caseDocumentType}\n        name={docType}\n        value={docType}\n        disabled={docType === \"Arbitration Notice\" ? true : false}\n        onChange={e => changeDocType(e.target.value)}\n      />\n    </Container>\n  );\n};\n\nexport default DocChangeType;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  @media ${theme?.breakpoints?.sm_up} {\n    width: auto;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}