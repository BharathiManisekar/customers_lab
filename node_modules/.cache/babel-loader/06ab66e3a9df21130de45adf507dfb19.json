{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/providers/TranslaterProvider.js\";\nimport React, { useEffect, useState } from \"react\";\nexport const TranslaterContext = React.createContext();\n\nfunction TranslatorProvider({\n  children\n}) {\n  const [translaterOpen, setTranslaterOpen] = useState(false);\n  useEffect(() => {\n    var mutationObserver = new MutationObserver(function (mutations) {\n      mutations.forEach(function (mutation) {\n        var _mutation$target, _mutation$target$styl, _mutation$target$styl2;\n\n        if ((_mutation$target = mutation.target) === null || _mutation$target === void 0 ? void 0 : (_mutation$target$styl = _mutation$target.style) === null || _mutation$target$styl === void 0 ? void 0 : (_mutation$target$styl2 = _mutation$target$styl.cssText) === null || _mutation$target$styl2 === void 0 ? void 0 : _mutation$target$styl2.includes(\"position: relative; min-height: 100%; top: 40px;\")) {\n          setTranslaterOpen(true);\n        } else {\n          setTranslaterOpen(false);\n        }\n      });\n    });\n    mutationObserver.observe(document.body, {\n      attributes: true\n    });\n    return () => {\n      mutationObserver.disconnect();\n    };\n  }, []);\n  const value = React.useMemo(() => {\n    return {\n      translaterOpen\n    };\n  }, [translaterOpen]);\n  return /*#__PURE__*/React.createElement(TranslaterContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default TranslatorProvider;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/providers/TranslaterProvider.js"],"names":["React","useEffect","useState","TranslaterContext","createContext","TranslatorProvider","children","translaterOpen","setTranslaterOpen","mutationObserver","MutationObserver","mutations","forEach","mutation","target","style","cssText","includes","observe","document","body","attributes","disconnect","value","useMemo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,iBAAiB,GAAGH,KAAK,CAACI,aAAN,EAA1B;;AAEP,SAASC,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAA0C;AACxC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,gBAAgB,GAAG,IAAIC,gBAAJ,CAAqB,UAAUC,SAAV,EAAqB;AAC/DA,MAAAA,SAAS,CAACC,OAAV,CAAkB,UAAUC,QAAV,EAAoB;AAAA;;AACpC,gCACEA,QAAQ,CAACC,MADX,8EACE,iBAAiBC,KADnB,oFACE,sBAAwBC,OAD1B,2DACE,uBAAiCC,QAAjC,CACE,kDADF,CADF,EAIE;AACAT,UAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,SAND,MAMO;AACLA,UAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF,OAVD;AAWD,KAZsB,CAAvB;AAaAC,IAAAA,gBAAgB,CAACS,OAAjB,CAAyBC,QAAQ,CAACC,IAAlC,EAAwC;AACtCC,MAAAA,UAAU,EAAE;AAD0B,KAAxC;AAGA,WAAO,MAAM;AACXZ,MAAAA,gBAAgB,CAACa,UAAjB;AACD,KAFD;AAGD,GApBQ,EAoBN,EApBM,CAAT;AAsBA,QAAMC,KAAK,GAAGvB,KAAK,CAACwB,OAAN,CAAc,MAAM;AAChC,WAAO;AACLjB,MAAAA;AADK,KAAP;AAGD,GAJa,EAIX,CAACA,cAAD,CAJW,CAAd;AAMA,sBACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEgB,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,QADH,CADF;AAKD;;AAED,eAAeD,kBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport const TranslaterContext = React.createContext();\n\nfunction TranslatorProvider({ children }) {\n  const [translaterOpen, setTranslaterOpen] = useState(false);\n\n  useEffect(() => {\n    var mutationObserver = new MutationObserver(function (mutations) {\n      mutations.forEach(function (mutation) {\n        if (\n          mutation.target?.style?.cssText?.includes(\n            \"position: relative; min-height: 100%; top: 40px;\"\n          )\n        ) {\n          setTranslaterOpen(true);\n        } else {\n          setTranslaterOpen(false);\n        }\n      });\n    });\n    mutationObserver.observe(document.body, {\n      attributes: true,\n    });\n    return () => {\n      mutationObserver.disconnect();\n    };\n  }, []);\n\n  const value = React.useMemo(() => {\n    return {\n      translaterOpen,\n    };\n  }, [translaterOpen]);\n\n  return (\n    <TranslaterContext.Provider value={value}>\n      {children}\n    </TranslaterContext.Provider>\n  );\n}\n\nexport default TranslatorProvider;\n"]},"metadata":{},"sourceType":"module"}