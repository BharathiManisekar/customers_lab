{"ast":null,"code":"import { getErrorMessage } from \"../../../helpers/functions\";\nimport CaseService from \"../../../services/CaseService\";\nimport _ from \"lodash\";\n/**\n * @description Function to call the accept claim Service\n * @param {id} id\n * @param {*rounds} rounds\n * @param {*isRespondent} isRespondent\n */\n\nconst callAcceptCliam = async (id, rounds, isRespondent) => {\n  const lastIndex = Object.keys(rounds).length - 1;\n  const lastRound = rounds[lastIndex];\n  const roundForSubmit = isRespondent ? lastRound.claimantClaims : lastRound.respondentClaims;\n  const acceptedItems = roundForSubmit.filter(el => {\n    var _el$offer;\n\n    return _.isEmpty(el === null || el === void 0 ? void 0 : el.acceptedOffer) && (el === null || el === void 0 ? void 0 : (_el$offer = el.offer) === null || _el$offer === void 0 ? void 0 : _el$offer.status) === \"offered\";\n  }).map(el => el.offer.id);\n\n  if (acceptedItems.length > 0) {\n    const postData = {\n      acceptedCounterOfferIds: acceptedItems\n    };\n    await postClaimItems(id, postData).then(res => {\n      return res;\n    });\n  }\n};\n/**\n * @description Function to Call the Send offer Services\n * @param {*id} id\n * @param {*formikValue} formikValue\n */\n\n\nconst callSendOffer = async (id, formikValue) => {\n  var _formikValue$current, _formikValue$current$, _formikValue$current2;\n\n  const postData = {};\n  const roundForSubmit = formikValue === null || formikValue === void 0 ? void 0 : (_formikValue$current = formikValue.current[(formikValue === null || formikValue === void 0 ? void 0 : (_formikValue$current2 = formikValue.current) === null || _formikValue$current2 === void 0 ? void 0 : _formikValue$current2.length) - 1]) === null || _formikValue$current === void 0 ? void 0 : (_formikValue$current$ = _formikValue$current.values) === null || _formikValue$current$ === void 0 ? void 0 : _formikValue$current$.items;\n  const acceptedItems = roundForSubmit.filter(el => {\n    var _el$offer2, _el$offer3, _el$offer4;\n\n    return _.isEmpty(el === null || el === void 0 ? void 0 : el.acceptedOffer) && (el === null || el === void 0 ? void 0 : (_el$offer2 = el.offer) === null || _el$offer2 === void 0 ? void 0 : _el$offer2.status) === \"accepted\" || (el === null || el === void 0 ? void 0 : (_el$offer3 = el.offer) === null || _el$offer3 === void 0 ? void 0 : _el$offer3.status) === \"offered\" && Number(el === null || el === void 0 ? void 0 : (_el$offer4 = el.offer) === null || _el$offer4 === void 0 ? void 0 : _el$offer4.claimValue) === Number(el.previousOffer);\n  }).map(el => el.offer.id);\n  const offeredItems = roundForSubmit.filter(el => {\n    var _el$offer5, _el$offer6;\n\n    return (el === null || el === void 0 ? void 0 : (_el$offer5 = el.offer) === null || _el$offer5 === void 0 ? void 0 : _el$offer5.status) === \"offered\" && Number(el === null || el === void 0 ? void 0 : (_el$offer6 = el.offer) === null || _el$offer6 === void 0 ? void 0 : _el$offer6.claimValue) !== Number(el.previousOffer);\n  }).map(el => {\n    const {\n      id,\n      offer\n    } = el;\n    return {\n      claimValue: Number(offer.claimValue),\n      caseItemId: id,\n      reason: offer.reason || \"\",\n      suggestedOffer: {\n        claimValue: Number(offer.suggestedClaimValue)\n      }\n    };\n  });\n\n  if (offeredItems.length > 0) {\n    postData.suggestedCounterOffers = offeredItems;\n  }\n\n  if (acceptedItems.length > 0) {\n    postData.acceptedCounterOfferIds = acceptedItems;\n  }\n\n  await postClaimItems(id, postData).then(result => {\n    return result;\n  });\n};\n/**\n * @description Function to call the Accept offer services\n * @param {id} id\n * @param {items} items\n */\n\n\nconst postClaimItems = async (id, postData) => {\n  try {\n    const res = await CaseService.postClaims(id, postData);\n    console.log(res);\n  } catch (error) {\n    const message = getErrorMessage(error);\n    return {\n      message,\n      loader: false\n    };\n  } finally {\n    return {\n      message: \"success\",\n      loader: false\n    };\n  }\n};\n/**\n * @description Function to call the Quit case Services\n * @param {id} id\n */\n\n\nconst callQuitCase = async id => {\n  try {\n    const res = await CaseService.quitCase(id);\n    console.log(res);\n  } catch (error) {\n    const message = getErrorMessage(error);\n    return {\n      message,\n      loader: false\n    };\n  } finally {\n    return {\n      message: \"success\",\n      loader: false\n    };\n  }\n};\n\nexport { callAcceptCliam, callSendOffer, callQuitCase };","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/pages/NegotiationPages/negotiation-helper.js"],"names":["getErrorMessage","CaseService","_","callAcceptCliam","id","rounds","isRespondent","lastIndex","Object","keys","length","lastRound","roundForSubmit","claimantClaims","respondentClaims","acceptedItems","filter","el","isEmpty","acceptedOffer","offer","status","map","postData","acceptedCounterOfferIds","postClaimItems","then","res","callSendOffer","formikValue","current","values","items","Number","claimValue","previousOffer","offeredItems","caseItemId","reason","suggestedOffer","suggestedClaimValue","suggestedCounterOffers","result","postClaims","console","log","error","message","loader","callQuitCase","quitCase"],"mappings":"AAAA,SAASA,eAAT,QAAgC,4BAAhC;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,OAAOC,EAAP,EAAWC,MAAX,EAAmBC,YAAnB,KAAoC;AAC1D,QAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,GAA6B,CAA/C;AACA,QAAMC,SAAS,GAAGN,MAAM,CAACE,SAAD,CAAxB;AACA,QAAMK,cAAc,GAAGN,YAAY,GAC/BK,SAAS,CAACE,cADqB,GAE/BF,SAAS,CAACG,gBAFd;AAGA,QAAMC,aAAa,GAAGH,cAAc,CACjCI,MADmB,CAEjBC,EAAD;AAAA;;AAAA,WAAQf,CAAC,CAACgB,OAAF,CAAUD,EAAV,aAAUA,EAAV,uBAAUA,EAAE,CAAEE,aAAd,KAAgC,CAAAF,EAAE,SAAF,IAAAA,EAAE,WAAF,yBAAAA,EAAE,CAAEG,KAAJ,wDAAWC,MAAX,MAAsB,SAA9D;AAAA,GAFkB,EAInBC,GAJmB,CAIdL,EAAD,IAAQA,EAAE,CAACG,KAAH,CAAShB,EAJF,CAAtB;;AAKA,MAAIW,aAAa,CAACL,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,UAAMa,QAAQ,GAAG;AACfC,MAAAA,uBAAuB,EAAET;AADV,KAAjB;AAGA,UAAMU,cAAc,CAACrB,EAAD,EAAKmB,QAAL,CAAd,CAA6BG,IAA7B,CAAmCC,GAAD,IAAS;AAC/C,aAAOA,GAAP;AACD,KAFK,CAAN;AAGD;AACF,CAnBD;AAqBA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,aAAa,GAAG,OAAOxB,EAAP,EAAWyB,WAAX,KAA2B;AAAA;;AAC/C,QAAMN,QAAQ,GAAG,EAAjB;AACA,QAAMX,cAAc,GAClBiB,WADkB,aAClBA,WADkB,+CAClBA,WAAW,CAAEC,OAAb,CAAqB,CAAAD,WAAW,SAAX,IAAAA,WAAW,WAAX,qCAAAA,WAAW,CAAEC,OAAb,gFAAsBpB,MAAtB,IAA+B,CAApD,CADkB,kFAClB,qBAAwDqB,MADtC,0DAClB,sBAAgEC,KADlE;AAEA,QAAMjB,aAAa,GAAGH,cAAc,CACjCI,MADmB,CAEjBC,EAAD;AAAA;;AAAA,WACGf,CAAC,CAACgB,OAAF,CAAUD,EAAV,aAAUA,EAAV,uBAAUA,EAAE,CAAEE,aAAd,KAAgC,CAAAF,EAAE,SAAF,IAAAA,EAAE,WAAF,0BAAAA,EAAE,CAAEG,KAAJ,0DAAWC,MAAX,MAAsB,UAAvD,IACC,CAAAJ,EAAE,SAAF,IAAAA,EAAE,WAAF,0BAAAA,EAAE,CAAEG,KAAJ,0DAAWC,MAAX,MAAsB,SAAtB,IACCY,MAAM,CAAChB,EAAD,aAACA,EAAD,qCAACA,EAAE,CAAEG,KAAL,+CAAC,WAAWc,UAAZ,CAAN,KAAkCD,MAAM,CAAChB,EAAE,CAACkB,aAAJ,CAH5C;AAAA,GAFkB,EAOnBb,GAPmB,CAOdL,EAAD,IAAQA,EAAE,CAACG,KAAH,CAAShB,EAPF,CAAtB;AAQA,QAAMgC,YAAY,GAAGxB,cAAc,CAChCI,MADkB,CAEhBC,EAAD;AAAA;;AAAA,WACE,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,0BAAAA,EAAE,CAAEG,KAAJ,0DAAWC,MAAX,MAAsB,SAAtB,IACAY,MAAM,CAAChB,EAAD,aAACA,EAAD,qCAACA,EAAE,CAAEG,KAAL,+CAAC,WAAWc,UAAZ,CAAN,KAAkCD,MAAM,CAAChB,EAAE,CAACkB,aAAJ,CAF1C;AAAA,GAFiB,EAMlBb,GANkB,CAMbL,EAAD,IAAQ;AACX,UAAM;AAAEb,MAAAA,EAAF;AAAMgB,MAAAA;AAAN,QAAgBH,EAAtB;AACA,WAAO;AACLiB,MAAAA,UAAU,EAAED,MAAM,CAACb,KAAK,CAACc,UAAP,CADb;AAELG,MAAAA,UAAU,EAAEjC,EAFP;AAGLkC,MAAAA,MAAM,EAAElB,KAAK,CAACkB,MAAN,IAAgB,EAHnB;AAILC,MAAAA,cAAc,EAAE;AACdL,QAAAA,UAAU,EAAED,MAAM,CAACb,KAAK,CAACoB,mBAAP;AADJ;AAJX,KAAP;AAQD,GAhBkB,CAArB;;AAiBA,MAAIJ,YAAY,CAAC1B,MAAb,GAAsB,CAA1B,EAA6B;AAC3Ba,IAAAA,QAAQ,CAACkB,sBAAT,GAAkCL,YAAlC;AACD;;AACD,MAAIrB,aAAa,CAACL,MAAd,GAAuB,CAA3B,EAA8B;AAC5Ba,IAAAA,QAAQ,CAACC,uBAAT,GAAmCT,aAAnC;AACD;;AACD,QAAMU,cAAc,CAACrB,EAAD,EAAKmB,QAAL,CAAd,CAA6BG,IAA7B,CAAmCgB,MAAD,IAAY;AAClD,WAAOA,MAAP;AACD,GAFK,CAAN;AAGD,CAtCD;AAwCA;AACA;AACA;AACA;AACA;;;AACA,MAAMjB,cAAc,GAAG,OAAOrB,EAAP,EAAWmB,QAAX,KAAwB;AAC7C,MAAI;AACF,UAAMI,GAAG,GAAG,MAAM1B,WAAW,CAAC0C,UAAZ,CAAuBvC,EAAvB,EAA2BmB,QAA3B,CAAlB;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACD,GAHD,CAGE,OAAOmB,KAAP,EAAc;AACd,UAAMC,OAAO,GAAG/C,eAAe,CAAC8C,KAAD,CAA/B;AACA,WAAO;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAAP;AACD,GAND,SAMU;AACR,WAAO;AAAED,MAAAA,OAAO,EAAE,SAAX;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KAAP;AACD;AACF,CAVD;AAYA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAG,MAAO7C,EAAP,IAAc;AACjC,MAAI;AACF,UAAMuB,GAAG,GAAG,MAAM1B,WAAW,CAACiD,QAAZ,CAAqB9C,EAArB,CAAlB;AACAwC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACD,GAHD,CAGE,OAAOmB,KAAP,EAAc;AACd,UAAMC,OAAO,GAAG/C,eAAe,CAAC8C,KAAD,CAA/B;AACA,WAAO;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAAP;AACD,GAND,SAMU;AACR,WAAO;AAAED,MAAAA,OAAO,EAAE,SAAX;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KAAP;AACD;AACF,CAVD;;AAYA,SAAS7C,eAAT,EAA0ByB,aAA1B,EAAyCqB,YAAzC","sourcesContent":["import { getErrorMessage } from \"../../../helpers/functions\";\nimport CaseService from \"../../../services/CaseService\";\nimport _ from \"lodash\";\n\n/**\n * @description Function to call the accept claim Service\n * @param {id} id\n * @param {*rounds} rounds\n * @param {*isRespondent} isRespondent\n */\nconst callAcceptCliam = async (id, rounds, isRespondent) => {\n  const lastIndex = Object.keys(rounds).length - 1;\n  const lastRound = rounds[lastIndex];\n  const roundForSubmit = isRespondent\n    ? lastRound.claimantClaims\n    : lastRound.respondentClaims;\n  const acceptedItems = roundForSubmit\n    .filter(\n      (el) => _.isEmpty(el?.acceptedOffer) && el?.offer?.status === \"offered\"\n    )\n    .map((el) => el.offer.id);\n  if (acceptedItems.length > 0) {\n    const postData = {\n      acceptedCounterOfferIds: acceptedItems,\n    };\n    await postClaimItems(id, postData).then((res) => {\n      return res;\n    });\n  }\n};\n\n/**\n * @description Function to Call the Send offer Services\n * @param {*id} id\n * @param {*formikValue} formikValue\n */\nconst callSendOffer = async (id, formikValue) => {\n  const postData = {};\n  const roundForSubmit =\n    formikValue?.current[formikValue?.current?.length - 1]?.values?.items;\n  const acceptedItems = roundForSubmit\n    .filter(\n      (el) =>\n        (_.isEmpty(el?.acceptedOffer) && el?.offer?.status === \"accepted\") ||\n        (el?.offer?.status === \"offered\" &&\n          Number(el?.offer?.claimValue) === Number(el.previousOffer))\n    )\n    .map((el) => el.offer.id);\n  const offeredItems = roundForSubmit\n    .filter(\n      (el) =>\n        el?.offer?.status === \"offered\" &&\n        Number(el?.offer?.claimValue) !== Number(el.previousOffer)\n    )\n    .map((el) => {\n      const { id, offer } = el;\n      return {\n        claimValue: Number(offer.claimValue),\n        caseItemId: id,\n        reason: offer.reason || \"\",\n        suggestedOffer: {\n          claimValue: Number(offer.suggestedClaimValue),\n        },\n      };\n    });\n  if (offeredItems.length > 0) {\n    postData.suggestedCounterOffers = offeredItems;\n  }\n  if (acceptedItems.length > 0) {\n    postData.acceptedCounterOfferIds = acceptedItems;\n  }\n  await postClaimItems(id, postData).then((result) => {\n    return result;\n  });\n};\n\n/**\n * @description Function to call the Accept offer services\n * @param {id} id\n * @param {items} items\n */\nconst postClaimItems = async (id, postData) => {\n  try {\n    const res = await CaseService.postClaims(id, postData);\n    console.log(res);\n  } catch (error) {\n    const message = getErrorMessage(error);\n    return { message, loader: false };\n  } finally {\n    return { message: \"success\", loader: false };\n  }\n};\n\n/**\n * @description Function to call the Quit case Services\n * @param {id} id\n */\nconst callQuitCase = async (id) => {\n  try {\n    const res = await CaseService.quitCase(id);\n    console.log(res);\n  } catch (error) {\n    const message = getErrorMessage(error);\n    return { message, loader: false };\n  } finally {\n    return { message: \"success\", loader: false };\n  }\n};\n\nexport { callAcceptCliam, callSendOffer, callQuitCase };\n"]},"metadata":{},"sourceType":"module"}