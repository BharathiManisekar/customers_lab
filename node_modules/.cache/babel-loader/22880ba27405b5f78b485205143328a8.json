{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/common/ResendTimer/ResendTimer.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { SmallText } from \"../../../styles/component/style\";\nimport moment from \"moment\";\nexport const ResentTimer = ({\n  message = \"otp message\",\n  resendOtp = () => {},\n  timer = 60\n}) => {\n  const [count, setCount] = useState(timer);\n  const [enableTimer, setEnableTimer] = useState(true); // Effect for timer\n\n  useEffect(() => {\n    if (count === 0) {\n      setEnableTimer(false);\n    }\n\n    const timer = setInterval(function () {\n      setCount(prev => prev - 1);\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [count]);\n\n  const resetTimer = () => {\n    setCount(timer);\n    setEnableTimer(true);\n    resendOtp();\n  };\n\n  return /*#__PURE__*/React.createElement(SmallText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, message, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, !enableTimer ? /*#__PURE__*/React.createElement(\"span\", {\n    onClick: resetTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"Resend\") : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"not-allowed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Resend in \", moment.utc(count * 1000).format(\"mm:ss\"))));\n};","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/common/ResendTimer/ResendTimer.js"],"names":["React","useEffect","useState","SmallText","moment","ResentTimer","message","resendOtp","timer","count","setCount","enableTimer","setEnableTimer","setInterval","prev","clearInterval","resetTimer","utc","format"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,iCAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,OAAO,GAAG,aADgB;AAE1BC,EAAAA,SAAS,GAAG,MAAM,CAAE,CAFM;AAG1BC,EAAAA,KAAK,GAAG;AAHkB,CAAD,KAIrB;AACJ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,KAAD,CAAlC;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,IAAD,CAA9C,CAFI,CAIJ;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAK,KAAK,CAAd,EAAiB;AACfG,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AACD,UAAMJ,KAAK,GAAGK,WAAW,CAAC,YAAY;AACpCH,MAAAA,QAAQ,CAAEI,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAR;AACD,KAFwB,EAEtB,IAFsB,CAAzB;AAGA,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACP,KAAD,CAAb;AACD,KAFD;AAGD,GAVQ,EAUN,CAACC,KAAD,CAVM,CAAT;;AAYA,QAAMO,UAAU,GAAG,MAAM;AACvBN,IAAAA,QAAQ,CAACF,KAAD,CAAR;AACAI,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAL,IAAAA,SAAS;AACV,GAJD;;AAMA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OADH,eAEE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACK,WAAD,gBACC;AAAM,IAAA,OAAO,EAAEK,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaZ,MAAM,CAACa,GAAP,CAAWR,KAAK,GAAG,IAAnB,EAAyBS,MAAzB,CAAgC,OAAhC,CADb,CAJJ,CAFF,CADF;AAcD,CAzCM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { SmallText } from \"../../../styles/component/style\";\nimport moment from \"moment\";\n\nexport const ResentTimer = ({\n  message = \"otp message\",\n  resendOtp = () => {},\n  timer = 60,\n}) => {\n  const [count, setCount] = useState(timer);\n  const [enableTimer, setEnableTimer] = useState(true);\n\n  // Effect for timer\n  useEffect(() => {\n    if (count === 0) {\n      setEnableTimer(false);\n    }\n    const timer = setInterval(function () {\n      setCount((prev) => prev - 1);\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [count]);\n\n  const resetTimer = () => {\n    setCount(timer);\n    setEnableTimer(true);\n    resendOtp();\n  };\n\n  return (\n    <SmallText>\n      {message}\n      <span className=\"link\">\n        {!enableTimer ? (\n          <span onClick={resetTimer}>Resend</span>\n        ) : (\n          <span className=\"not-allowed\">\n            Resend in {moment.utc(count * 1000).format(\"mm:ss\")}\n          </span>\n        )}\n      </span>\n    </SmallText>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}