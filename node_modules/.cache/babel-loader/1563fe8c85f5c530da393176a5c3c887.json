{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/MyDashboard/index.js\",\n    _theme$breakpoints;\n\nimport React, { useEffect, useState } from \"react\";\nimport ActionBar from \"../../common/ActionBar\";\nimport CardCount from \"../../common/CardCount\";\nimport styled from \"styled-components\";\nimport COLORS from \"../../../assets/Colors\";\nimport theme from \"../../../assets/theme\";\nimport Tabs from \"../Tabs\";\nimport { navigate } from \"@reach/router\";\nimport DashboardSerivces from \"../../../services/DashboardSerivces\";\nimport _ from \"lodash\";\nimport queryString from \"query-string\";\nimport useCartCount from \"../../../hooks/useCartCount\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport labels from \"../../../helpers/labels.json\";\nimport useUser from \"../../../hooks/useUser\";\n\nconst Index = () => {\n  const [activities, setActivities] = useState([]); //This state for Pending Action\n\n  const [loading, setLoading] = useState(true); // This State for showing the loader for pending action\n\n  const [currentPage, setCurrentPage] = useState(0); // This state is used for indicating the current page\n\n  const [endPage, setEndPage] = useState();\n  const {\n    setTriggerCount\n  } = useCartCount();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    userObject\n  } = useUser();\n  const [dashboardCount, setDashboardCount] = useState({\n    activeCount: 0,\n    caseInvitesReceived: 0,\n    pendingInvites: 0\n  });\n  const {\n    setLoader\n  } = useLoader();\n  const badges = [{\n    value: 15,\n    label: labels.active_cases,\n    path: \"/dashboard/cases?status=Under Resolution\",\n    key: \"activeCount\"\n  }, {\n    value: 5,\n    label: labels.case_invites,\n    path: \"/dashboard/invites\",\n    key: \"pendingSentInvites\"\n  }, {\n    value: 5,\n    label: labels.case_invites_received,\n    path: \"/dashboard/requests\",\n    key: \"pendingReceivedInvites\"\n  }, {\n    value: 5,\n    label: labels.case_agreement,\n    path: \"/dashboard/cases?status=settled\",\n    key: \"settledTotal\"\n  }];\n  const actions = [{\n    text: labels[\"actions.createBulk\"],\n    props: {\n      onClick: () => {\n        navigate(\"/dashboard/cases/bulk-create\");\n      }\n    }\n  }, {\n    text: labels.create_party,\n    props: {\n      onClick: () => {\n        navigate(\"/dashboard/parties/create\");\n      }\n    }\n  }, {\n    text: labels.create_case,\n    props: {\n      onClick: () => navigate(\"/dashboard/cases/create\")\n    }\n  }];\n  useEffect(() => {\n    const getPendingAction = () => {\n      setTriggerCount(true);\n      let params = {\n        page: currentPage + 1,\n        perPage: 25\n      };\n      let stringParams = \"\";\n\n      if (!_.isEmpty(params)) {\n        stringParams = `?${queryString.stringify(params)}`;\n      }\n\n      DashboardSerivces.getPendingAction(stringParams).then(res => {\n        if (res === null || res === void 0 ? void 0 : res.activities) {\n          setActivities([...activities, ...res.activities.data]);\n          setEndPage(res.activities.lastPage);\n        }\n\n        setLoading(false);\n      }, err => {\n        console.log(err);\n        setLoading(false);\n      });\n    };\n\n    if (!_.isEmpty(userObject) && (userObject === null || userObject === void 0 ? void 0 : userObject.emailVerified)) {\n      getPendingAction();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentPage, userObject]);\n  useEffect(() => {\n    async function getDashboardCount() {\n      try {\n        setLoader({\n          state: true\n        });\n        const response = await CaseService.dashboardCount();\n        setDashboardCount(response);\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n      } finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n\n    if (!_.isEmpty(userObject) && (userObject === null || userObject === void 0 ? void 0 : userObject.emailVerified)) {\n      getDashboardCount();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [userObject]);\n\n  const loadMore = () => {\n    setCurrentPage(currentPage + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ActionBar, {\n    actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardCount, {\n    dashboardCount: dashboardCount,\n    cards: badges,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(UpdatesWrapper, {\n    className: \"dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    activities: activities,\n    loading: loading,\n    value: 0,\n    lastPage: endPage,\n    currentPage: currentPage,\n    loadMore: loadMore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Index;\nconst UpdatesWrapper = styled.div`\n  padding: 8px 15px 18px 15px;\n  & h2 {\n    margin-top: 20px;\n    margin-bottom: 14px;\n    font-family: ${theme.fonts.primaryFontBold};\n    font-size: 12px;\n    font-weight: bold;\n    letter-spacing: 0.69px;\n    color: ${COLORS.COLOR_DARK};\n  }\n  @media ${theme === null || theme === void 0 ? void 0 : (_theme$breakpoints = theme.breakpoints) === null || _theme$breakpoints === void 0 ? void 0 : _theme$breakpoints.sm_up} {\n    padding: 11px 53px 11px 33px;\n  }\n`;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/MyDashboard/index.js"],"names":["React","useEffect","useState","ActionBar","CardCount","styled","COLORS","theme","Tabs","navigate","DashboardSerivces","_","queryString","useCartCount","useLoader","CaseService","getErrorMessage","useSnackbar","labels","useUser","Index","activities","setActivities","loading","setLoading","currentPage","setCurrentPage","endPage","setEndPage","setTriggerCount","enqueueSnackbar","userObject","dashboardCount","setDashboardCount","activeCount","caseInvitesReceived","pendingInvites","setLoader","badges","value","label","active_cases","path","key","case_invites","case_invites_received","case_agreement","actions","text","props","onClick","create_party","create_case","getPendingAction","params","page","perPage","stringParams","isEmpty","stringify","then","res","data","lastPage","err","console","log","emailVerified","getDashboardCount","state","response","error","message","variant","loadMore","UpdatesWrapper","div","fonts","primaryFontBold","COLOR_DARK","breakpoints","sm_up"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ActionBar from \"../../common/ActionBar\";\nimport CardCount from \"../../common/CardCount\";\nimport styled from \"styled-components\";\nimport COLORS from \"../../../assets/Colors\";\nimport theme from \"../../../assets/theme\";\nimport Tabs from \"../Tabs\";\nimport { navigate } from \"@reach/router\";\nimport DashboardSerivces from \"../../../services/DashboardSerivces\";\nimport _ from \"lodash\";\nimport queryString from \"query-string\";\nimport useCartCount from \"../../../hooks/useCartCount\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport labels from \"../../../helpers/labels.json\";\nimport useUser from \"../../../hooks/useUser\";\n\nconst Index = () => {\n  const [activities, setActivities] = useState([]); //This state for Pending Action\n  const [loading, setLoading] = useState(true); // This State for showing the loader for pending action\n  const [currentPage, setCurrentPage] = useState(0); // This state is used for indicating the current page\n  const [endPage, setEndPage] = useState();\n  const { setTriggerCount } = useCartCount();\n  const { enqueueSnackbar } = useSnackbar();\n  const { userObject } = useUser();\n  const [dashboardCount, setDashboardCount] = useState({\n    activeCount: 0,\n    caseInvitesReceived: 0,\n    pendingInvites: 0,\n  });\n  const { setLoader } = useLoader();\n\n  const badges = [\n    {\n      value: 15,\n      label: labels.active_cases,\n      path: \"/dashboard/cases?status=Under Resolution\",\n      key: \"activeCount\",\n    },\n    {\n      value: 5,\n      label: labels.case_invites,\n      path: \"/dashboard/invites\",\n      key: \"pendingSentInvites\",\n    },\n    {\n      value: 5,\n      label: labels.case_invites_received,\n      path: \"/dashboard/requests\",\n      key: \"pendingReceivedInvites\",\n    },\n    {\n      value: 5,\n      label: labels.case_agreement,\n      path: \"/dashboard/cases?status=settled\",\n      key: \"settledTotal\",\n    },\n  ];\n\n  const actions = [\n    {\n      text: labels[\"actions.createBulk\"],\n      props: {\n        onClick: () => {\n          navigate(\"/dashboard/cases/bulk-create\");\n        },\n      },\n    },\n    {\n      text: labels.create_party,\n      props: {\n        onClick: () => {\n          navigate(\"/dashboard/parties/create\");\n        },\n      },\n    },\n    {\n      text: labels.create_case,\n      props: {\n        onClick: () => navigate(\"/dashboard/cases/create\"),\n      },\n    },\n  ];\n\n  useEffect(() => {\n    const getPendingAction = () => {\n      setTriggerCount(true);\n      let params = {\n        page: currentPage + 1,\n        perPage: 25,\n      };\n      let stringParams = \"\";\n      if (!_.isEmpty(params)) {\n        stringParams = `?${queryString.stringify(params)}`;\n      }\n      DashboardSerivces.getPendingAction(stringParams).then(\n        (res) => {\n          if (res?.activities) {\n            setActivities([...activities, ...res.activities.data]);\n            setEndPage(res.activities.lastPage);\n          }\n          setLoading(false);\n        },\n        (err) => {\n          console.log(err);\n          setLoading(false);\n        }\n      );\n    };\n    if (!_.isEmpty(userObject) && userObject?.emailVerified) {\n      getPendingAction();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage, userObject]);\n\n  useEffect(() => {\n    async function getDashboardCount() {\n      try {\n        setLoader({ state: true });\n        const response = await CaseService.dashboardCount();\n        setDashboardCount(response);\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\",\n        });\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n    if (!_.isEmpty(userObject) && userObject?.emailVerified) {\n      getDashboardCount();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userObject]);\n\n  const loadMore = () => {\n    setCurrentPage(currentPage + 1);\n  };\n\n  return (\n    <div>\n      <ActionBar {...{ actions }} />\n      <CardCount dashboardCount={dashboardCount} cards={badges} />\n      <UpdatesWrapper className=\"dashboard\">\n        {/* <h2>{labels.updates}</h2> */}\n        <Tabs\n          activities={activities}\n          loading={loading}\n          value={0}\n          lastPage={endPage}\n          currentPage={currentPage}\n          loadMore={loadMore}\n        />\n      </UpdatesWrapper>\n    </div>\n  );\n};\n\nexport default Index;\n\nconst UpdatesWrapper = styled.div`\n  padding: 8px 15px 18px 15px;\n  & h2 {\n    margin-top: 20px;\n    margin-bottom: 14px;\n    font-family: ${theme.fonts.primaryFontBold};\n    font-size: 12px;\n    font-weight: bold;\n    letter-spacing: 0.69px;\n    color: ${COLORS.COLOR_DARK};\n  }\n  @media ${theme?.breakpoints?.sm_up} {\n    padding: 11px 53px 11px 33px;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}