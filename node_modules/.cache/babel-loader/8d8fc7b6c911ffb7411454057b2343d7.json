{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/pages/NegotiationPages/AwaitingRespondantPage/index.js\";\nimport React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport ActionBar from \"../../../common/ActionBar\";\nimport { PageWrapper, StyledLabel, LifeCycleContainer, Manager, Mediator, Spacing, Block } from \"../styles\";\nimport LifeCycle from \"../../../common/LifeCycle\";\nimport CaseDetails from \"../../../common/CaseDetails\";\nimport CaseManager from \"../common/CaseManager\";\nimport BigBlueButton from \"../common/BigBlueButton\";\nimport DrawerTableCaseDocument from \"../../../internal/DrawerTable\";\nimport _ from \"lodash\";\nimport { navigate } from \"@reach/router\";\nimport CaseCTA from \"../common/CaseCTA\";\nimport AlertDialog from \"../../../common/Alert\";\nimport CaseService from \"../../../../services/CaseService\";\nimport { RESPONTANT_LIFE_CYCLE, CLAIMANT_LIFE_CYCLE, AWAITING_RESPONDANT, CLAIMENT_STR, CLAIMENT_PAID_NEGOTIATION, RESPONDENT_PAID_NEGOTIATION, RESPONDANT_ONBOARDED, NEGOTIATION_ONGOING, NEGOTIATION_REACHED, NEGOTIATION_QUIT_BY_CLAIMENT, NEGOTIATION_QUIT_BY_RESPONDENT, BOTH_PAID_NEGOTIATION, NEGOTIATION_QUIT_BY_CASEMANAGER } from \"../../../../helpers/constants\";\nimport { getErrorMessage } from \"../../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport useLoader from \"../../../../hooks/useLoader\";\nimport NegotiationState from \"./NegotiationState\";\nimport useFreshChat from \"../../../../hooks/useFreshChat\";\nimport useUser from \"../../../../hooks/useUser\";\nimport { callAcceptCliam, callSendOffer, callQuitCase } from \"../negotiation-helper\";\nimport useCartCount from \"../../../../hooks/useCartCount\";\nimport useAlert from \"../../../../hooks/useAlert\";\nimport theme from \"../../../../assets/theme\";\nimport MediationState from \"./MediationState\";\nimport queryString from \"query-string\";\nimport useNotification from \"../../../../hooks/useNotification\";\n\nfunction negotiationTypeState({ ...props\n}) {\n  var _props$caseDetails;\n\n  switch (props === null || props === void 0 ? void 0 : (_props$caseDetails = props.caseDetails) === null || _props$caseDetails === void 0 ? void 0 : _props$caseDetails.resolutionKind) {\n    case \"mediation\":\n      return /*#__PURE__*/React.createElement(MediationState, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 14\n        }\n      }));\n\n    case \"arbitration\":\n      return /*#__PURE__*/React.createElement(MediationState, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 14\n        }\n      }));\n\n    case \"negotiation\":\n      return /*#__PURE__*/React.createElement(NegotiationState, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return null;\n  }\n}\n\nexport default function AwaitingRespondantPage({\n  id\n}) {\n  var _caseDetails$caseMana, _caseDetails$requeste, _caseDetails$requeste2, _caseDetails$requeste3;\n\n  const initialState = [\"My Cases\"];\n  const [breadcrumbs, setBreadcrumbs] = useState(initialState); // This state is to display the bread crum\n\n  const [state, setState] = useState(); // This state is used for caseDocument\n\n  const [open, setOpen] = useState(false); //This state is for open and Close the model\n\n  const [dialogData, setDialogData] = useState({}); // This state is used to set the dialog content\n\n  const [comments, setComments] = useState([]); // This is list of comments\n\n  const [caseDetails, setCaseDetails] = useState({}); // This state holds the case detaisl\n\n  const [negotiationRounds, setNegotiationRounds] = useState({}); // THis state holds the NegotiationRounds\n\n  const [currentState, setCurrentState] = useState({}); // This state Holds the current state\n\n  const [isRespondent, setIsRespondent] = useState(false); // This state tells current logged in user is respondent or not\n\n  const [triggerCaseCall, setTriggerCaseCall] = useState(true); // This State to trigger the get details call when any update happend in the case\n\n  const [buttonToDisplay, setButtonToDisplay] = useState([]); //This state used to hold the button list based on case life cycle and user Action\n\n  const [showCta, setShowCta] = useState(false); // This state used to show and hide the button based on the user action\n\n  const [partyList, setPartyList] = useState([]);\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); // This Hook is used to trigger the snackbar message\n\n  const {\n    setLoader\n  } = useLoader(); // This Hook is to display the loader\n\n  const {\n    userObject\n  } = useUser(); // This Hook holds the Current User Object\n\n  const {\n    setChatDetail,\n    handlePopup,\n    setIsInitialised,\n    setTag\n  } = useFreshChat({\n    userObject\n  });\n  const formikRef = useRef([]); // This reference holds the formik values\n\n  const {\n    setTriggerCount\n  } = useCartCount(); // This context to trigger the cart count when negotiation moves to payment.\n\n  const MTRef = useRef();\n  const {\n    hideAlert,\n    showAlert\n  } = useAlert();\n  const {\n    triggerNotify,\n    setTriggerNotify\n  } = useNotification(); // hooks to refresh the page\n\n  useEffect(() => {\n    if (triggerNotify) {\n      setTriggerCaseCall(true);\n      setTriggerNotify(false);\n    }\n  }, [setTriggerNotify, triggerNotify]);\n  /**This useEffect is Used to get the case information */\n\n  useEffect(() => {\n    /** Function to get the CaseDetails */\n    async function getCaseById(id) {\n      setLoader({\n        state: true,\n        message: \"Fetching case details...\"\n      });\n\n      try {\n        const res = await CaseService.getCase(id);\n        const negotiation_res = await CaseService.negotiations(id);\n\n        if (res && negotiation_res) {\n          let params = {\n            page: 1,\n            perPage: 1000\n          };\n\n          if ((res === null || res === void 0 ? void 0 : res.resolutionKind) !== \"negotiation\") {\n            let stringParams = \"\";\n\n            if (!_.isEmpty(params)) {\n              stringParams = `?${queryString.stringify(params)}`;\n            }\n\n            const mediation_res = await CaseService.mediations(id, stringParams); // This is for getting the party\n\n            if (mediation_res) {\n              setComments(mediation_res === null || mediation_res === void 0 ? void 0 : mediation_res.data);\n            }\n          }\n\n          const partyParam = `?${queryString.stringify(params)}&sort=partyRole&sortDirection=asc`;\n          const party_list_res = await CaseService.getPartyListByCaseId(id, partyParam); // This is for getting the party details based on the case\n\n          if (party_list_res === null || party_list_res === void 0 ? void 0 : party_list_res.data) {\n            setPartyList(party_list_res === null || party_list_res === void 0 ? void 0 : party_list_res.data);\n          }\n\n          let case_response = { ...res\n          };\n\n          if (!(case_response === null || case_response === void 0 ? void 0 : case_response.respondentPartyId)) {\n            case_response.status = AWAITING_RESPONDANT;\n          } else if ((case_response === null || case_response === void 0 ? void 0 : case_response.respondentStatus) === \"pending\" || (case_response === null || case_response === void 0 ? void 0 : case_response.respondentStatus) === \"declined\") {\n            case_response.status = RESPONDANT_ONBOARDED;\n          } else if ((case_response === null || case_response === void 0 ? void 0 : case_response.status) === NEGOTIATION_REACHED && (case_response === null || case_response === void 0 ? void 0 : case_response.subscriptionKind) === \"adhoc\") {\n            case_response.status = BOTH_PAID_NEGOTIATION;\n          }\n\n          setNegotiationRounds(negotiation_res);\n          setCaseDetails(case_response);\n          setBreadcrumbs([\"My Cases\" // _.startCase(case_response?.resolutionKind),\n          // case_response?.title,\n          ]);\n          setIsRespondent(case_response.agentRole !== CLAIMENT_STR);\n\n          if (case_response.agentRole === CLAIMENT_STR) {\n            setInitialValues(JSON.parse(JSON.stringify(CLAIMANT_LIFE_CYCLE)), case_response, false, negotiation_res);\n          } else {\n            setInitialValues(JSON.parse(JSON.stringify(RESPONTANT_LIFE_CYCLE)), case_response, true, negotiation_res);\n          }\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n        navigate(\"/dashboard/cases\");\n      } finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n    /** Function to get the chatDetails */\n\n\n    async function getChatDetails(id) {\n      try {\n        const chatDetails = await CaseService.getChatDetails(id);\n\n        if (!_.isEmpty(chatDetails === null || chatDetails === void 0 ? void 0 : chatDetails.chat)) {\n          // setIsInitialised(true);\n          setChatDetail(chatDetails === null || chatDetails === void 0 ? void 0 : chatDetails.chat);\n          setTag([\"ind_neg_case\"]);\n        }\n      } catch (error) {\n        // setIsInitialised(true);\n        setTag([\"ind_neg_case\"]);\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n      }\n    }\n\n    if (id && triggerCaseCall) {\n      getCaseById(id);\n      setTriggerCaseCall(false);\n      getChatDetails(id);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [triggerCaseCall]);\n  /** This function is used to set the inital values for the component**/\n\n  const setInitialValues = (caesLifeCycle, caseDetails, isRespondent, negotiationRounds) => {\n    if (caesLifeCycle.length && !_.isEmpty(caseDetails)) {\n      if ((negotiationRounds === null || negotiationRounds === void 0 ? void 0 : negotiationRounds.length) > 0 && !isRespondent && caseDetails.status === NEGOTIATION_ONGOING && !isRepondentReply(negotiationRounds) && (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) === \"negotiation\") {\n        setCurrentState(caesLifeCycle.find(el => el.index === 2));\n      } else if (caesLifeCycle.some(el => el.key === caseDetails.status)) {\n        const caseState = caesLifeCycle.find(el => el.key === caseDetails.status);\n        setCurrentState(caseState);\n        checkSetShowBtn(negotiationRounds, caseState, isRespondent, caseDetails);\n        displayCaseCTA(caseState, negotiationRounds, caseDetails);\n\n        if ((caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.status) === \"negotiationOngoing\" && _.max(_.map(negotiationRounds, \"negotiationRound\")) !== (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.negotiationRoundLimit)) {\n          if (isRespondent) triggerNegotiateAction(caseState, negotiationRounds, caseDetails);else {\n            var _maxRound2, _maxRound2$respondent;\n\n            let maxRound = negotiationRounds[0];\n\n            for (const round of negotiationRounds) {\n              var _maxRound;\n\n              if ((round === null || round === void 0 ? void 0 : round.negotiationRound) > ((_maxRound = maxRound) === null || _maxRound === void 0 ? void 0 : _maxRound.negotiationRound)) {\n                maxRound = { ...round\n                };\n              }\n            }\n\n            const noActionRequiredCurrently = (_maxRound2 = maxRound) === null || _maxRound2 === void 0 ? void 0 : (_maxRound2$respondent = _maxRound2.respondentClaims) === null || _maxRound2$respondent === void 0 ? void 0 : _maxRound2$respondent.every(value => _.isEmpty(value === null || value === void 0 ? void 0 : value.offer));\n\n            if (!noActionRequiredCurrently) {\n              triggerMoveTonextRound(caseState, negotiationRounds, caseDetails);\n            }\n          }\n        }\n      } else if (!isRespondent) {\n        if (caseDetails.respondentId) {\n          setCurrentState(caesLifeCycle.find(el => el.index === 2));\n        } else {\n          setCurrentState(caesLifeCycle.find(el => el.index === 1));\n        }\n      }\n    }\n  };\n  /**This function is to check whether the respondent has ans back or nor for moving the status to negotiaion ongoing */\n\n\n  const isRepondentReply = negotiation => {\n    var _negotiation$, _negotiation$$respond;\n\n    return (_negotiation$ = negotiation[0]) === null || _negotiation$ === void 0 ? void 0 : (_negotiation$$respond = _negotiation$.respondentClaims) === null || _negotiation$$respond === void 0 ? void 0 : _negotiation$$respond.some(el => {\n      var _el$offer;\n\n      return (el === null || el === void 0 ? void 0 : (_el$offer = el.offer) === null || _el$offer === void 0 ? void 0 : _el$offer.status) === \"offered\";\n    });\n  };\n  /** This function is used to display the CTA based on the status */\n\n\n  const displayCaseCTA = (currentState, negotiationRounds, caseDetails) => {\n    if (!_.isEmpty(currentState)) {\n      if ((caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) !== \"negotiation\") {\n        if (caseDetails.status === NEGOTIATION_ONGOING) {\n          var _currentState$cta;\n\n          setButtonToDisplay(currentState === null || currentState === void 0 ? void 0 : (_currentState$cta = currentState.cta) === null || _currentState$cta === void 0 ? void 0 : _currentState$cta.filter(el => el.type === \"QUIT\"));\n        } else {\n          var _currentState$cta2;\n\n          setButtonToDisplay(currentState === null || currentState === void 0 ? void 0 : (_currentState$cta2 = currentState.cta) === null || _currentState$cta2 === void 0 ? void 0 : _currentState$cta2.filter(el => el.displayBtn));\n        }\n      } else {\n        if (caseDetails.status === NEGOTIATION_ONGOING && (negotiationRounds === null || negotiationRounds === void 0 ? void 0 : negotiationRounds.length) === (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.negotiationRoundLimit)) {\n          var _currentState$cta3;\n\n          setButtonToDisplay(currentState === null || currentState === void 0 ? void 0 : (_currentState$cta3 = currentState.cta) === null || _currentState$cta3 === void 0 ? void 0 : _currentState$cta3.filter(el => el.type === \"QUIT\" || el.type === \"ACCEPT\"));\n        } else {\n          var _currentState$cta4;\n\n          setButtonToDisplay(currentState === null || currentState === void 0 ? void 0 : (_currentState$cta4 = currentState.cta) === null || _currentState$cta4 === void 0 ? void 0 : _currentState$cta4.filter(el => el.displayBtn));\n        }\n      }\n    }\n  };\n  /** THis function is used to check if the round is reached miximum limit or not */\n\n\n  const checkSetShowBtn = (negotiationRounds, currentState, isRespondent, caseDetails) => {\n    if (!_.isEmpty(negotiationRounds)) {\n      var _negotiationRounds$in, _negotiationRounds$in2;\n\n      const index = Object.keys(negotiationRounds)[Object.keys(negotiationRounds).length - 1];\n      const isRespondentAns = (_negotiationRounds$in = negotiationRounds[index]) === null || _negotiationRounds$in === void 0 ? void 0 : (_negotiationRounds$in2 = _negotiationRounds$in.respondentClaims) === null || _negotiationRounds$in2 === void 0 ? void 0 : _negotiationRounds$in2.some(el => {\n        var _el$offer2, _el$offer3;\n\n        return (el === null || el === void 0 ? void 0 : (_el$offer2 = el.offer) === null || _el$offer2 === void 0 ? void 0 : _el$offer2.status) === \"offered\" && (el === null || el === void 0 ? void 0 : (_el$offer3 = el.offer) === null || _el$offer3 === void 0 ? void 0 : _el$offer3.offerorId) === (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.respondentPartyId);\n      });\n      setShowCta(!isRespondentAns && isRespondent || !isRespondent && isRespondentAns || (currentState === null || currentState === void 0 ? void 0 : currentState.index) > 3 || (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) !== \"negotiation\");\n    }\n  };\n  /**THis function is used for Navigating the case details page */\n\n\n  const onBreadcrumbClick = selected => {\n    switch (_.snakeCase(selected)) {\n      case _.snakeCase(caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind):\n        navigate(`/dashboard/cases?caseType=${caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind}`);\n        break;\n\n      case \"my_cases\":\n        navigate(`/dashboard/cases?caseType=${caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind}`);\n        break;\n\n      default:\n        break;\n    }\n  };\n  /**\n   * @description Function Execute when Make Offer Button is clickec\n   */\n\n\n  const triggerMakeOffer = async (rounds = negotiationRounds, caseDetails = {}) => {\n    setLoader({\n      state: true,\n      message: \"Loading...\"\n    });\n    const copytNegotiationRound = [...rounds];\n    let index = Object.keys(copytNegotiationRound)[Object.keys(copytNegotiationRound).length - 1];\n    copytNegotiationRound[index].respondentClaims = JSON.parse(JSON.stringify(copytNegotiationRound[index].claimantClaims));\n    await Promise.all(copytNegotiationRound[index].respondentClaims.map(async (el = {}, idex) => {\n      var _el$offer4, _copytNegotiationRoun8, _copytNegotiationRoun9;\n\n      if (!(el === null || el === void 0 ? void 0 : el.offer)) {\n        el.offer = {};\n      }\n\n      if (el.acceptedOffer) {\n        el.offer = el.acceptedOffer;\n      } else if ((el === null || el === void 0 ? void 0 : (_el$offer4 = el.offer) === null || _el$offer4 === void 0 ? void 0 : _el$offer4.status) === \"offered\") {\n        var _copytNegotiationRoun, _copytNegotiationRoun2, _copytNegotiationRoun3, _copytNegotiationRoun4, _copytNegotiationRoun5, _copytNegotiationRoun6, _copytNegotiationRoun7;\n\n        const data = await getSuggestionRespondent((_copytNegotiationRoun = copytNegotiationRound[index]) === null || _copytNegotiationRoun === void 0 ? void 0 : _copytNegotiationRoun.negotiationRound, (_copytNegotiationRoun2 = copytNegotiationRound[index]) === null || _copytNegotiationRoun2 === void 0 ? void 0 : (_copytNegotiationRoun3 = _copytNegotiationRoun2.claimantClaims[idex]) === null || _copytNegotiationRoun3 === void 0 ? void 0 : (_copytNegotiationRoun4 = _copytNegotiationRoun3.offer) === null || _copytNegotiationRoun4 === void 0 ? void 0 : _copytNegotiationRoun4.claimValue, (_copytNegotiationRoun5 = copytNegotiationRound[index - 1]) === null || _copytNegotiationRoun5 === void 0 ? void 0 : (_copytNegotiationRoun6 = _copytNegotiationRoun5.respondentClaims[idex]) === null || _copytNegotiationRoun6 === void 0 ? void 0 : (_copytNegotiationRoun7 = _copytNegotiationRoun6.offer) === null || _copytNegotiationRoun7 === void 0 ? void 0 : _copytNegotiationRoun7.claimValue, caseDetails);\n        el.offer.claimValue = \"\";\n        el.offer.suggestedClaimValue = data;\n      }\n\n      el.offer.offerorId = caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.respondentPartyId;\n      el.offer.statusAlais = \"makeOffer\";\n      el.offer.reason = \"\";\n      el.previousOffer = (_copytNegotiationRoun8 = copytNegotiationRound[index].claimantClaims[idex]) === null || _copytNegotiationRoun8 === void 0 ? void 0 : (_copytNegotiationRoun9 = _copytNegotiationRoun8.offer) === null || _copytNegotiationRoun9 === void 0 ? void 0 : _copytNegotiationRoun9.claimValue;\n    }));\n    setNegotiationRounds(copytNegotiationRound);\n    setLoader({\n      state: false\n    });\n  };\n  /**\n   * @description Function execute when Accept Claim button is clicked\n   */\n\n\n  const triggerAcceptToClaim = () => {\n    setLoader({\n      state: true,\n      message: \"Updating case details...\"\n    });\n    callAcceptCliam(id, negotiationRounds, isRespondent).then(() => {\n      setLoader({\n        state: false\n      });\n      setTriggerCaseCall(true);\n      setTriggerCount(true);\n    }, err => {\n      setLoader({\n        state: false\n      });\n    });\n  };\n\n  async function getSuggestionRespondent(currentRound, currentClaimantValue, currentRespondentValue, caseDetailsObj) {\n    var _caseDetailsObj$negot;\n\n    const data = {\n      totalRounds: caseDetailsObj === null || caseDetailsObj === void 0 ? void 0 : (_caseDetailsObj$negot = caseDetailsObj.negotiationRoundLimit) === null || _caseDetailsObj$negot === void 0 ? void 0 : _caseDetailsObj$negot.toString(),\n      currentRound: currentRound === null || currentRound === void 0 ? void 0 : currentRound.toString(),\n      currentClaimantValue: (currentClaimantValue === null || currentClaimantValue === void 0 ? void 0 : currentClaimantValue.toString()) || \"0\",\n      currentRespondentValue: (currentRespondentValue === null || currentRespondentValue === void 0 ? void 0 : currentRespondentValue.toString()) || \"0\",\n      prevClaimantValue: \"0\"\n    };\n    return await fetch(`${process.env.REACT_APP_BASE_SUGGESTION_API}/respondent`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(data)\n    }).then(async response => {\n      var _data$respondentSugge, _data$respondentSugge2;\n\n      const data = await response.json();\n      return (data === null || data === void 0 ? void 0 : (_data$respondentSugge = data.respondentSuggestion) === null || _data$respondentSugge === void 0 ? void 0 : _data$respondentSugge.nextRespondentValue) > 0 ? data === null || data === void 0 ? void 0 : (_data$respondentSugge2 = data.respondentSuggestion) === null || _data$respondentSugge2 === void 0 ? void 0 : _data$respondentSugge2.nextRespondentValue : 0;\n    }).catch(err => {\n      enqueueSnackbar(\"Failed to get the suggestion value\", {\n        variant: \"error\"\n      });\n      return null;\n    });\n  }\n\n  async function getSuggestionClaimant(currentRound, currentClaimantValue, currentRespondentValue, caseDetails) {\n    const data = {\n      totalRounds: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.negotiationRoundLimit.toString(),\n      currentRound: currentRound === null || currentRound === void 0 ? void 0 : currentRound.toString(),\n      currentClaimantValue: currentClaimantValue === null || currentClaimantValue === void 0 ? void 0 : currentClaimantValue.toString(),\n      currentRespondentValue: currentRespondentValue === null || currentRespondentValue === void 0 ? void 0 : currentRespondentValue.toString(),\n      prevRespondentValue: \"0\"\n    };\n    return await fetch(`${process.env.REACT_APP_BASE_SUGGESTION_API}/claimant`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(data)\n    }).then(async response => {\n      var _data$claimantSuggest, _data$claimantSuggest2;\n\n      const data = await response.json();\n      return (data === null || data === void 0 ? void 0 : (_data$claimantSuggest = data.claimantSuggestion) === null || _data$claimantSuggest === void 0 ? void 0 : _data$claimantSuggest.nextClaimantValue) > 0 ? data === null || data === void 0 ? void 0 : (_data$claimantSuggest2 = data.claimantSuggestion) === null || _data$claimantSuggest2 === void 0 ? void 0 : _data$claimantSuggest2.nextClaimantValue : 0;\n    }).catch(err => {\n      enqueueSnackbar(\"Failed to get the suggestion value\", {\n        variant: \"error\"\n      });\n      return null;\n    });\n  }\n  /**\n   * @description Function execute when move to next round is clicked\n   */\n\n\n  const triggerMoveTonextRound = async (caseState, negotiationRounds, caseDetails) => {\n    setLoader({\n      state: true,\n      message: \"Loading...\"\n    });\n    const copyCurrentState = { ...caseState\n    };\n    const copytNegotiationRound = [...negotiationRounds];\n    copyCurrentState.enableSelection = true;\n    const buttonTodisplay = copyCurrentState === null || copyCurrentState === void 0 ? void 0 : copyCurrentState.cta.filter(el => el.type === \"SUBMIT_OFFER\" || el.type === \"QUIT\");\n    let index = Object.keys(copytNegotiationRound).length;\n    copytNegotiationRound[index] = {};\n    copytNegotiationRound[index].claimantClaims = JSON.parse(JSON.stringify(copytNegotiationRound[index - 1].respondentClaims));\n    copytNegotiationRound[index].negotiationRound = index + 1;\n    await Promise.all(copytNegotiationRound[index].claimantClaims.map(async (el, idx) => {\n      var _el$offer5, _copytNegotiationRoun14, _copytNegotiationRoun15;\n\n      if (el.acceptedOffer) {\n        el.offer = el.acceptedOffer;\n      } else if ((el === null || el === void 0 ? void 0 : (_el$offer5 = el.offer) === null || _el$offer5 === void 0 ? void 0 : _el$offer5.status) === \"offered\") {\n        var _copytNegotiationRoun10, _copytNegotiationRoun11, _copytNegotiationRoun12, _copytNegotiationRoun13;\n\n        const value = await getSuggestionClaimant(copytNegotiationRound[index].negotiationRound, (_copytNegotiationRoun10 = copytNegotiationRound[index - 1].claimantClaims[idx]) === null || _copytNegotiationRoun10 === void 0 ? void 0 : (_copytNegotiationRoun11 = _copytNegotiationRoun10.offer) === null || _copytNegotiationRoun11 === void 0 ? void 0 : _copytNegotiationRoun11.claimValue, (_copytNegotiationRoun12 = copytNegotiationRound[index - 1].respondentClaims[idx]) === null || _copytNegotiationRoun12 === void 0 ? void 0 : (_copytNegotiationRoun13 = _copytNegotiationRoun12.offer) === null || _copytNegotiationRoun13 === void 0 ? void 0 : _copytNegotiationRoun13.claimValue, caseDetails);\n        el.offer.claimValue = \"\";\n        el.offer.suggestedClaimValue = value;\n      }\n\n      el.offer.offerorId = caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.claimantPartyId;\n      el.offer.reason = \"\";\n      el.offer.statusAlais = \"makeOffer\";\n      el.previousOffer = (_copytNegotiationRoun14 = copytNegotiationRound[index - 1].respondentClaims[idx]) === null || _copytNegotiationRoun14 === void 0 ? void 0 : (_copytNegotiationRoun15 = _copytNegotiationRoun14.offer) === null || _copytNegotiationRoun15 === void 0 ? void 0 : _copytNegotiationRoun15.claimValue;\n    }));\n    setButtonToDisplay(buttonTodisplay);\n    setNegotiationRounds(copytNegotiationRound);\n    setCurrentState(copyCurrentState);\n    setLoader({\n      state: false\n    });\n  };\n  /**\n   * @description Function execute when negotiation button is clicked\n   */\n\n\n  const triggerNegotiateAction = (caseState = currentState, rounds, caseDetailsObj = {}) => {\n    var _rounds, _rounds$respondentCla;\n\n    const isRespondentAns = (_rounds = rounds[rounds.length - 1]) === null || _rounds === void 0 ? void 0 : (_rounds$respondentCla = _rounds.respondentClaims) === null || _rounds$respondentCla === void 0 ? void 0 : _rounds$respondentCla.some(el => {\n      var _el$offer6, _el$offer7;\n\n      return (el === null || el === void 0 ? void 0 : (_el$offer6 = el.offer) === null || _el$offer6 === void 0 ? void 0 : _el$offer6.status) === \"offered\" && (el === null || el === void 0 ? void 0 : (_el$offer7 = el.offer) === null || _el$offer7 === void 0 ? void 0 : _el$offer7.offerorId) === (caseDetailsObj === null || caseDetailsObj === void 0 ? void 0 : caseDetailsObj.respondentPartyId);\n    });\n\n    if (!isRespondentAns) {\n      const copyCurrentState = { ...caseState\n      };\n      copyCurrentState.enableSelection = true;\n      setCurrentState(copyCurrentState);\n      triggerMakeOffer(rounds, caseDetailsObj);\n    }\n  };\n  /**\n   * @description Function to check the given offer is valid or not\n   */\n\n\n  const checkZeroVal = () => {\n    var _formikRef$current;\n\n    let isValid = true;\n    const {\n      values\n    } = formikRef === null || formikRef === void 0 ? void 0 : formikRef.current[(formikRef === null || formikRef === void 0 ? void 0 : (_formikRef$current = formikRef.current) === null || _formikRef$current === void 0 ? void 0 : _formikRef$current.length) - 1];\n\n    for (let i = 0; i < (values === null || values === void 0 ? void 0 : (_values$items = values.items) === null || _values$items === void 0 ? void 0 : _values$items.length); i++) {\n      var _values$items, _values$items$i, _values$items$i$offer;\n\n      if (_.isEmpty(values === null || values === void 0 ? void 0 : values.items[i].acceptedOffer) && (values === null || values === void 0 ? void 0 : (_values$items$i = values.items[i]) === null || _values$items$i === void 0 ? void 0 : (_values$items$i$offer = _values$items$i.offer) === null || _values$items$i$offer === void 0 ? void 0 : _values$items$i$offer.status) !== \"accepted\") {\n        var _values$items$i2, _values$items$i2$offe, _values$items$i3, _values$items$i3$offe, _values$items$i4, _values$items$i4$offe;\n\n        if (!(values === null || values === void 0 ? void 0 : (_values$items$i2 = values.items[i]) === null || _values$items$i2 === void 0 ? void 0 : (_values$items$i2$offe = _values$items$i2.offer) === null || _values$items$i2$offe === void 0 ? void 0 : _values$items$i2$offe.claimValue) || (values === null || values === void 0 ? void 0 : (_values$items$i3 = values.items[i]) === null || _values$items$i3 === void 0 ? void 0 : (_values$items$i3$offe = _values$items$i3.offer) === null || _values$items$i3$offe === void 0 ? void 0 : _values$items$i3$offe.claimValue) && Number(values === null || values === void 0 ? void 0 : (_values$items$i4 = values.items[i]) === null || _values$items$i4 === void 0 ? void 0 : (_values$items$i4$offe = _values$items$i4.offer) === null || _values$items$i4$offe === void 0 ? void 0 : _values$items$i4$offe.claimValue) < 0) {\n          isValid = false;\n        }\n      }\n    }\n\n    return isValid;\n  };\n\n  const checkValid = () => {\n    var _formikRef$current2;\n\n    let isValid = true;\n    let messageObj = {\n      greaterOriginalClaim: false,\n      claimantlesserClaimValue: false,\n      claimantgreaterClaimValue: false,\n      respondentlesserClaimValue: false,\n      respondentgreaterClaimValue: false\n    };\n    const roundLength = negotiationRounds === null || negotiationRounds === void 0 ? void 0 : negotiationRounds.length;\n    const previousRound = roundLength > 1 ? isRespondent ? negotiationRounds[roundLength - 2].respondentClaims : negotiationRounds[roundLength - 2].claimantClaims : {};\n    const {\n      values\n    } = formikRef === null || formikRef === void 0 ? void 0 : formikRef.current[(formikRef === null || formikRef === void 0 ? void 0 : (_formikRef$current2 = formikRef.current) === null || _formikRef$current2 === void 0 ? void 0 : _formikRef$current2.length) - 1];\n\n    for (let i = 0; i < (values === null || values === void 0 ? void 0 : (_values$items2 = values.items) === null || _values$items2 === void 0 ? void 0 : _values$items2.length); i++) {\n      var _values$items2, _values$items$i5, _values$items$i5$offe;\n\n      if (_.isEmpty(values === null || values === void 0 ? void 0 : values.items[i].acceptedOffer) && (values === null || values === void 0 ? void 0 : (_values$items$i5 = values.items[i]) === null || _values$items$i5 === void 0 ? void 0 : (_values$items$i5$offe = _values$items$i5.offer) === null || _values$items$i5$offe === void 0 ? void 0 : _values$items$i5$offe.status) !== \"accepted\") {\n        var _values$items$i6, _values$items$i6$offe, _values$items$i7, _values$items$i7$offe, _values$items$i7$offe2, _values$items$i8, _values$items$i8$offe, _caseDetails$caseItem, _values$items$i9, _values$items$i9$offe, _values$items$i10, _values$items$i11, _values$items$i11$off, _previousRound$i, _previousRound$i$offe, _values$items$i12, _values$items$i12$off, _values$items$i13, _values$items$i14, _values$items$i14$off, _previousRound$i2, _previousRound$i2$off;\n\n        console.log(`${i}-->`, isNaN(values === null || values === void 0 ? void 0 : (_values$items$i6 = values.items[i]) === null || _values$items$i6 === void 0 ? void 0 : (_values$items$i6$offe = _values$items$i6.offer) === null || _values$items$i6$offe === void 0 ? void 0 : _values$items$i6$offe.claimValue));\n\n        if (!(values === null || values === void 0 ? void 0 : (_values$items$i7 = values.items[i]) === null || _values$items$i7 === void 0 ? void 0 : (_values$items$i7$offe = _values$items$i7.offer) === null || _values$items$i7$offe === void 0 ? void 0 : (_values$items$i7$offe2 = _values$items$i7$offe.claimValue) === null || _values$items$i7$offe2 === void 0 ? void 0 : _values$items$i7$offe2.length)) {\n          isValid = false;\n          messageObj.nullValue = true;\n        } else if (\n        /**Condition for exceeds original Calim Value */\n        Number(values === null || values === void 0 ? void 0 : (_values$items$i8 = values.items[i]) === null || _values$items$i8 === void 0 ? void 0 : (_values$items$i8$offe = _values$items$i8.offer) === null || _values$items$i8$offe === void 0 ? void 0 : _values$items$i8$offe.claimValue) > Number(caseDetails === null || caseDetails === void 0 ? void 0 : (_caseDetails$caseItem = caseDetails.caseItems[i]) === null || _caseDetails$caseItem === void 0 ? void 0 : _caseDetails$caseItem.claimValue)) {\n          isValid = false;\n          messageObj.greaterOriginalClaim = true;\n        } else if (\n        /**Condition for Claimant who cannot enter lesser value than respondent value */\n        !isRespondent && Number(values === null || values === void 0 ? void 0 : (_values$items$i9 = values.items[i]) === null || _values$items$i9 === void 0 ? void 0 : (_values$items$i9$offe = _values$items$i9.offer) === null || _values$items$i9$offe === void 0 ? void 0 : _values$items$i9$offe.claimValue) < Number(values === null || values === void 0 ? void 0 : (_values$items$i10 = values.items[i]) === null || _values$items$i10 === void 0 ? void 0 : _values$items$i10.previousOffer)) {\n          isValid = false;\n          messageObj.claimantlesserClaimValue = true;\n        } else if (\n        /**Condition for claimant who cannot enter grater value than previous Round Claim value */\n        !isRespondent && roundLength > 1 && Number(values === null || values === void 0 ? void 0 : (_values$items$i11 = values.items[i]) === null || _values$items$i11 === void 0 ? void 0 : (_values$items$i11$off = _values$items$i11.offer) === null || _values$items$i11$off === void 0 ? void 0 : _values$items$i11$off.claimValue) > Number((_previousRound$i = previousRound[i]) === null || _previousRound$i === void 0 ? void 0 : (_previousRound$i$offe = _previousRound$i.offer) === null || _previousRound$i$offe === void 0 ? void 0 : _previousRound$i$offe.claimValue)) {\n          isValid = false;\n          messageObj.claimantgreaterClaimValue = true;\n        } else if (\n        /** Consition for respondent who cannot enter greater value than claimant value */\n        isRespondent && Number(values === null || values === void 0 ? void 0 : (_values$items$i12 = values.items[i]) === null || _values$items$i12 === void 0 ? void 0 : (_values$items$i12$off = _values$items$i12.offer) === null || _values$items$i12$off === void 0 ? void 0 : _values$items$i12$off.claimValue) > Number(values === null || values === void 0 ? void 0 : (_values$items$i13 = values.items[i]) === null || _values$items$i13 === void 0 ? void 0 : _values$items$i13.previousOffer)) {\n          isValid = false;\n          messageObj.respondentgreaterClaimValue = true;\n        } else if (\n        /** Condition for respondent who cannot enter lesser value than previous repondent value */\n        isRespondent && roundLength > 1 && Number(values === null || values === void 0 ? void 0 : (_values$items$i14 = values.items[i]) === null || _values$items$i14 === void 0 ? void 0 : (_values$items$i14$off = _values$items$i14.offer) === null || _values$items$i14$off === void 0 ? void 0 : _values$items$i14$off.claimValue) < Number((_previousRound$i2 = previousRound[i]) === null || _previousRound$i2 === void 0 ? void 0 : (_previousRound$i2$off = _previousRound$i2.offer) === null || _previousRound$i2$off === void 0 ? void 0 : _previousRound$i2$off.claimValue)) {\n          isValid = false;\n          messageObj.respondentlesserClaimValue = true;\n        }\n      }\n    }\n\n    showErrorMsg(messageObj);\n    return isValid;\n  };\n\n  function showErrorMsg({\n    greaterOriginalClaim,\n    claimantlesserClaimValue,\n    claimantgreaterClaimValue,\n    respondentlesserClaimValue,\n    respondentgreaterClaimValue,\n    nullValue\n  }) {\n    if (nullValue) {\n      enqueueSnackbar(\"Response cannot be null\", {\n        variant: \"error\"\n      });\n    } else if (greaterOriginalClaim) {\n      enqueueSnackbar(\"Offer cannot be greater than the original claim value\", {\n        variant: \"error\"\n      });\n    } else if (claimantlesserClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be less than counter offer\", {\n        variant: \"error\"\n      });\n    } else if (claimantgreaterClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be higher than your previous offer\", {\n        variant: \"error\"\n      });\n    } else if (respondentlesserClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be less than your previous offer\", {\n        variant: \"error\"\n      });\n    } else if (respondentgreaterClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be higher than the counter offer\", {\n        variant: \"error\"\n      });\n    }\n  }\n\n  const callSubmitOffer = () => {\n    setLoader({\n      state: true,\n      message: \"Updating case details...\"\n    });\n    callSendOffer(id, formikRef).then(async () => {\n      setLoader({\n        state: false\n      });\n      setTriggerCaseCall(true);\n      enqueueSnackbar(\"Response Sent Successfully\", {\n        variant: \"success\"\n      });\n    }, err => {\n      setLoader({\n        state: false\n      });\n      console.log(err);\n      enqueueSnackbar(getErrorMessage(err), {\n        variant: \"error\"\n      });\n    }).finally(() => {\n      hideAlert();\n    });\n  };\n\n  const sameOfferPresent = () => {\n    var _formikRef$current3;\n\n    let isSame = false;\n    const {\n      values\n    } = formikRef === null || formikRef === void 0 ? void 0 : formikRef.current[(formikRef === null || formikRef === void 0 ? void 0 : (_formikRef$current3 = formikRef.current) === null || _formikRef$current3 === void 0 ? void 0 : _formikRef$current3.length) - 1];\n\n    for (let i = 0; i < (values === null || values === void 0 ? void 0 : (_values$items3 = values.items) === null || _values$items3 === void 0 ? void 0 : _values$items3.length); i++) {\n      var _values$items3, _values$items$i15, _values$items$i15$off;\n\n      if (_.isEmpty(values === null || values === void 0 ? void 0 : values.items[i].acceptedOffer) && (values === null || values === void 0 ? void 0 : (_values$items$i15 = values.items[i]) === null || _values$items$i15 === void 0 ? void 0 : (_values$items$i15$off = _values$items$i15.offer) === null || _values$items$i15$off === void 0 ? void 0 : _values$items$i15$off.status) !== \"accepted\") {\n        var _values$items$i16, _values$items$i16$off, _values$items$i17;\n\n        if (Number(values === null || values === void 0 ? void 0 : (_values$items$i16 = values.items[i]) === null || _values$items$i16 === void 0 ? void 0 : (_values$items$i16$off = _values$items$i16.offer) === null || _values$items$i16$off === void 0 ? void 0 : _values$items$i16$off.claimValue) === Number(values === null || values === void 0 ? void 0 : (_values$items$i17 = values.items[i]) === null || _values$items$i17 === void 0 ? void 0 : _values$items$i17.previousOffer)) {\n          isSame = true;\n        }\n      }\n    }\n\n    return isSame;\n  };\n  /**\n   * @description Function excute when Submit offer or submit counteroffer is clicked\n   */\n\n\n  const triggerSubmitOffer = () => {\n    if (checkZeroVal()) {\n      if (checkValid()) {\n        if (sameOfferPresent()) {\n          setDialogData({\n            primaryBtnText: \"Proceed\",\n            secondaryBtnText: \"Cancel\",\n            desc: \"You've entered the same claim values for some of your's offers. would you like to accept those offer?\",\n            heading: \"Warning\",\n            buttonType: \"SUBMIT_OFFER\",\n            descriptionTextStyle: {\n              textAlign: \"left\"\n            }\n          });\n          setOpen(true);\n        } else {\n          showAlert({\n            heading: \"Please confirm!\",\n            desc: `Would you like us to go ahead and submit your offer? Offer once submitted cannot be changed.`,\n            //desc: `Are you really sure you want to submit your offer? Offer once submitted cannot be changed.`,\n            primaryBtnText: \"Yes\",\n            secondaryBtnText: \"No\",\n            clickSecondarybtn: () => hideAlert(),\n            clickPrimaryBtn: () => callSubmitOffer(),\n            isOpen: true,\n            descriptionTextStyle: {\n              textAlign: \"left\"\n            },\n            onDialogClose: () => hideAlert()\n          });\n        }\n      }\n    } else {\n      enqueueSnackbar(\"Claim value cannot be empty\", {\n        variant: \"error\"\n      });\n    }\n  };\n  /**\n   * @description Function to trigger the Quit case Details\n   */\n\n\n  const triggerQuitCase = () => {\n    setLoader({\n      state: true,\n      message: \"Updating case details...\"\n    });\n    callQuitCase(id).then(_ => {\n      setLoader({\n        state: false\n      });\n      setTriggerCaseCall(true);\n    }, err => {\n      setLoader({\n        state: false\n      });\n      console.log(err);\n    });\n  };\n\n  const showPaymentAlert = async type => {\n    try {\n      var _await$CaseService$ge;\n\n      setLoader({\n        state: true,\n        message: \"loading...\"\n      });\n      const negotiationSuccessFee = ((_await$CaseService$ge = await CaseService.getCase(id, \"?estimateFeeKind=successFee\")) === null || _await$CaseService$ge === void 0 ? void 0 : _await$CaseService$ge.fee) || {};\n      setDialogData({\n        primaryBtnText: \"Go to Case Cart\",\n        secondaryBtnText: \"I'll Pay Later\",\n        desc: /*#__PURE__*/React.createElement(React.Fragment, null, \"To download your agreement for\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n          style: {\n            fontFamily: `${theme.fonts.primaryFontExtraBold}`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 13\n          }\n        }, \"Case ID \", id), \" \", \"please go to case cart and complete the payment towards\", \" \", caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind, \" Agreement fee:\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n          style: {\n            fontFamily: `${theme.fonts.primaryFontExtraBold}`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 13\n          }\n        }, \"INR \", parseFloat(negotiationSuccessFee === null || negotiationSuccessFee === void 0 ? void 0 : negotiationSuccessFee.total).toFixed(2))),\n        heading: \"Case moved to Payment\",\n        buttonType: type\n      });\n      setOpen(true);\n    } catch (err) {\n      enqueueSnackbar(\"Something went wrong\", {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n    }\n  };\n  /**THis case is used to decide what will happend when the button is trigggered */\n\n\n  const onbuttonClick = type => {\n    switch (type) {\n      case \"QUIT\":\n        {\n          setDialogData({\n            primaryBtnText: \"Don't Quit\",\n            secondaryBtnText: \"Yes, Quit\",\n            desc: `Please note once you quit, you cannot continue your ${caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind}. Yes to Quit, No to Don't Quit.`,\n            heading: \"Do you really want to Quit your case?\",\n            buttonType: type,\n            descriptionTextStyle: {\n              textAlign: \"left\"\n            }\n          });\n          setOpen(true);\n          break;\n        }\n\n      case \"MOVE_TO_CART\":\n        {\n          showPaymentAlert(type);\n          break;\n        }\n\n      case \"ACCEPT\":\n        {\n          triggerAcceptToClaim();\n          break;\n        }\n\n      case \"NEGOTIATE\":\n        {\n          if (isRespondent) {\n            triggerNegotiateAction();\n          } else {\n            triggerMoveTonextRound();\n          }\n\n          break;\n        }\n\n      case \"MAKE_OFFER\":\n        {\n          triggerMakeOffer();\n          break;\n        }\n\n      case \"SUBMIT_OFFER\":\n        {\n          triggerSubmitOffer();\n          break;\n        }\n\n      case \"MOVE_TO_AGREEMENT\":\n        {\n          const currentStatus = isRespondent ? RESPONTANT_LIFE_CYCLE.find(el => el.key === CLAIMENT_PAID_NEGOTIATION) : CLAIMANT_LIFE_CYCLE.find(el => el.key === RESPONDENT_PAID_NEGOTIATION);\n          setCurrentState(currentStatus);\n          displayCaseCTA(currentStatus, negotiationRounds, caseDetails);\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  };\n  /**Function to trigger the success model */\n\n\n  const clickPrimaryBtn = type => {\n    setOpen(false);\n\n    switch (type) {\n      case \"MOVE_TO_CART\":\n        {\n          setTriggerCount(true);\n          navigate(\"/dashboard/cart\");\n          break;\n        }\n\n      case \"SUBMIT_OFFER\":\n        {\n          callSubmitOffer();\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  };\n\n  const clickSecondarybtn = type => {\n    setOpen(false);\n\n    switch (type) {\n      case \"QUIT\":\n        {\n          triggerQuitCase();\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 935,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ActionBar, {\n    breadcrumbs: breadcrumbs,\n    onBreadcrumbClick: onBreadcrumbClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PageWrapper, {\n    state: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 940,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LifeCycleContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 11\n    }\n  }, \"Case Lifecycle\"), !_.isEmpty(caseDetails) && /*#__PURE__*/React.createElement(LifeCycle, {\n    items: isRespondent ? RESPONTANT_LIFE_CYCLE : CLAIMANT_LIFE_CYCLE,\n    selectedIndex: currentState === null || currentState === void 0 ? void 0 : currentState.index,\n    isMediation: (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) !== \"negotiation\",\n    resolutionKind: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind,\n    kind: isRespondent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Spacing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 953,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CaseDetails, {\n    isActionsDisabled: (currentState === null || currentState === void 0 ? void 0 : currentState.key) === NEGOTIATION_REACHED || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === NEGOTIATION_QUIT_BY_CLAIMENT || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === NEGOTIATION_QUIT_BY_RESPONDENT || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === NEGOTIATION_QUIT_BY_CASEMANAGER || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === CLAIMENT_PAID_NEGOTIATION || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === RESPONDENT_PAID_NEGOTIATION || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === BOTH_PAID_NEGOTIATION,\n    isViewAction: (currentState === null || currentState === void 0 ? void 0 : currentState.key) === NEGOTIATION_QUIT_BY_CLAIMENT || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === NEGOTIATION_QUIT_BY_RESPONDENT || (currentState === null || currentState === void 0 ? void 0 : currentState.key) === NEGOTIATION_QUIT_BY_CASEMANAGER,\n    setState,\n    id,\n    MTRef,\n    partyList,\n    caseDetails: caseDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 954,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Manager, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 9\n    }\n  }, (caseDetails === null || caseDetails === void 0 ? void 0 : (_caseDetails$caseMana = caseDetails.caseManager) === null || _caseDetails$caseMana === void 0 ? void 0 : _caseDetails$caseMana.name) && /*#__PURE__*/React.createElement(Block, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CaseManager, {\n    handlePopup: handlePopup,\n    caseManager: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.caseManager,\n    hideChat: (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) !== \"negotiation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 15\n    }\n  })), (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) !== \"negotiation\" && (caseDetails === null || caseDetails === void 0 ? void 0 : (_caseDetails$requeste = caseDetails.requestedMediators) === null || _caseDetails$requeste === void 0 ? void 0 : _caseDetails$requeste.length) ? /*#__PURE__*/React.createElement(React.Fragment, null, caseDetails === null || caseDetails === void 0 ? void 0 : (_caseDetails$requeste2 = caseDetails.requestedMediators) === null || _caseDetails$requeste2 === void 0 ? void 0 : (_caseDetails$requeste3 = _caseDetails$requeste2.filter(el => el === null || el === void 0 ? void 0 : el.id)) === null || _caseDetails$requeste3 === void 0 ? void 0 : _caseDetails$requeste3.map((mediator, index) => /*#__PURE__*/React.createElement(Block, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 995,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CaseManager, {\n    title: (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) === \"mediation\" ? \"Mediator\" : \"Arbitrator\",\n    hideChat: true,\n    caseManager: mediator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 996,\n      columnNumber: 21\n    }\n  })))) : null, (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) && (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind) !== \"negotiation\" && /*#__PURE__*/React.createElement(Block, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(BigBlueButton, {\n    id: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.id,\n    status: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.status,\n    type: `Join ${_.capitalize(caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind)} Session`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1012,\n      columnNumber: 17\n    }\n  }))), negotiationTypeState({\n    ownerId: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.claimantPartyId,\n    respondentId: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.respondentPartyId,\n    currentState,\n    negotiationRounds,\n    isRespondent,\n    formikRef,\n    caseDetails,\n    showCta,\n    comments,\n    setComments,\n    partyList\n  }), /*#__PURE__*/React.createElement(Spacing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 9\n    }\n  }, showCta && /*#__PURE__*/React.createElement(CaseCTA, {\n    cta: buttonToDisplay,\n    disableButton: false,\n    onbuttonClick: type => onbuttonClick(type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1046,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AlertDialog, {\n    isOpen: open,\n    clickSecondarybtn: () => clickSecondarybtn(dialogData.buttonType, false),\n    primaryBtnText: dialogData.primaryBtnText,\n    secondaryBtnText: dialogData.secondaryBtnText,\n    desc: dialogData.desc,\n    heading: dialogData.heading,\n    clickPrimaryBtn: () => clickPrimaryBtn(dialogData.buttonType, true),\n    descriptionTextStyle: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1047,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"freshchat-js-sdk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(DrawerTableCaseDocument, {\n    state,\n    setState,\n    id,\n    MTRef,\n    type: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.resolutionKind,\n    agentRole: caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.agentRole,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/pages/NegotiationPages/AwaitingRespondantPage/index.js"],"names":["React","Fragment","useState","useEffect","useRef","ActionBar","PageWrapper","StyledLabel","LifeCycleContainer","Manager","Mediator","Spacing","Block","LifeCycle","CaseDetails","CaseManager","BigBlueButton","DrawerTableCaseDocument","_","navigate","CaseCTA","AlertDialog","CaseService","RESPONTANT_LIFE_CYCLE","CLAIMANT_LIFE_CYCLE","AWAITING_RESPONDANT","CLAIMENT_STR","CLAIMENT_PAID_NEGOTIATION","RESPONDENT_PAID_NEGOTIATION","RESPONDANT_ONBOARDED","NEGOTIATION_ONGOING","NEGOTIATION_REACHED","NEGOTIATION_QUIT_BY_CLAIMENT","NEGOTIATION_QUIT_BY_RESPONDENT","BOTH_PAID_NEGOTIATION","NEGOTIATION_QUIT_BY_CASEMANAGER","getErrorMessage","useSnackbar","useLoader","NegotiationState","useFreshChat","useUser","callAcceptCliam","callSendOffer","callQuitCase","useCartCount","useAlert","theme","MediationState","queryString","useNotification","negotiationTypeState","props","caseDetails","resolutionKind","AwaitingRespondantPage","id","initialState","breadcrumbs","setBreadcrumbs","state","setState","open","setOpen","dialogData","setDialogData","comments","setComments","setCaseDetails","negotiationRounds","setNegotiationRounds","currentState","setCurrentState","isRespondent","setIsRespondent","triggerCaseCall","setTriggerCaseCall","buttonToDisplay","setButtonToDisplay","showCta","setShowCta","partyList","setPartyList","enqueueSnackbar","setLoader","userObject","setChatDetail","handlePopup","setIsInitialised","setTag","formikRef","setTriggerCount","MTRef","hideAlert","showAlert","triggerNotify","setTriggerNotify","getCaseById","message","res","getCase","negotiation_res","negotiations","params","page","perPage","stringParams","isEmpty","stringify","mediation_res","mediations","data","partyParam","party_list_res","getPartyListByCaseId","case_response","respondentPartyId","status","respondentStatus","subscriptionKind","agentRole","setInitialValues","JSON","parse","error","variant","getChatDetails","chatDetails","chat","caesLifeCycle","length","isRepondentReply","find","el","index","some","key","caseState","checkSetShowBtn","displayCaseCTA","max","map","negotiationRoundLimit","triggerNegotiateAction","maxRound","round","negotiationRound","noActionRequiredCurrently","respondentClaims","every","value","offer","triggerMoveTonextRound","respondentId","negotiation","cta","filter","type","displayBtn","Object","keys","isRespondentAns","offerorId","onBreadcrumbClick","selected","snakeCase","triggerMakeOffer","rounds","copytNegotiationRound","claimantClaims","Promise","all","idex","acceptedOffer","getSuggestionRespondent","claimValue","suggestedClaimValue","statusAlais","reason","previousOffer","triggerAcceptToClaim","then","err","currentRound","currentClaimantValue","currentRespondentValue","caseDetailsObj","totalRounds","toString","prevClaimantValue","fetch","process","env","REACT_APP_BASE_SUGGESTION_API","headers","method","body","response","json","respondentSuggestion","nextRespondentValue","catch","getSuggestionClaimant","prevRespondentValue","claimantSuggestion","nextClaimantValue","copyCurrentState","enableSelection","buttonTodisplay","idx","claimantPartyId","checkZeroVal","isValid","values","current","i","items","Number","checkValid","messageObj","greaterOriginalClaim","claimantlesserClaimValue","claimantgreaterClaimValue","respondentlesserClaimValue","respondentgreaterClaimValue","roundLength","previousRound","console","log","isNaN","nullValue","caseItems","showErrorMsg","callSubmitOffer","finally","sameOfferPresent","isSame","triggerSubmitOffer","primaryBtnText","secondaryBtnText","desc","heading","buttonType","descriptionTextStyle","textAlign","clickSecondarybtn","clickPrimaryBtn","isOpen","onDialogClose","triggerQuitCase","showPaymentAlert","negotiationSuccessFee","fee","fontFamily","fonts","primaryFontExtraBold","parseFloat","total","toFixed","onbuttonClick","currentStatus","caseManager","name","requestedMediators","mediator","capitalize","ownerId"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport ActionBar from \"../../../common/ActionBar\";\nimport {\n  PageWrapper,\n  StyledLabel,\n  LifeCycleContainer,\n  Manager,\n  Mediator,\n  Spacing,\n  Block,\n} from \"../styles\";\nimport LifeCycle from \"../../../common/LifeCycle\";\nimport CaseDetails from \"../../../common/CaseDetails\";\nimport CaseManager from \"../common/CaseManager\";\nimport BigBlueButton from \"../common/BigBlueButton\";\nimport DrawerTableCaseDocument from \"../../../internal/DrawerTable\";\nimport _ from \"lodash\";\nimport { navigate } from \"@reach/router\";\nimport CaseCTA from \"../common/CaseCTA\";\nimport AlertDialog from \"../../../common/Alert\";\nimport CaseService from \"../../../../services/CaseService\";\nimport {\n  RESPONTANT_LIFE_CYCLE,\n  CLAIMANT_LIFE_CYCLE,\n  AWAITING_RESPONDANT,\n  CLAIMENT_STR,\n  CLAIMENT_PAID_NEGOTIATION,\n  RESPONDENT_PAID_NEGOTIATION,\n  RESPONDANT_ONBOARDED,\n  NEGOTIATION_ONGOING,\n  NEGOTIATION_REACHED,\n  NEGOTIATION_QUIT_BY_CLAIMENT,\n  NEGOTIATION_QUIT_BY_RESPONDENT,\n  BOTH_PAID_NEGOTIATION,\n  NEGOTIATION_QUIT_BY_CASEMANAGER,\n} from \"../../../../helpers/constants\";\nimport { getErrorMessage } from \"../../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport useLoader from \"../../../../hooks/useLoader\";\nimport NegotiationState from \"./NegotiationState\";\nimport useFreshChat from \"../../../../hooks/useFreshChat\";\nimport useUser from \"../../../../hooks/useUser\";\nimport {\n  callAcceptCliam,\n  callSendOffer,\n  callQuitCase,\n} from \"../negotiation-helper\";\nimport useCartCount from \"../../../../hooks/useCartCount\";\nimport useAlert from \"../../../../hooks/useAlert\";\nimport theme from \"../../../../assets/theme\";\nimport MediationState from \"./MediationState\";\nimport queryString from \"query-string\";\nimport useNotification from \"../../../../hooks/useNotification\";\n\nfunction negotiationTypeState({ ...props }) {\n  switch (props?.caseDetails?.resolutionKind) {\n    case \"mediation\":\n      return <MediationState {...props} />;\n    case \"arbitration\":\n      return <MediationState {...props} />;\n    case \"negotiation\":\n      return <NegotiationState {...props} />;\n    default:\n      return null;\n  }\n}\n\nexport default function AwaitingRespondantPage({ id }) {\n  const initialState = [\"My Cases\"];\n  const [breadcrumbs, setBreadcrumbs] = useState(initialState); // This state is to display the bread crum\n  const [state, setState] = useState(); // This state is used for caseDocument\n  const [open, setOpen] = useState(false); //This state is for open and Close the model\n  const [dialogData, setDialogData] = useState({}); // This state is used to set the dialog content\n  const [comments, setComments] = useState([]); // This is list of comments\n  const [caseDetails, setCaseDetails] = useState({}); // This state holds the case detaisl\n  const [negotiationRounds, setNegotiationRounds] = useState({}); // THis state holds the NegotiationRounds\n  const [currentState, setCurrentState] = useState({}); // This state Holds the current state\n  const [isRespondent, setIsRespondent] = useState(false); // This state tells current logged in user is respondent or not\n  const [triggerCaseCall, setTriggerCaseCall] = useState(true); // This State to trigger the get details call when any update happend in the case\n  const [buttonToDisplay, setButtonToDisplay] = useState([]); //This state used to hold the button list based on case life cycle and user Action\n  const [showCta, setShowCta] = useState(false); // This state used to show and hide the button based on the user action\n  const [partyList, setPartyList] = useState([]);\n\n  const { enqueueSnackbar } = useSnackbar(); // This Hook is used to trigger the snackbar message\n  const { setLoader } = useLoader(); // This Hook is to display the loader\n  const { userObject } = useUser(); // This Hook holds the Current User Object\n  const { setChatDetail, handlePopup, setIsInitialised, setTag } = useFreshChat(\n    {\n      userObject,\n    }\n  );\n  const formikRef = useRef([]); // This reference holds the formik values\n  const { setTriggerCount } = useCartCount(); // This context to trigger the cart count when negotiation moves to payment.\n  const MTRef = useRef();\n  const { hideAlert, showAlert } = useAlert();\n  const { triggerNotify, setTriggerNotify } = useNotification(); // hooks to refresh the page\n\n  useEffect(() => {\n    if (triggerNotify) {\n      setTriggerCaseCall(true);\n      setTriggerNotify(false);\n    }\n  }, [setTriggerNotify, triggerNotify]);\n\n  /**This useEffect is Used to get the case information */\n  useEffect(() => {\n    /** Function to get the CaseDetails */\n    async function getCaseById(id) {\n      setLoader({ state: true, message: \"Fetching case details...\" });\n      try {\n        const res = await CaseService.getCase(id);\n        const negotiation_res = await CaseService.negotiations(id);\n        if (res && negotiation_res) {\n          let params = {\n            page: 1,\n            perPage: 1000,\n          };\n          if (res?.resolutionKind !== \"negotiation\") {\n            let stringParams = \"\";\n            if (!_.isEmpty(params)) {\n              stringParams = `?${queryString.stringify(params)}`;\n            }\n            const mediation_res = await CaseService.mediations(\n              id,\n              stringParams\n            ); // This is for getting the party\n            if (mediation_res) {\n              setComments(mediation_res?.data);\n            }\n          }\n\n          const partyParam = `?${queryString.stringify(\n            params\n          )}&sort=partyRole&sortDirection=asc`;\n          const party_list_res = await CaseService.getPartyListByCaseId(\n            id,\n            partyParam\n          ); // This is for getting the party details based on the case\n          if (party_list_res?.data) {\n            setPartyList(party_list_res?.data);\n          }\n\n          let case_response = { ...res };\n          if (!case_response?.respondentPartyId) {\n            case_response.status = AWAITING_RESPONDANT;\n          } else if (\n            case_response?.respondentStatus === \"pending\" ||\n            case_response?.respondentStatus === \"declined\"\n          ) {\n            case_response.status = RESPONDANT_ONBOARDED;\n          } else if (\n            case_response?.status === NEGOTIATION_REACHED &&\n            case_response?.subscriptionKind === \"adhoc\"\n          ) {\n            case_response.status = BOTH_PAID_NEGOTIATION;\n          }\n          setNegotiationRounds(negotiation_res);\n          setCaseDetails(case_response);\n          setBreadcrumbs([\n            \"My Cases\",\n            // _.startCase(case_response?.resolutionKind),\n            // case_response?.title,\n          ]);\n          setIsRespondent(case_response.agentRole !== CLAIMENT_STR);\n          if (case_response.agentRole === CLAIMENT_STR) {\n            setInitialValues(\n              JSON.parse(JSON.stringify(CLAIMANT_LIFE_CYCLE)),\n              case_response,\n              false,\n              negotiation_res\n            );\n          } else {\n            setInitialValues(\n              JSON.parse(JSON.stringify(RESPONTANT_LIFE_CYCLE)),\n              case_response,\n              true,\n              negotiation_res\n            );\n          }\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\",\n        });\n        navigate(\"/dashboard/cases\");\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n\n    /** Function to get the chatDetails */\n    async function getChatDetails(id) {\n      try {\n        const chatDetails = await CaseService.getChatDetails(id);\n        if (!_.isEmpty(chatDetails?.chat)) {\n          // setIsInitialised(true);\n          setChatDetail(chatDetails?.chat);\n          setTag([\"ind_neg_case\"]);\n        }\n      } catch (error) {\n        // setIsInitialised(true);\n        setTag([\"ind_neg_case\"]);\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\",\n        });\n      }\n    }\n\n    if (id && triggerCaseCall) {\n      getCaseById(id);\n      setTriggerCaseCall(false);\n      getChatDetails(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [triggerCaseCall]);\n\n  /** This function is used to set the inital values for the component**/\n  const setInitialValues = (\n    caesLifeCycle,\n    caseDetails,\n    isRespondent,\n    negotiationRounds\n  ) => {\n    if (caesLifeCycle.length && !_.isEmpty(caseDetails)) {\n      if (\n        negotiationRounds?.length > 0 &&\n        !isRespondent &&\n        caseDetails.status === NEGOTIATION_ONGOING &&\n        !isRepondentReply(negotiationRounds) &&\n        caseDetails?.resolutionKind === \"negotiation\"\n      ) {\n        setCurrentState(caesLifeCycle.find((el) => el.index === 2));\n      } else if (caesLifeCycle.some((el) => el.key === caseDetails.status)) {\n        const caseState = caesLifeCycle.find(\n          (el) => el.key === caseDetails.status\n        );\n        setCurrentState(caseState);\n        checkSetShowBtn(\n          negotiationRounds,\n          caseState,\n          isRespondent,\n          caseDetails\n        );\n        displayCaseCTA(caseState, negotiationRounds, caseDetails);\n        if (\n          caseDetails?.status === \"negotiationOngoing\" &&\n          _.max(_.map(negotiationRounds, \"negotiationRound\")) !==\n            caseDetails?.negotiationRoundLimit\n        ) {\n          if (isRespondent)\n            triggerNegotiateAction(caseState, negotiationRounds, caseDetails);\n          else {\n            let maxRound = negotiationRounds[0];\n            for (const round of negotiationRounds) {\n              if (round?.negotiationRound > maxRound?.negotiationRound) {\n                maxRound = { ...round };\n              }\n            }\n            const noActionRequiredCurrently = maxRound?.respondentClaims?.every(\n              (value) => _.isEmpty(value?.offer)\n            );\n            if (!noActionRequiredCurrently) {\n              triggerMoveTonextRound(caseState, negotiationRounds, caseDetails);\n            }\n          }\n        }\n      } else if (!isRespondent) {\n        if (caseDetails.respondentId) {\n          setCurrentState(caesLifeCycle.find((el) => el.index === 2));\n        } else {\n          setCurrentState(caesLifeCycle.find((el) => el.index === 1));\n        }\n      }\n    }\n  };\n\n  /**This function is to check whether the respondent has ans back or nor for moving the status to negotiaion ongoing */\n  const isRepondentReply = (negotiation) => {\n    return negotiation[0]?.respondentClaims?.some(\n      (el) => el?.offer?.status === \"offered\"\n    );\n  };\n\n  /** This function is used to display the CTA based on the status */\n  const displayCaseCTA = (currentState, negotiationRounds, caseDetails) => {\n    if (!_.isEmpty(currentState)) {\n      if (caseDetails?.resolutionKind !== \"negotiation\") {\n        if (caseDetails.status === NEGOTIATION_ONGOING) {\n          setButtonToDisplay(\n            currentState?.cta?.filter((el) => el.type === \"QUIT\")\n          );\n        } else {\n          setButtonToDisplay(currentState?.cta?.filter((el) => el.displayBtn));\n        }\n      } else {\n        if (\n          caseDetails.status === NEGOTIATION_ONGOING &&\n          negotiationRounds?.length === caseDetails?.negotiationRoundLimit\n        ) {\n          setButtonToDisplay(\n            currentState?.cta?.filter(\n              (el) => el.type === \"QUIT\" || el.type === \"ACCEPT\"\n            )\n          );\n        } else {\n          setButtonToDisplay(currentState?.cta?.filter((el) => el.displayBtn));\n        }\n      }\n    }\n  };\n\n  /** THis function is used to check if the round is reached miximum limit or not */\n  const checkSetShowBtn = (\n    negotiationRounds,\n    currentState,\n    isRespondent,\n    caseDetails\n  ) => {\n    if (!_.isEmpty(negotiationRounds)) {\n      const index = Object.keys(negotiationRounds)[\n        Object.keys(negotiationRounds).length - 1\n      ];\n      const isRespondentAns = negotiationRounds[index]?.respondentClaims?.some(\n        (el) =>\n          el?.offer?.status === \"offered\" &&\n          el?.offer?.offerorId === caseDetails?.respondentPartyId\n      );\n      setShowCta(\n        (!isRespondentAns && isRespondent) ||\n          (!isRespondent && isRespondentAns) ||\n          currentState?.index > 3 ||\n          caseDetails?.resolutionKind !== \"negotiation\"\n      );\n    }\n  };\n\n  /**THis function is used for Navigating the case details page */\n  const onBreadcrumbClick = (selected) => {\n    switch (_.snakeCase(selected)) {\n      case _.snakeCase(caseDetails?.resolutionKind):\n        navigate(`/dashboard/cases?caseType=${caseDetails?.resolutionKind}`);\n        break;\n      case \"my_cases\":\n        navigate(`/dashboard/cases?caseType=${caseDetails?.resolutionKind}`);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * @description Function Execute when Make Offer Button is clickec\n   */\n  const triggerMakeOffer = async (\n    rounds = negotiationRounds,\n    caseDetails = {}\n  ) => {\n    setLoader({ state: true, message: \"Loading...\" });\n    const copytNegotiationRound = [...rounds];\n    let index = Object.keys(copytNegotiationRound)[\n      Object.keys(copytNegotiationRound).length - 1\n    ];\n    copytNegotiationRound[index].respondentClaims = JSON.parse(\n      JSON.stringify(copytNegotiationRound[index].claimantClaims)\n    );\n    await Promise.all(\n      copytNegotiationRound[index].respondentClaims.map(\n        async (el = {}, idex) => {\n          if (!el?.offer) {\n            el.offer = {};\n          }\n          if (el.acceptedOffer) {\n            el.offer = el.acceptedOffer;\n          } else if (el?.offer?.status === \"offered\") {\n            const data = await getSuggestionRespondent(\n              copytNegotiationRound[index]?.negotiationRound,\n              copytNegotiationRound[index]?.claimantClaims[idex]?.offer\n                ?.claimValue,\n              copytNegotiationRound[index - 1]?.respondentClaims[idex]?.offer\n                ?.claimValue,\n              caseDetails\n            );\n            el.offer.claimValue = \"\";\n            el.offer.suggestedClaimValue = data;\n          }\n          el.offer.offerorId = caseDetails?.respondentPartyId;\n          el.offer.statusAlais = \"makeOffer\";\n          el.offer.reason = \"\";\n          el.previousOffer =\n            copytNegotiationRound[index].claimantClaims[\n              idex\n            ]?.offer?.claimValue;\n        }\n      )\n    );\n\n    setNegotiationRounds(copytNegotiationRound);\n    setLoader({ state: false });\n  };\n\n  /**\n   * @description Function execute when Accept Claim button is clicked\n   */\n  const triggerAcceptToClaim = () => {\n    setLoader({ state: true, message: \"Updating case details...\" });\n    callAcceptCliam(id, negotiationRounds, isRespondent).then(\n      () => {\n        setLoader({ state: false });\n        setTriggerCaseCall(true);\n        setTriggerCount(true);\n      },\n      (err) => {\n        setLoader({ state: false });\n      }\n    );\n  };\n\n  async function getSuggestionRespondent(\n    currentRound,\n    currentClaimantValue,\n    currentRespondentValue,\n    caseDetailsObj\n  ) {\n    const data = {\n      totalRounds: caseDetailsObj?.negotiationRoundLimit?.toString(),\n      currentRound: currentRound?.toString(),\n      currentClaimantValue: currentClaimantValue?.toString() || \"0\",\n      currentRespondentValue: currentRespondentValue?.toString() || \"0\",\n      prevClaimantValue: \"0\",\n    };\n    return await fetch(\n      `${process.env.REACT_APP_BASE_SUGGESTION_API}/respondent`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }\n    )\n      .then(async (response) => {\n        const data = await response.json();\n        return data?.respondentSuggestion?.nextRespondentValue > 0\n          ? data?.respondentSuggestion?.nextRespondentValue\n          : 0;\n      })\n      .catch((err) => {\n        enqueueSnackbar(\"Failed to get the suggestion value\", {\n          variant: \"error\",\n        });\n        return null;\n      });\n  }\n\n  async function getSuggestionClaimant(\n    currentRound,\n    currentClaimantValue,\n    currentRespondentValue,\n    caseDetails\n  ) {\n    const data = {\n      totalRounds: caseDetails?.negotiationRoundLimit.toString(),\n      currentRound: currentRound?.toString(),\n      currentClaimantValue: currentClaimantValue?.toString(),\n      currentRespondentValue: currentRespondentValue?.toString(),\n      prevRespondentValue: \"0\",\n    };\n    return await fetch(\n      `${process.env.REACT_APP_BASE_SUGGESTION_API}/claimant`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }\n    )\n      .then(async (response) => {\n        const data = await response.json();\n        return data?.claimantSuggestion?.nextClaimantValue > 0\n          ? data?.claimantSuggestion?.nextClaimantValue\n          : 0;\n      })\n      .catch((err) => {\n        enqueueSnackbar(\"Failed to get the suggestion value\", {\n          variant: \"error\",\n        });\n        return null;\n      });\n  }\n\n  /**\n   * @description Function execute when move to next round is clicked\n   */\n  const triggerMoveTonextRound = async (\n    caseState,\n    negotiationRounds,\n    caseDetails\n  ) => {\n    setLoader({ state: true, message: \"Loading...\" });\n    const copyCurrentState = { ...caseState };\n    const copytNegotiationRound = [...negotiationRounds];\n    copyCurrentState.enableSelection = true;\n    const buttonTodisplay = copyCurrentState?.cta.filter(\n      (el) => el.type === \"SUBMIT_OFFER\" || el.type === \"QUIT\"\n    );\n    let index = Object.keys(copytNegotiationRound).length;\n    copytNegotiationRound[index] = {};\n    copytNegotiationRound[index].claimantClaims = JSON.parse(\n      JSON.stringify(copytNegotiationRound[index - 1].respondentClaims)\n    );\n    copytNegotiationRound[index].negotiationRound = index + 1;\n    await Promise.all(\n      copytNegotiationRound[index].claimantClaims.map(async (el, idx) => {\n        if (el.acceptedOffer) {\n          el.offer = el.acceptedOffer;\n        } else if (el?.offer?.status === \"offered\") {\n          const value = await getSuggestionClaimant(\n            copytNegotiationRound[index].negotiationRound,\n            copytNegotiationRound[index - 1].claimantClaims[idx]?.offer\n              ?.claimValue,\n            copytNegotiationRound[index - 1].respondentClaims[idx]?.offer\n              ?.claimValue,\n            caseDetails\n          );\n          el.offer.claimValue = \"\";\n          el.offer.suggestedClaimValue = value;\n        }\n        el.offer.offerorId = caseDetails?.claimantPartyId;\n        el.offer.reason = \"\";\n        el.offer.statusAlais = \"makeOffer\";\n        el.previousOffer =\n          copytNegotiationRound[index - 1].respondentClaims[\n            idx\n          ]?.offer?.claimValue;\n      })\n    );\n    setButtonToDisplay(buttonTodisplay);\n    setNegotiationRounds(copytNegotiationRound);\n    setCurrentState(copyCurrentState);\n    setLoader({ state: false });\n  };\n\n  /**\n   * @description Function execute when negotiation button is clicked\n   */\n  const triggerNegotiateAction = (\n    caseState = currentState,\n    rounds,\n    caseDetailsObj = {}\n  ) => {\n    const isRespondentAns = rounds[rounds.length - 1]?.respondentClaims?.some(\n      (el) =>\n        el?.offer?.status === \"offered\" &&\n        el?.offer?.offerorId === caseDetailsObj?.respondentPartyId\n    );\n    if (!isRespondentAns) {\n      const copyCurrentState = { ...caseState };\n      copyCurrentState.enableSelection = true;\n      setCurrentState(copyCurrentState);\n      triggerMakeOffer(rounds, caseDetailsObj);\n    }\n  };\n\n  /**\n   * @description Function to check the given offer is valid or not\n   */\n\n  const checkZeroVal = () => {\n    let isValid = true;\n    const { values } = formikRef?.current[formikRef?.current?.length - 1];\n    for (let i = 0; i < values?.items?.length; i++) {\n      if (\n        _.isEmpty(values?.items[i].acceptedOffer) &&\n        values?.items[i]?.offer?.status !== \"accepted\"\n      ) {\n        if (\n          !values?.items[i]?.offer?.claimValue ||\n          (values?.items[i]?.offer?.claimValue &&\n            Number(values?.items[i]?.offer?.claimValue) < 0)\n        ) {\n          isValid = false;\n        }\n      }\n    }\n    return isValid;\n  };\n\n  const checkValid = () => {\n    let isValid = true;\n    let messageObj = {\n      greaterOriginalClaim: false,\n      claimantlesserClaimValue: false,\n      claimantgreaterClaimValue: false,\n      respondentlesserClaimValue: false,\n      respondentgreaterClaimValue: false,\n    };\n    const roundLength = negotiationRounds?.length;\n    const previousRound =\n      roundLength > 1\n        ? isRespondent\n          ? negotiationRounds[roundLength - 2].respondentClaims\n          : negotiationRounds[roundLength - 2].claimantClaims\n        : {};\n    const { values } = formikRef?.current[formikRef?.current?.length - 1];\n    for (let i = 0; i < values?.items?.length; i++) {\n      if (\n        _.isEmpty(values?.items[i].acceptedOffer) &&\n        values?.items[i]?.offer?.status !== \"accepted\"\n      ) {\n        console.log(`${i}-->`, isNaN(values?.items[i]?.offer?.claimValue));\n        if (!values?.items[i]?.offer?.claimValue?.length) {\n          isValid = false;\n          messageObj.nullValue = true;\n        } else if (\n          /**Condition for exceeds original Calim Value */\n          Number(values?.items[i]?.offer?.claimValue) >\n          Number(caseDetails?.caseItems[i]?.claimValue)\n        ) {\n          isValid = false;\n          messageObj.greaterOriginalClaim = true;\n        } else if (\n          /**Condition for Claimant who cannot enter lesser value than respondent value */\n          !isRespondent &&\n          Number(values?.items[i]?.offer?.claimValue) <\n            Number(values?.items[i]?.previousOffer)\n        ) {\n          isValid = false;\n          messageObj.claimantlesserClaimValue = true;\n        } else if (\n          /**Condition for claimant who cannot enter grater value than previous Round Claim value */\n          !isRespondent &&\n          roundLength > 1 &&\n          Number(values?.items[i]?.offer?.claimValue) >\n            Number(previousRound[i]?.offer?.claimValue)\n        ) {\n          isValid = false;\n          messageObj.claimantgreaterClaimValue = true;\n        } else if (\n          /** Consition for respondent who cannot enter greater value than claimant value */\n          isRespondent &&\n          Number(values?.items[i]?.offer?.claimValue) >\n            Number(values?.items[i]?.previousOffer)\n        ) {\n          isValid = false;\n          messageObj.respondentgreaterClaimValue = true;\n        } else if (\n          /** Condition for respondent who cannot enter lesser value than previous repondent value */\n          isRespondent &&\n          roundLength > 1 &&\n          Number(values?.items[i]?.offer?.claimValue) <\n            Number(previousRound[i]?.offer?.claimValue)\n        ) {\n          isValid = false;\n          messageObj.respondentlesserClaimValue = true;\n        }\n      }\n    }\n    showErrorMsg(messageObj);\n    return isValid;\n  };\n\n  function showErrorMsg({\n    greaterOriginalClaim,\n    claimantlesserClaimValue,\n    claimantgreaterClaimValue,\n    respondentlesserClaimValue,\n    respondentgreaterClaimValue,\n    nullValue,\n  }) {\n    if (nullValue) {\n      enqueueSnackbar(\"Response cannot be null\", {\n        variant: \"error\",\n      });\n    } else if (greaterOriginalClaim) {\n      enqueueSnackbar(\"Offer cannot be greater than the original claim value\", {\n        variant: \"error\",\n      });\n    } else if (claimantlesserClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be less than counter offer\", {\n        variant: \"error\",\n      });\n    } else if (claimantgreaterClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be higher than your previous offer\", {\n        variant: \"error\",\n      });\n    } else if (respondentlesserClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be less than your previous offer\", {\n        variant: \"error\",\n      });\n    } else if (respondentgreaterClaimValue) {\n      enqueueSnackbar(\"Claim value cannot be higher than the counter offer\", {\n        variant: \"error\",\n      });\n    }\n  }\n\n  const callSubmitOffer = () => {\n    setLoader({ state: true, message: \"Updating case details...\" });\n    callSendOffer(id, formikRef)\n      .then(\n        async () => {\n          setLoader({ state: false });\n          setTriggerCaseCall(true);\n          enqueueSnackbar(\"Response Sent Successfully\", {\n            variant: \"success\",\n          });\n        },\n        (err) => {\n          setLoader({ state: false });\n          console.log(err);\n          enqueueSnackbar(getErrorMessage(err), {\n            variant: \"error\",\n          });\n        }\n      )\n      .finally(() => {\n        hideAlert();\n      });\n  };\n\n  const sameOfferPresent = () => {\n    let isSame = false;\n    const { values } = formikRef?.current[formikRef?.current?.length - 1];\n    for (let i = 0; i < values?.items?.length; i++) {\n      if (\n        _.isEmpty(values?.items[i].acceptedOffer) &&\n        values?.items[i]?.offer?.status !== \"accepted\"\n      ) {\n        if (\n          Number(values?.items[i]?.offer?.claimValue) ===\n          Number(values?.items[i]?.previousOffer)\n        ) {\n          isSame = true;\n        }\n      }\n    }\n    return isSame;\n  };\n\n  /**\n   * @description Function excute when Submit offer or submit counteroffer is clicked\n   */\n  const triggerSubmitOffer = () => {\n    if (checkZeroVal()) {\n      if (checkValid()) {\n        if (sameOfferPresent()) {\n          setDialogData({\n            primaryBtnText: \"Proceed\",\n            secondaryBtnText: \"Cancel\",\n            desc:\n              \"You've entered the same claim values for some of your's offers. would you like to accept those offer?\",\n            heading: \"Warning\",\n            buttonType: \"SUBMIT_OFFER\",\n            descriptionTextStyle: {\n              textAlign: \"left\",\n            },\n          });\n          setOpen(true);\n        } else {\n          showAlert({\n            heading: \"Please confirm!\",\n            desc: `Would you like us to go ahead and submit your offer? Offer once submitted cannot be changed.`,\n            //desc: `Are you really sure you want to submit your offer? Offer once submitted cannot be changed.`,\n            primaryBtnText: \"Yes\",\n            secondaryBtnText: \"No\",\n            clickSecondarybtn: () => hideAlert(),\n            clickPrimaryBtn: () => callSubmitOffer(),\n            isOpen: true,\n            descriptionTextStyle: {\n              textAlign: \"left\",\n            },\n            onDialogClose: () => hideAlert(),\n          });\n        }\n      }\n    } else {\n      enqueueSnackbar(\"Claim value cannot be empty\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  /**\n   * @description Function to trigger the Quit case Details\n   */\n  const triggerQuitCase = () => {\n    setLoader({ state: true, message: \"Updating case details...\" });\n    callQuitCase(id).then(\n      (_) => {\n        setLoader({ state: false });\n        setTriggerCaseCall(true);\n      },\n      (err) => {\n        setLoader({ state: false });\n        console.log(err);\n      }\n    );\n  };\n\n  const showPaymentAlert = async (type) => {\n    try {\n      setLoader({ state: true, message: \"loading...\" });\n      const negotiationSuccessFee =\n        (await CaseService.getCase(id, \"?estimateFeeKind=successFee\"))?.fee ||\n        {};\n      setDialogData({\n        primaryBtnText: \"Go to Case Cart\",\n        secondaryBtnText: \"I'll Pay Later\",\n        desc: (\n          <>\n            To download your agreement for{\" \"}\n            <b style={{ fontFamily: `${theme.fonts.primaryFontExtraBold}` }}>\n              Case ID {id}\n            </b>{\" \"}\n            please go to case cart and complete the payment towards{\" \"}\n            {caseDetails?.resolutionKind} Agreement fee:{\" \"}\n            <b style={{ fontFamily: `${theme.fonts.primaryFontExtraBold}` }}>\n              INR {parseFloat(negotiationSuccessFee?.total).toFixed(2)}\n            </b>\n          </>\n        ),\n        heading: \"Case moved to Payment\",\n        buttonType: type,\n      });\n      setOpen(true);\n    } catch (err) {\n      enqueueSnackbar(\"Something went wrong\", {\n        variant: \"error\",\n      });\n    } finally {\n      setLoader({ state: false });\n    }\n  };\n\n  /**THis case is used to decide what will happend when the button is trigggered */\n  const onbuttonClick = (type) => {\n    switch (type) {\n      case \"QUIT\": {\n        setDialogData({\n          primaryBtnText: \"Don't Quit\",\n          secondaryBtnText: \"Yes, Quit\",\n          desc: `Please note once you quit, you cannot continue your ${caseDetails?.resolutionKind}. Yes to Quit, No to Don't Quit.`,\n          heading: \"Do you really want to Quit your case?\",\n          buttonType: type,\n          descriptionTextStyle: {\n            textAlign: \"left\",\n          },\n        });\n        setOpen(true);\n        break;\n      }\n      case \"MOVE_TO_CART\": {\n        showPaymentAlert(type);\n        break;\n      }\n      case \"ACCEPT\": {\n        triggerAcceptToClaim();\n        break;\n      }\n\n      case \"NEGOTIATE\": {\n        if (isRespondent) {\n          triggerNegotiateAction();\n        } else {\n          triggerMoveTonextRound();\n        }\n        break;\n      }\n\n      case \"MAKE_OFFER\": {\n        triggerMakeOffer();\n        break;\n      }\n\n      case \"SUBMIT_OFFER\": {\n        triggerSubmitOffer();\n        break;\n      }\n\n      case \"MOVE_TO_AGREEMENT\": {\n        const currentStatus = isRespondent\n          ? RESPONTANT_LIFE_CYCLE.find(\n              (el) => el.key === CLAIMENT_PAID_NEGOTIATION\n            )\n          : CLAIMANT_LIFE_CYCLE.find(\n              (el) => el.key === RESPONDENT_PAID_NEGOTIATION\n            );\n        setCurrentState(currentStatus);\n        displayCaseCTA(currentStatus, negotiationRounds, caseDetails);\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  };\n\n  /**Function to trigger the success model */\n  const clickPrimaryBtn = (type) => {\n    setOpen(false);\n    switch (type) {\n      case \"MOVE_TO_CART\": {\n        setTriggerCount(true);\n        navigate(\"/dashboard/cart\");\n        break;\n      }\n      case \"SUBMIT_OFFER\": {\n        callSubmitOffer();\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  };\n\n  const clickSecondarybtn = (type) => {\n    setOpen(false);\n    switch (type) {\n      case \"QUIT\": {\n        triggerQuitCase();\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  };\n  return (\n    <Fragment>\n      <ActionBar\n        breadcrumbs={breadcrumbs}\n        onBreadcrumbClick={onBreadcrumbClick}\n      />\n      <PageWrapper state={state}>\n        <LifeCycleContainer>\n          <StyledLabel>Case Lifecycle</StyledLabel>\n          {!_.isEmpty(caseDetails) && (\n            <LifeCycle\n              items={isRespondent ? RESPONTANT_LIFE_CYCLE : CLAIMANT_LIFE_CYCLE}\n              selectedIndex={currentState?.index}\n              isMediation={caseDetails?.resolutionKind !== \"negotiation\"}\n              resolutionKind={caseDetails?.resolutionKind}\n              kind={isRespondent}\n            />\n          )}\n        </LifeCycleContainer>\n        <Spacing>\n          <CaseDetails\n            isActionsDisabled={\n              currentState?.key === NEGOTIATION_REACHED ||\n              currentState?.key === NEGOTIATION_QUIT_BY_CLAIMENT ||\n              currentState?.key === NEGOTIATION_QUIT_BY_RESPONDENT ||\n              currentState?.key === NEGOTIATION_QUIT_BY_CASEMANAGER ||\n              currentState?.key === CLAIMENT_PAID_NEGOTIATION ||\n              currentState?.key === RESPONDENT_PAID_NEGOTIATION ||\n              currentState?.key === BOTH_PAID_NEGOTIATION\n            }\n            isViewAction={\n              currentState?.key === NEGOTIATION_QUIT_BY_CLAIMENT ||\n              currentState?.key === NEGOTIATION_QUIT_BY_RESPONDENT ||\n              currentState?.key === NEGOTIATION_QUIT_BY_CASEMANAGER\n            }\n            {...{\n              setState,\n              id,\n              MTRef,\n              partyList,\n            }}\n            caseDetails={caseDetails}\n          />\n        </Spacing>\n        <Manager>\n          {caseDetails?.caseManager?.name && (\n            <Block>\n              <CaseManager\n                handlePopup={handlePopup}\n                caseManager={caseDetails?.caseManager}\n                hideChat={caseDetails?.resolutionKind !== \"negotiation\"}\n              />\n            </Block>\n          )}\n\n          {caseDetails?.resolutionKind !== \"negotiation\" &&\n          caseDetails?.requestedMediators?.length ? (\n            <>\n              {caseDetails?.requestedMediators\n                ?.filter((el) => el?.id)\n                ?.map((mediator, index) => (\n                  <Block key={index}>\n                    <CaseManager\n                      title={\n                        caseDetails?.resolutionKind === \"mediation\"\n                          ? \"Mediator\"\n                          : \"Arbitrator\"\n                      }\n                      hideChat={true}\n                      caseManager={mediator}\n                    />\n                  </Block>\n                ))}\n            </>\n          ) : null}\n          {caseDetails?.resolutionKind &&\n            caseDetails?.resolutionKind !== \"negotiation\" && (\n              <Block>\n                <BigBlueButton\n                  id={caseDetails?.id}\n                  status={caseDetails?.status}\n                  type={`Join ${_.capitalize(caseDetails?.resolutionKind)} Session`}\n                />\n              </Block>\n            )}\n        </Manager>\n\n        {negotiationTypeState({\n          ownerId: caseDetails?.claimantPartyId,\n          respondentId: caseDetails?.respondentPartyId,\n          currentState,\n          negotiationRounds,\n          isRespondent,\n          formikRef,\n          caseDetails,\n          showCta,\n          comments,\n          setComments,\n          partyList,\n        })}\n\n        <Spacing>\n          {showCta && (\n            <CaseCTA\n              cta={buttonToDisplay}\n              disableButton={false}\n              onbuttonClick={(type) => onbuttonClick(type)}\n            />\n          )}\n        </Spacing>\n\n        {/* This is for Modal */}\n        <div>\n          <AlertDialog\n            isOpen={open}\n            clickSecondarybtn={() =>\n              clickSecondarybtn(dialogData.buttonType, false)\n            }\n            primaryBtnText={dialogData.primaryBtnText}\n            secondaryBtnText={dialogData.secondaryBtnText}\n            desc={dialogData.desc}\n            heading={dialogData.heading}\n            clickPrimaryBtn={() => clickPrimaryBtn(dialogData.buttonType, true)}\n            descriptionTextStyle={{\n              textAlign: \"left\",\n            }}\n          />\n        </div>\n        <div id=\"freshchat-js-sdk\" />\n      </PageWrapper>\n      <DrawerTableCaseDocument\n        {...{ state, setState, id, MTRef }}\n        type={caseDetails?.resolutionKind}\n        agentRole={caseDetails?.agentRole}\n      />\n    </Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}