{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/pages/ForgotPassword/index.js\";\nimport React, { useEffect } from \"react\";\nimport { Center } from \"../../../styles/component/style\";\nimport { AccountVerification } from \"../../internal/AccountVerification/AccountVerification\";\nimport { Header } from \"../../internal/Header/Header\";\nimport AuthService from \"../../../services/AuthService\";\nimport { useSnackbar } from \"notistack\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { AccVerifyContainer } from \"../AccoutVerificationPage/Styles\";\nimport { navigate } from \"@reach/router\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\n\nconst Index = ({\n  location\n}) => {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    setLoader\n  } = useLoader();\n  const {\n    state\n  } = location;\n\n  async function resendEmail() {\n    try {\n      setLoader({\n        state: true,\n        message: \"Sending verfication email...\"\n      });\n      const payload = {\n        email: state.email\n      };\n      const response = await AuthService.forgotPassword(payload);\n\n      if (response) {\n        enqueueSnackbar(\"Verification mail sent successfully. Please check your Junk Folder/ Promotions Folder incase you don't receive the email\", {\n          variant: \"success\"\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n      navigate(\"/login\");\n    } finally {\n      setLoader({\n        state: false\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (state === null || state === void 0 ? void 0 : state.email) {\n      resendEmail();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [state === null || state === void 0 ? void 0 : state.email]);\n  if (!(state === null || state === void 0 ? void 0 : state.email)) navigate(\"/dashboard/login\");\n  return /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Center, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AccVerifyContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AccountVerification, {\n    heading: \"FORGOT PASSWORD\",\n    timer: 60,\n    isTimmerEnabel: true,\n    message: `We’ve sent a reset password link to your registered email. Please check your inbox and update your password to access your account`,\n    triggerResent: resendEmail,\n    location: location,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/pages/ForgotPassword/index.js"],"names":["React","useEffect","Center","AccountVerification","Header","AuthService","useSnackbar","useLoader","AccVerifyContainer","navigate","getErrorMessage","Index","location","enqueueSnackbar","setLoader","state","resendEmail","message","payload","email","response","forgotPassword","variant","error","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,mBAAT,QAAoC,wDAApC;AACA,SAASC,MAAT,QAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,eAAT,QAAgC,4BAAhC;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAsBP,WAAW,EAAvC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAgBP,SAAS,EAA/B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAYH,QAAlB;;AACA,iBAAeI,WAAf,GAA6B;AAC3B,QAAI;AACFF,MAAAA,SAAS,CAAC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeE,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAT;AACA,YAAMC,OAAO,GAAG;AAAEC,QAAAA,KAAK,EAAEJ,KAAK,CAACI;AAAf,OAAhB;AACA,YAAMC,QAAQ,GAAG,MAAMf,WAAW,CAACgB,cAAZ,CAA2BH,OAA3B,CAAvB;;AACA,UAAIE,QAAJ,EAAc;AACZP,QAAAA,eAAe,CACb,0HADa,EAEb;AACES,UAAAA,OAAO,EAAE;AADX,SAFa,CAAf;AAMD;AACF,KAZD,CAYE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,YAAMN,OAAO,GAAGP,eAAe,CAACa,KAAD,CAA/B;AACAV,MAAAA,eAAe,CAACI,OAAD,EAAU;AACvBK,QAAAA,OAAO,EAAE;AADc,OAAV,CAAf;AAGAb,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACD,KAnBD,SAmBU;AACRK,MAAAA,SAAS,CAAC;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAD,CAAT;AACD;AACF;;AACDd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEI,KAAX,EAAkB;AAChBH,MAAAA,WAAW;AACZ,KAHa,CAId;;AACD,GALQ,EAKN,CAACD,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEI,KAAR,CALM,CAAT;AAMA,MAAI,EAACJ,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEI,KAAR,CAAJ,EAAmBV,QAAQ,CAAC,kBAAD,CAAR;AACnB,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,mBAAD;AACE,IAAA,OAAO,EAAC,iBADV;AAEE,IAAA,KAAK,EAAE,EAFT;AAGE,IAAA,cAAc,EAAE,IAHlB;AAIE,IAAA,OAAO,EAAG,oIAJZ;AAKE,IAAA,aAAa,EAAEO,WALjB;AAME,IAAA,QAAQ,EAAEJ,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AAgBD,CAnDD;;AAqDA,eAAeD,KAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Center } from \"../../../styles/component/style\";\nimport { AccountVerification } from \"../../internal/AccountVerification/AccountVerification\";\nimport { Header } from \"../../internal/Header/Header\";\nimport AuthService from \"../../../services/AuthService\";\nimport { useSnackbar } from \"notistack\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { AccVerifyContainer } from \"../AccoutVerificationPage/Styles\";\nimport { navigate } from \"@reach/router\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\n\nconst Index = ({ location }) => {\n  const { enqueueSnackbar } = useSnackbar();\n  const { setLoader } = useLoader();\n  const { state } = location;\n  async function resendEmail() {\n    try {\n      setLoader({ state: true, message: \"Sending verfication email...\" });\n      const payload = { email: state.email };\n      const response = await AuthService.forgotPassword(payload);\n      if (response) {\n        enqueueSnackbar(\n          \"Verification mail sent successfully. Please check your Junk Folder/ Promotions Folder incase you don't receive the email\",\n          {\n            variant: \"success\",\n          }\n        );\n      }\n    } catch (error) {\n      console.log(error);\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\",\n      });\n      navigate(\"/login\");\n    } finally {\n      setLoader({ state: false });\n    }\n  }\n  useEffect(() => {\n    if (state?.email) {\n      resendEmail();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state?.email]);\n  if (!state?.email) navigate(\"/dashboard/login\");\n  return (\n    <Header>\n      <Center>\n        <AccVerifyContainer>\n          <AccountVerification\n            heading=\"FORGOT PASSWORD\"\n            timer={60}\n            isTimmerEnabel={true}\n            message={`We’ve sent a reset password link to your registered email. Please check your inbox and update your password to access your account`}\n            triggerResent={resendEmail}\n            location={location}\n          />\n        </AccVerifyContainer>\n      </Center>\n    </Header>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}