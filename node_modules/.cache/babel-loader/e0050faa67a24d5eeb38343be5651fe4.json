{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/DocumentTypeChange/DocTypeChange.js\",\n    _theme$breakpoints;\n\nimport React, { useState } from \"react\";\nimport theme from \"../../../assets/theme\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport CustomSelect from \"../../common/CustomSelect/CustomSelectDoc\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport styled from \"styled-components\";\n\nconst DocChangeType = ({\n  rowData,\n  docName,\n  setState\n}) => {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    setLoader\n  } = useLoader();\n  let docId = rowData === null || rowData === void 0 ? void 0 : rowData.id;\n  let caseId = rowData === null || rowData === void 0 ? void 0 : rowData.entityId;\n  const [docType, setDocType] = useState(docName);\n\n  const changeDocType = async value => {\n    try {\n      setLoader({\n        state: true,\n        message: \"Change Document...\"\n      });\n      const payload = {\n        uploadType: value\n      };\n      const res = await CaseService.changeDocType(payload, caseId, docId);\n\n      if (res) {\n        enqueueSnackbar(\"Document Type Changed Successfully\", {\n          variant: \"success\"\n        });\n        setDocType(value);\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n      setState(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(CustomSelect, {\n    menuItemValues: caseDocumentType,\n    name: docType,\n    value: docType,\n    onChange: e => changeDocType(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default DocChangeType;\nexport const Container = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\twidth: 100%;\n\t@media ${theme === null || theme === void 0 ? void 0 : (_theme$breakpoints = theme.breakpoints) === null || _theme$breakpoints === void 0 ? void 0 : _theme$breakpoints.sm_up} {\n\t\twidth: auto;\n\t}\n`;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/DocumentTypeChange/DocTypeChange.js"],"names":["React","useState","theme","CaseService","getErrorMessage","useSnackbar","CustomSelect","useLoader","caseDocumentType","styled","DocChangeType","rowData","docName","setState","enqueueSnackbar","setLoader","docId","id","caseId","entityId","docType","setDocType","changeDocType","value","state","message","payload","uploadType","res","variant","error","display","alignItems","e","target","Container","div","breakpoints","sm_up"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA;AAApB,CAAD,KAAoC;AACzD,QAAM;AAAEC,IAAAA;AAAF,MAAsBT,WAAW,EAAvC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAgBR,SAAS,EAA/B;AACA,MAAIS,KAAK,GAAGL,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEM,EAArB;AACA,MAAIC,MAAM,GAAGP,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEQ,QAAtB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAACW,OAAD,CAAtC;;AAEA,QAAMU,aAAa,GAAG,MAAOC,KAAP,IAAiB;AACtC,QAAI;AACHR,MAAAA,SAAS,CAAC;AAAES,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAT;AACA,YAAMC,OAAO,GAAG;AACfC,QAAAA,UAAU,EAAEJ;AADG,OAAhB;AAGA,YAAMK,GAAG,GAAG,MAAMzB,WAAW,CAACmB,aAAZ,CAA0BI,OAA1B,EAAmCR,MAAnC,EAA2CF,KAA3C,CAAlB;;AACA,UAAIY,GAAJ,EAAS;AACRd,QAAAA,eAAe,CAAC,oCAAD,EAAuC;AACrDe,UAAAA,OAAO,EAAE;AAD4C,SAAvC,CAAf;AAGAR,QAAAA,UAAU,CAACE,KAAD,CAAV;AACA;AACD,KAZD,CAYE,OAAOO,KAAP,EAAc;AACf,YAAML,OAAO,GAAGrB,eAAe,CAAC0B,KAAD,CAA/B;AACAhB,MAAAA,eAAe,CAACW,OAAD,EAAU;AACxBI,QAAAA,OAAO,EAAE;AADe,OAAV,CAAf;AAGA,KAjBD,SAiBU;AACTd,MAAAA,SAAS,CAAC;AAAES,QAAAA,KAAK,EAAE;AAAT,OAAD,CAAT;AACAX,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACA;AACD,GAtBD;;AAwBA,sBACC,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE;AAAEkB,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,UAAU,EAAE;AAA/B,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,YAAD;AACC,IAAA,cAAc,EAAExB,gBADjB;AAEC,IAAA,IAAI,EAAEY,OAFP;AAGC,IAAA,KAAK,EAAEA,OAHR;AAIC,IAAA,QAAQ,EAAGa,CAAD,IAAOX,aAAa,CAACW,CAAC,CAACC,MAAF,CAASX,KAAV,CAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD;AAUA,CAzCD;;AA2CA,eAAeb,aAAf;AAEA,OAAO,MAAMyB,SAAS,GAAG1B,MAAM,CAAC2B,GAAI;AACpC;AACA;AACA;AACA,UAAUlC,KAJyB,aAIzBA,KAJyB,6CAIzBA,KAAK,CAAEmC,WAJkB,uDAIzB,mBAAoBC,KAAM;AACpC;AACA;AACA,CAPO","sourcesContent":["import React, { useState } from \"react\";\nimport theme from \"../../../assets/theme\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport CustomSelect from \"../../common/CustomSelect/CustomSelectDoc\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport styled from \"styled-components\";\n\nconst DocChangeType = ({ rowData, docName, setState }) => {\n\tconst { enqueueSnackbar } = useSnackbar();\n\tconst { setLoader } = useLoader();\n\tlet docId = rowData?.id;\n\tlet caseId = rowData?.entityId;\n\tconst [docType, setDocType] = useState(docName);\n\n\tconst changeDocType = async (value) => {\n\t\ttry {\n\t\t\tsetLoader({ state: true, message: \"Change Document...\" });\n\t\t\tconst payload = {\n\t\t\t\tuploadType: value\n\t\t\t};\n\t\t\tconst res = await CaseService.changeDocType(payload, caseId, docId);\n\t\t\tif (res) {\n\t\t\t\tenqueueSnackbar(\"Document Type Changed Successfully\", {\n\t\t\t\t\tvariant: \"success\"\n\t\t\t\t});\n\t\t\t\tsetDocType(value);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconst message = getErrorMessage(error);\n\t\t\tenqueueSnackbar(message, {\n\t\t\t\tvariant: \"error\"\n\t\t\t});\n\t\t} finally {\n\t\t\tsetLoader({ state: false });\n\t\t\tsetState(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Container style={{ display: \"flex\", alignItems: \"center\" }}>\n\t\t\t<CustomSelect\n\t\t\t\tmenuItemValues={caseDocumentType}\n\t\t\t\tname={docType}\n\t\t\t\tvalue={docType}\n\t\t\t\tonChange={(e) => changeDocType(e.target.value)}\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n\nexport default DocChangeType;\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\twidth: 100%;\n\t@media ${theme?.breakpoints?.sm_up} {\n\t\twidth: auto;\n\t}\n`;\n"]},"metadata":{},"sourceType":"module"}