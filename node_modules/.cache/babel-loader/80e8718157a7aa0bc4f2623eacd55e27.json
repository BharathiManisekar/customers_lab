{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/providers/SettingsProvider.js\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { getErrorMessage } from \"../helpers/functions\";\nimport SystemService from \"../services/SystemService\";\nimport _ from \"lodash\";\nexport const SettingsContext = React.createContext();\n\nfunction SettingsProvider({\n  children\n}) {\n  const [setting, setSetting] = useState({});\n  const [settingsLoading, setSettingsLoading] = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  function getFaviconEl(id) {\n    return document.getElementById(id);\n  }\n\n  useEffect(() => {\n    if (!_.isEmpty(setting)) {\n      const favicon_32 = getFaviconEl(\"favicon_32\");\n      const favicon_16 = getFaviconEl(\"favicon_16\");\n      favicon_32.href = setting === null || setting === void 0 ? void 0 : setting.faviconUrl;\n      favicon_16.href = setting === null || setting === void 0 ? void 0 : setting.faviconUrl;\n    }\n  }, [setting]);\n  useEffect(() => {\n    async function getSystemConfig() {\n      setSettingsLoading(true);\n\n      try {\n        const response = await SystemService.getConfig();\n\n        if (response.systemConfig) {\n          let data = response.systemConfig.arbitratorsInfo || [];\n          response.systemConfig.arbitratorsInfo = await sortNeutralData(data);\n          data = response.systemConfig.mediatorsInfo || [];\n          response.systemConfig.mediatorsInfo = await sortNeutralData(data);\n          setSetting(response.systemConfig);\n        }\n\n        setSettingsLoading(false);\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n        setSettingsLoading(false);\n      }\n    }\n\n    getSystemConfig(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const sortNeutralData = data => {\n    data = data.sort((a, b) => {\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      } // names must be equal\n\n\n      return 0;\n    });\n    return data;\n  };\n\n  const value = React.useMemo(() => {\n    return {\n      setting,\n      setSetting,\n      settingsLoading\n    };\n  }, [setting, setSetting, settingsLoading]);\n  return /*#__PURE__*/React.createElement(SettingsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default SettingsProvider;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/providers/SettingsProvider.js"],"names":["useSnackbar","React","useEffect","useState","getErrorMessage","SystemService","_","SettingsContext","createContext","SettingsProvider","children","setting","setSetting","settingsLoading","setSettingsLoading","enqueueSnackbar","getFaviconEl","id","document","getElementById","isEmpty","favicon_32","favicon_16","href","faviconUrl","getSystemConfig","response","getConfig","systemConfig","data","arbitratorsInfo","sortNeutralData","mediatorsInfo","error","message","variant","sort","a","b","nameA","name","toUpperCase","nameB","value","useMemo"],"mappings":"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","sourcesContent":["import { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { getErrorMessage } from \"../helpers/functions\";\nimport SystemService from \"../services/SystemService\";\nimport _ from \"lodash\";\n\nexport const SettingsContext = React.createContext();\n\nfunction SettingsProvider({ children }) {\n  const [setting, setSetting] = useState({});\n  const [settingsLoading, setSettingsLoading] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  function getFaviconEl(id) {\n    return document.getElementById(id);\n  }\n\n  useEffect(() => {\n    if (!_.isEmpty(setting)) {\n      const favicon_32 = getFaviconEl(\"favicon_32\");\n      const favicon_16 = getFaviconEl(\"favicon_16\");\n      favicon_32.href = setting?.faviconUrl;\n      favicon_16.href = setting?.faviconUrl;\n    }\n  }, [setting]);\n\n  useEffect(() => {\n    async function getSystemConfig() {\n      setSettingsLoading(true);\n      try {\n        const response = await SystemService.getConfig();\n        if (response.systemConfig) {\n          let data = response.systemConfig.arbitratorsInfo || []\n          response.systemConfig.arbitratorsInfo = await sortNeutralData(data)\n          data = response.systemConfig.mediatorsInfo || []\n          response.systemConfig.mediatorsInfo = await sortNeutralData(data)\n          setSetting(response.systemConfig);\n        }\n        setSettingsLoading(false);\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\",\n        });\n        setSettingsLoading(false);\n      }\n    }\n    getSystemConfig();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const sortNeutralData = (data) => {\n    data = data.sort((a, b) => {\n      var nameA = a.name.toUpperCase() // ignore upper and lowercase\n      var nameB = b.name.toUpperCase() // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1\n      }\n      if (nameA > nameB) {\n        return 1\n      }\n      // names must be equal\n      return 0\n    })\n    return data\n  }\n\n  const value = React.useMemo(() => {\n    return {\n      setting,\n      setSetting,\n      settingsLoading,\n    };\n  }, [setting, setSetting, settingsLoading]);\n\n  return (\n    <SettingsContext.Provider value={value}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport default SettingsProvider;\n"]},"metadata":{},"sourceType":"module"}