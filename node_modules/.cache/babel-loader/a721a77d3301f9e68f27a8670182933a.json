{"ast":null,"code":"var _jsxFileName = \"/home/justact/customes_lap/src/Pages/NameSegment.js\",\n    _theme$breakpoints;\n\nimport React, { useState } from \"react\";\nimport { Drawer } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport COLORS from \"../assets/Colors\";\nimport { CustomInputField } from \"../common/FormInput\";\nimport theme from \"../assets/theme\";\nimport CustomSelect from \"../internel/CustomSelect\";\nimport { NameType } from \"../Helpers/constants\";\nimport { Formik } from \"formik\";\nimport FormField from \"../common/FormField\";\nimport { FormLabel } from \"@material-ui/core\";\nexport default function NameSegment(_ref) {\n  let {\n    open,\n    setOpen\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [segName, setSegName] = useState(\"\");\n\n  const onFormSubmit = values => {\n    //   onSubmit(postData, modal?.data);\n    console.log(\"values\", values);\n  };\n\n  const handleDeleteVideo = (index, tutorialUrl, setFieldValue) => {\n    if (tutorialUrl === null || tutorialUrl === void 0 ? void 0 : tutorialUrl.length) {\n      const filtered = tutorialUrl.filter((v, idx) => idx !== index);\n      setFieldValue(\"tutorialUrl\", filtered);\n    }\n  };\n\n  const initialState = {\n    first_name: \"\",\n    last_name: \"\"\n  };\n  const [formValues, setFormValues] = useState([{\n    first_name: \"\",\n    last_name: \"\"\n  }]);\n\n  const handleChange = (i, e) => {\n    let newFormValues = [...formValues];\n    newFormValues[i][e.target.name] = e.target.value;\n    setFormValues(newFormValues);\n  };\n\n  const addFormFields = () => {\n    setFormValues([...formValues, {\n      first_name: \"\",\n      last_name: \"\"\n    }]);\n  };\n\n  const removeFormFields = i => {\n    let newFormValues = [...formValues];\n    newFormValues.splice(i, 1);\n    setFormValues(newFormValues);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    alert(JSON.stringify(formValues));\n  };\n\n  return /*#__PURE__*/React.createElement(Drawer, {\n    anchor: \"right\",\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DrawerContainer, {\n    role: \"presentation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HeadingContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Name Segment\"), /*#__PURE__*/React.createElement(CloseModal, {\n    onClick: () => setOpen(false),\n    src: require(\"../assets/images/ArrowBack.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(AgentFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      segment_name: name,\n      schema: [{\n        first_name: \"\",\n        last_name: \"\"\n      }]\n    } // validationSchema={AddZoomLinkValidation}\n    ,\n    onSubmit: onFormSubmit,\n    validateOnBlur: true,\n    validateOnChange: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, _ref2 => {\n    let {\n      values,\n      handleChange,\n      errors,\n      handleSubmit,\n      touched,\n      handleBlur,\n      setFieldValue\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(StyledForm, {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"link-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormField, {\n      input: {\n        name: \"segment_name\",\n        label: \"Enter the Name of the Segment\",\n        type: \"text\",\n        required: true,\n        placeholder: \"Name of the Segment\"\n      },\n      touched,\n      errors,\n      values,\n      handleChange,\n      handleBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      style: {\n        lineHeight: 5.7\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }\n    }, \"To Save Your Segment. you need to add the schemas to build the query\"), formValues.map((element, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-inline\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomSelect, {\n      menuItemValues: NameType // value={element.first_name ? first_name : last_name}\n      // name={first_name ? first_name : last_name}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 23\n      }\n    }), index ? /*#__PURE__*/React.createElement(DeleteIcon, {\n      src: require(\"../assets/images/removeIcon.svg\"),\n      onClick: () => removeFormFields(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }) : null)), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button add\",\n      type: \"button\",\n      onClick: () => addFormFields(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }, \"Add\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, \"Add Segment\"));\n  }))));\n}\nconst DrawerContainer = styled.div`\n  width: 600px;\n  height: 100%;\n  background-color: white;\n  outline: none;\n`;\nexport const Row = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  @media ${theme === null || theme === void 0 ? void 0 : (_theme$breakpoints = theme.breakpoints) === null || _theme$breakpoints === void 0 ? void 0 : _theme$breakpoints.sm_up} {\n    width: auto;\n  }\n`;\nconst StyledForm = styled.form`\n  width: 100%;\n`;\nconst Label = styled.div`\n  font-size: 10px;\n  line-height: 3.7;\n  text-transform: uppercase;\n  color: ${COLORS.COLOR_DARK};\n`;\nexport const BasicDetailsLabel = styled.div`\n  font-size: 10px;\n  line-height: 1.7;\n  color: ${COLORS.INPUT_LABEL};\n  text-transform: capitalize;\n`;\nconst FileUploadContainer = styled.div`\n  display: flex;\n`;\nexport const DeleteIcon = styled.img`\n  margin-left: 20px;\n  user-select: none;\n  object-fit: contain;\n  cursor: pointer;\n`;\nconst FileUploadBox = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst HeadingContainer = styled.div`\n  padding-top: 30px;\n  padding-bottom: 20px;\n  padding-left: 38px;\n  display: flex;\n  /* justify-content: center; */\n  align-items: center;\n  position: relative;\n  border-bottom: 1px solid ${COLORS.BTN_GREEN};\n  background-color: ${COLORS.BTN_GREEN};\n`;\nconst CloseModal = styled.img`\n  width: 14px;\n  height: 14px;\n  object-fit: contain;\n  cursor: pointer;\n  position: absolute;\n  left: 15px;\n`;\nconst Heading = styled.h3`\n  margin: 0;\n  padding: 10px;\n  font-size: 18px;\n  font-weight: 800;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: center;\n`;\nconst AgentFormContainer = styled.div`\n  padding-top: 26px;\n  padding-left: 28px;\n  padding-right: 94px;\n  padding-bottom: 26px;\n  & form {\n    padding-top: 10px;\n  }\n`;","map":{"version":3,"sources":["/home/justact/customes_lap/src/Pages/NameSegment.js"],"names":["React","useState","Drawer","styled","COLORS","CustomInputField","theme","CustomSelect","NameType","Formik","FormField","FormLabel","NameSegment","open","setOpen","name","setName","segName","setSegName","onFormSubmit","values","console","log","handleDeleteVideo","index","tutorialUrl","setFieldValue","length","filtered","filter","v","idx","initialState","first_name","last_name","formValues","setFormValues","handleChange","i","e","newFormValues","target","value","addFormFields","removeFormFields","splice","handleSubmit","event","preventDefault","alert","JSON","stringify","require","segment_name","schema","errors","touched","handleBlur","label","type","required","placeholder","lineHeight","map","element","DrawerContainer","div","Row","breakpoints","sm_up","StyledForm","form","Label","COLOR_DARK","BasicDetailsLabel","INPUT_LABEL","FileUploadContainer","DeleteIcon","img","FileUploadBox","HeadingContainer","BTN_GREEN","CloseModal","Heading","h3","AgentFormContainer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Drawer } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport COLORS from \"../assets/Colors\";\nimport { CustomInputField } from \"../common/FormInput\";\nimport theme from \"../assets/theme\";\nimport CustomSelect from \"../internel/CustomSelect\";\nimport { NameType } from \"../Helpers/constants\";\nimport { Formik } from \"formik\";\nimport FormField from \"../common/FormField\";\nimport { FormLabel } from \"@material-ui/core\";\n\nexport default function NameSegment({ open, setOpen }) {\n  const [name, setName] = useState(\"\");\n  const [segName, setSegName] = useState(\"\");\n\n  const onFormSubmit = values => {\n    //   onSubmit(postData, modal?.data);\n    console.log(\"values\", values);\n  };\n\n  const handleDeleteVideo = (index, tutorialUrl, setFieldValue) => {\n    if (tutorialUrl?.length) {\n      const filtered = tutorialUrl.filter((v, idx) => idx !== index);\n      setFieldValue(\"tutorialUrl\", filtered);\n    }\n  };\n\n  const initialState = {\n    first_name: \"\",\n    last_name: \"\"\n  };\n\n  const [formValues, setFormValues] = useState([\n    { first_name: \"\", last_name: \"\" }\n  ]);\n\n  const handleChange = (i, e) => {\n    let newFormValues = [...formValues];\n    newFormValues[i][e.target.name] = e.target.value;\n    setFormValues(newFormValues);\n  };\n\n  const addFormFields = () => {\n    setFormValues([...formValues, { first_name: \"\", last_name: \"\" }]);\n  };\n\n  const removeFormFields = i => {\n    let newFormValues = [...formValues];\n    newFormValues.splice(i, 1);\n    setFormValues(newFormValues);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    alert(JSON.stringify(formValues));\n  };\n\n  return (\n    <Drawer anchor=\"right\" open={open}>\n      <DrawerContainer role=\"presentation\">\n        <HeadingContainer>\n          <Heading>Name Segment</Heading>\n          <CloseModal\n            onClick={() => setOpen(false)}\n            src={require(\"../assets/images/ArrowBack.png\")}\n          />\n        </HeadingContainer>\n        <AgentFormContainer>\n          <Formik\n            initialValues={{\n              segment_name: name,\n              schema: [{ first_name: \"\", last_name: \"\" }]\n            }}\n            // validationSchema={AddZoomLinkValidation}\n            onSubmit={onFormSubmit}\n            validateOnBlur\n            validateOnChange\n          >\n            {({\n              values,\n              handleChange,\n              errors,\n              handleSubmit,\n              touched,\n              handleBlur,\n              setFieldValue\n            }) => (\n              <StyledForm onSubmit={handleSubmit}>\n                <div className=\"link-container\">\n                  <FormField\n                    input={{\n                      name: \"segment_name\",\n                      label: \"Enter the Name of the Segment\",\n                      type: \"text\",\n                      required: true,\n                      placeholder: \"Name of the Segment\"\n                    }}\n                    {...{\n                      touched,\n                      errors,\n                      values,\n                      handleChange,\n                      handleBlur\n                    }}\n                  />\n                  <Label style={{ lineHeight: 5.7 }}>\n                    To Save Your Segment. you need to add the schemas to build\n                    the query\n                  </Label>\n                  {formValues.map((element, index) => (\n                    <div className=\"form-inline\" key={index}>\n                      <CustomSelect\n                        menuItemValues={NameType}\n                        // value={element.first_name ? first_name : last_name}\n                        // name={first_name ? first_name : last_name}\n                      />\n                      {index ? (\n                        <DeleteIcon\n                          src={require(\"../assets/images/removeIcon.svg\")}\n                          onClick={() => removeFormFields(index)}\n                        />\n                      ) : null}\n                    </div>\n                  ))}\n                  <button\n                    className=\"button add\"\n                    type=\"button\"\n                    onClick={() => addFormFields()}\n                  >\n                    Add\n                  </button>\n                </div>\n                <button onClick={handleSubmit}>Add Segment</button>\n              </StyledForm>\n            )}\n          </Formik>\n          {/* <Label>Enter the Name of the Segment</Label>\n          <CustomInputField\n            variant=\"outlined\"\n            value={name}\n            required={true}\n            onChange={e => setName(e.target.value)}\n          />\n          <Label style={{ lineHeight: 5.7 }}>\n            To Save Your Segment. you need to add the schemas to build the query\n          </Label>\n          <CustomSelect\n            menuItemValues={NameType}\n            name={segName}\n            value={segName}\n            onChange={e => setSegName(e.target.value)}\n          /> */}\n        </AgentFormContainer>\n      </DrawerContainer>\n    </Drawer>\n  );\n}\n\nconst DrawerContainer = styled.div`\n  width: 600px;\n  height: 100%;\n  background-color: white;\n  outline: none;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  @media ${theme?.breakpoints?.sm_up} {\n    width: auto;\n  }\n`;\n\nconst StyledForm = styled.form`\n  width: 100%;\n`;\n\nconst Label = styled.div`\n  font-size: 10px;\n  line-height: 3.7;\n  text-transform: uppercase;\n  color: ${COLORS.COLOR_DARK};\n`;\n\nexport const BasicDetailsLabel = styled.div`\n  font-size: 10px;\n  line-height: 1.7;\n  color: ${COLORS.INPUT_LABEL};\n  text-transform: capitalize;\n`;\n\nconst FileUploadContainer = styled.div`\n  display: flex;\n`;\n\nexport const DeleteIcon = styled.img`\n  margin-left: 20px;\n  user-select: none;\n  object-fit: contain;\n  cursor: pointer;\n`;\n\nconst FileUploadBox = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst HeadingContainer = styled.div`\n  padding-top: 30px;\n  padding-bottom: 20px;\n  padding-left: 38px;\n  display: flex;\n  /* justify-content: center; */\n  align-items: center;\n  position: relative;\n  border-bottom: 1px solid ${COLORS.BTN_GREEN};\n  background-color: ${COLORS.BTN_GREEN};\n`;\n\nconst CloseModal = styled.img`\n  width: 14px;\n  height: 14px;\n  object-fit: contain;\n  cursor: pointer;\n  position: absolute;\n  left: 15px;\n`;\n\nconst Heading = styled.h3`\n  margin: 0;\n  padding: 10px;\n  font-size: 18px;\n  font-weight: 800;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: center;\n`;\n\nconst AgentFormContainer = styled.div`\n  padding-top: 26px;\n  padding-left: 28px;\n  padding-right: 94px;\n  padding-bottom: 26px;\n  & form {\n    padding-top: 10px;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}