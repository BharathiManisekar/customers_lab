{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/CreateCase/index.js\";\nimport { useMediaQuery, useTheme } from \"@material-ui/core\";\nimport { navigate, useLocation } from \"@reach/router\";\nimport { Formik, yupToFormErrors } from \"formik\";\nimport _ from \"lodash\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport labels from \"../../../../src/helpers/labels.json\";\nimport theme from \"../../../assets/theme\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport { getErrorMessage, getFileName } from \"../../../helpers/functions\";\nimport { CreateCaseStep1Schema } from \"../../../helpers/validationSchema\";\nimport useCartCount from \"../../../hooks/useCartCount\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport AWSService from \"../../../services/AWSService\";\nimport CaseService from \"../../../services/CaseService\";\nimport PartyService from \"../../../services/PartyService\";\nimport ActionBar from \"../../common/ActionBar\";\nimport AlertDialog from \"../../common/Alert\";\nimport FormField from \"../../common/FormField/FormField\";\nimport { CustomFileUpload } from \"../../common/FormInputs\";\nimport { HyperLink } from \"../../common/styled-components\";\nimport AdditionalMediator from \"./components/AdditionalMediator\";\nimport CaseActionCTA from \"./components/CaseActionCTA\";\nimport CaseHeader from \"./components/CaseHeader\";\nimport CaseTypeRadioButton from \"./components/CaseTypeRadioButton\";\nimport MultipleUpload from \"./components/MultipleUpload\";\nimport PartySelect from \"./components/PartySelect\";\nimport TotalClaimValue from \"./components/TotalClaimValue\";\nimport { setInitalFormValue, setPostPayload } from \"./function\";\nimport { Container, CreateCaseContainer, H2, StyledForm, StyledFormElementsWrapper, StyledLabel, StyledLabelNote } from \"./Styles\";\nconst inputs = [{\n  type: \"textarea\",\n  name: \"description\",\n  label: \"Case Description\",\n  required: true\n}];\n\nconst Index = ({\n  caseId\n}) => {\n  const [menuItems, setMenuItems] = useState([]);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    setLoader\n  } = useLoader();\n  const {\n    setTriggerCount\n  } = useCartCount();\n  const location = useLocation();\n  const [dialogData, setDialogData] = useState(false);\n  const [open, setOpen] = useState(false);\n  const searchParams = new URLSearchParams(location.search);\n  const themes = useTheme();\n  const isBigScreen = useMediaQuery(themes.breakpoints.up(640));\n  const breadcrumbs = [\"My Cases\", \"Create New Case\"];\n  const [caseObj, setCaseObj] = useState({});\n  useEffect(() => {\n    async function getCase(caseId) {\n      try {\n        setLoader({\n          state: true\n        });\n        const response = await CaseService.getCase(caseId);\n\n        if (response) {\n          setCaseObj(response);\n        }\n      } catch (error) {} finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n\n    if (caseId) {\n      getCase(caseId);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [caseId]);\n  useEffect(() => {\n    async function getParties(params) {\n      try {\n        var _response$data;\n\n        setLoader({\n          state: true\n        });\n        const response = await PartyService.getParties(\"?perPage=50&status=active\");\n\n        if (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) {\n          setMenuItems(response.data.map(({\n            name,\n            id\n          }) => ({\n            label: name,\n            value: id\n          })));\n        } else {\n          enqueueSnackbar(\"You need to create a party inorder to create a case\", {\n            variant: \"error\",\n            autoHideDuration: 3000\n          });\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n      } finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n\n    getParties(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onBreadcrumbClick = selected => {\n    switch (_.snakeCase(selected)) {\n      case \"my_cases\":\n        navigate(\"/dashboard/cases\");\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSuccess = (response, draft) => {\n    var _response$case;\n\n    if (response === null || response === void 0 ? void 0 : (_response$case = response.case) === null || _response$case === void 0 ? void 0 : _response$case.id) {\n      setTriggerCount(true);\n\n      if (draft) {\n        var _response$case2;\n\n        enqueueSnackbar(\"Case added to draft successfully\", {\n          variant: \"success\"\n        });\n        navigate(`/dashboard/cases?caseType=${response === null || response === void 0 ? void 0 : (_response$case2 = response.case) === null || _response$case2 === void 0 ? void 0 : _response$case2.resolutionKind}`);\n      } else {\n        var _response$case3;\n\n        navigate(`/dashboard/cases/create/${response.case.id}/step-2?caseType=${response === null || response === void 0 ? void 0 : (_response$case3 = response.case) === null || _response$case3 === void 0 ? void 0 : _response$case3.resolutionKind}`);\n      }\n    }\n  };\n\n  const handleDeleteAgreement = (index, agreement_urls, setFieldValue) => {\n    if (agreement_urls === null || agreement_urls === void 0 ? void 0 : agreement_urls.length) {\n      const filtered = agreement_urls.filter((v, idx) => idx !== index);\n      setFieldValue(\"agreement_urls\", filtered);\n    }\n  };\n\n  async function onFormSubmit(params, props, isDraft = false) {\n    try {\n      var _payload, _payload$requestedMed, _payload2, _payload2$requestedMe, _payload2$requestedMe2;\n\n      setLoader({\n        state: true,\n        message: \"submitting form...\"\n      });\n      let payload = { ...params\n      };\n      payload = setPostPayload(payload);\n      const hasDuplication = ((_payload = payload) === null || _payload === void 0 ? void 0 : (_payload$requestedMed = _payload.requestedMediators) === null || _payload$requestedMed === void 0 ? void 0 : _payload$requestedMed.length) && ((_payload2 = payload) === null || _payload2 === void 0 ? void 0 : (_payload2$requestedMe = _payload2.requestedMediators) === null || _payload2$requestedMe === void 0 ? void 0 : (_payload2$requestedMe2 = _payload2$requestedMe.filter((mediator, index) => {\n        var _payload3, _payload3$requestedMe;\n\n        return ((_payload3 = payload) === null || _payload3 === void 0 ? void 0 : (_payload3$requestedMe = _payload3.requestedMediators) === null || _payload3$requestedMe === void 0 ? void 0 : _payload3$requestedMe.findIndex(el => (el === null || el === void 0 ? void 0 : el.email) === (mediator === null || mediator === void 0 ? void 0 : mediator.email))) !== index;\n      })) === null || _payload2$requestedMe2 === void 0 ? void 0 : _payload2$requestedMe2.length);\n\n      if (hasDuplication) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"Duplicate email IDs found in Mediators\";\n      }\n\n      if (caseId) {\n        const response = await CaseService.updateDraft(payload, caseId, params.claimantPartyId);\n        handleSuccess(response, isDraft);\n      } else {\n        const response = await CaseService.createCase(payload, params.claimantPartyId);\n        handleSuccess(response, isDraft);\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n    }\n  }\n  /**\n   * @description Function to trigger the delete case\n   * @param {*} param0\n   */\n\n\n  const deleteDraft = async id => {\n    try {\n      setLoader({\n        state: true,\n        message: \"Deleting Cases...\"\n      });\n      const res = await CaseService.deleteDraftCase(id);\n\n      if (res === null || res === void 0 ? void 0 : res.message) {\n        enqueueSnackbar(res === null || res === void 0 ? void 0 : res.message, {\n          variant: \"success\"\n        });\n\n        if ((caseObj === null || caseObj === void 0 ? void 0 : caseObj.resolutionKind) === \"mediation\") {\n          navigate(\"/dashboard/cases?caseType=mediation\");\n        } else {\n          navigate(\"/dashboard/cases?caseType=negotiation\");\n        }\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n      setOpen(false);\n    }\n  };\n  /**\n   * @description Function to show the delete warning\n   * @param {*} id\n   */\n\n\n  const deleteWaring = id => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Proceed\",\n      secondaryBtnText: \"Cancel\",\n      clickPrimaryBtn: () => deleteDraft(id),\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to delete this draft case?`,\n      heading: \"Delete Case\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold\n      }\n    });\n  };\n  /**\n   * @description Function to reset the values\n   * @param {*} setFieldValue\n   */\n\n\n  const resetValuewhenCaseTypeChanges = (setFieldValue, type, values) => {\n    var _values$requestedMedi;\n\n    if (values === null || values === void 0 ? void 0 : (_values$requestedMedi = values.requestedMediators) === null || _values$requestedMedi === void 0 ? void 0 : _values$requestedMedi.length) {\n      if (type === \"mediation\") {\n        setFieldValue(\"requestedMediators\", [values === null || values === void 0 ? void 0 : values.requestedMediators[0]]);\n      } else if (type === \"negotiation\") {\n        setFieldValue(\"requestedMediators\", []);\n      }\n    }\n\n    if (type === \"negotiation\") {\n      setFieldValue(\"subscriptionKind\", \"normal\");\n    }\n  };\n  /**\n   * @description Function to open the confirmation popup when switch case radio buttons\n   * @param {*} value\n   * @param {*} setFieldValue\n   * @param {*} name\n   */\n\n\n  const openConfirmationPopUp = (value, setFieldValue, name, values) => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Yes\",\n      secondaryBtnText: \"No\",\n      clickPrimaryBtn: () => {\n        setFieldValue(name, value);\n        resetValuewhenCaseTypeChanges(setFieldValue, value, values);\n        setOpen(false);\n      },\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to switch to ${_.capitalize(value)}?`,\n      heading: \"Confirmation\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold\n      }\n    });\n  };\n\n  async function s3Upload(file, field, setFieldValue, setFieldError) {\n    if (file) {\n      try {\n        setLoader({\n          state: true,\n          message: `Uploading file: ${file.name} ...`\n        });\n        const payload = {\n          key: file.name\n        };\n        const s3Response = await AWSService.getS3URL(payload);\n\n        if (s3Response.url) {\n          const res = await AWSService.uploadToS3(s3Response.url, file);\n          setFieldValue(field, res);\n          enqueueSnackbar(\"Successfully Uploaded\", {\n            variant: \"success\"\n          });\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        setFieldError(field, \"Could not upload this file\");\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n      } finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ActionBar, {\n    breadcrumbs,\n    onBreadcrumbClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CreateCaseContainer, {\n    className: \"CreateCase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: setInitalFormValue(caseObj, menuItems, searchParams),\n    validate: values => {\n      try {\n        CreateCaseStep1Schema.validateSync(values, {\n          abortEarly: false,\n          values\n        });\n      } catch (e) {\n        return yupToFormErrors(e);\n      }\n    },\n    enableReinitialize: true,\n    onSubmit: onFormSubmit,\n    validateOnBlur: true,\n    validateOnChange: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    handleChange,\n    errors,\n    handleSubmit,\n    touched,\n    handleBlur,\n    setFieldValue,\n    setFieldError,\n    setFieldTouched\n  }) => /*#__PURE__*/React.createElement(StyledForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CaseHeader, {\n    resolutionKind: values === null || values === void 0 ? void 0 : values.resolutionKind,\n    onClick: () => deleteWaring(caseId),\n    showDelete: !!caseId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(H2, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 15\n    }\n  }, \"Enter Case Details\"), /*#__PURE__*/React.createElement(CaseTypeRadioButton, {\n    values: values,\n    handleChange: (e, type) => {\n      if (caseId) {\n        var _e$target;\n\n        openConfirmationPopUp(e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value, setFieldValue, type, values);\n      } else {\n        handleChange(e);\n      }\n    },\n    resolutionKind: values.resolutionKind,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 15\n    }\n  }), (values === null || values === void 0 ? void 0 : values.resolutionKind) === \"arbitration\" && /*#__PURE__*/React.createElement(StyledFormElementsWrapper, {\n    style: {\n      marginBottom: 13\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StyledLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 19\n    }\n  }, \"Have you sent the notice of arbitration? If yes, upload the file. If no, download the template, send it to the respondent and upload the file\"), /*#__PURE__*/React.createElement(CustomFileUpload, {\n    error: (touched === null || touched === void 0 ? void 0 : touched.arbitrationNotice) && (errors === null || errors === void 0 ? void 0 : errors.arbitrationNotice),\n    setFile: file => s3Upload(file, `arbitrationNotice`, setFieldValue, setFieldError),\n    style: {\n      marginTop: 10,\n      width: \"100%\"\n    },\n    accept: \".pdf, .mp3, .mp4, .docx, image/*\",\n    file: {\n      name: getFileName(values === null || values === void 0 ? void 0 : values.arbitrationNotice)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(HyperLink, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    },\n    onClick: () => window.open(\"https://justact-api-uploads.s3.ap-south-1.amazonaws.com/160/1633000323853-2beda7f9-27e2-4b81-82fb-66418bbed710/Notice%20of%20Arbitration.docx\", \"_blank\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 21\n    }\n  }, \"Please download the template.\"))), /*#__PURE__*/React.createElement(PartySelect, {\n    values,\n    handleChange,\n    handleSubmit,\n    errors,\n    touched,\n    handleBlur,\n    setFieldValue,\n    menuItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 15\n    }\n  }), inputs.map((input, key) => /*#__PURE__*/React.createElement(StyledFormElementsWrapper, {\n    style: {\n      marginBottom: 15\n    },\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    white: true,\n    input,\n    key,\n    values,\n    handleChange,\n    errors,\n    handleSubmit,\n    touched,\n    handleBlur,\n    setFieldValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(TotalClaimValue, {\n    ressolutionKind: values.resolutionKind,\n    values: values.totalClaimValue,\n    handleChange: handleChange,\n    errors,\n    onBlur: _ => {\n      setFieldTouched(`totalClaimValue`, true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(StyledFormElementsWrapper, {\n    style: {\n      marginBottom: 13\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 15\n    }\n  }, (values === null || values === void 0 ? void 0 : values.resolutionKind) === \"mediation\" ? /*#__PURE__*/React.createElement(StyledLabelNote, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 19\n    }\n  }, \"Note: The\", \" \", (values === null || values === void 0 ? void 0 : values.resolutionKind) === \"negotiation\" ? labels[\"resolution.negotiation\"] : (values === null || values === void 0 ? void 0 : values.document_kind) === \"mediation\" ? _.upperCase(values === null || values === void 0 ? void 0 : values.resolutionKind) : _.capitalize(values === null || values === void 0 ? void 0 : values.resolutionKind), \" \", \"process is completely confidential and the evidence submitted are not admissible in the court\") : \"\"), /*#__PURE__*/React.createElement(MultipleUpload, {\n    values: values,\n    setFieldValue: setFieldValue,\n    getFileName: getFileName,\n    setFieldError: setFieldError,\n    handleDeleteAgreement: handleDeleteAgreement,\n    touched: touched,\n    errors: errors,\n    menuItems: caseDocumentType,\n    handleBlur: handleBlur,\n    s3Upload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(AdditionalMediator, {\n    values,\n    setFieldValue,\n    touched,\n    errors,\n    handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CaseActionCTA, {\n    isBigScreen: isBigScreen,\n    onClick: () => onFormSubmit(values, null, true),\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(AlertDialog, Object.assign({\n    isOpen: open\n  }, dialogData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/CreateCase/index.js"],"names":["useMediaQuery","useTheme","navigate","useLocation","Formik","yupToFormErrors","_","useSnackbar","React","useEffect","useState","labels","theme","caseDocumentType","getErrorMessage","getFileName","CreateCaseStep1Schema","useCartCount","useLoader","AWSService","CaseService","PartyService","ActionBar","AlertDialog","FormField","CustomFileUpload","HyperLink","AdditionalMediator","CaseActionCTA","CaseHeader","CaseTypeRadioButton","MultipleUpload","PartySelect","TotalClaimValue","setInitalFormValue","setPostPayload","Container","CreateCaseContainer","H2","StyledForm","StyledFormElementsWrapper","StyledLabel","StyledLabelNote","inputs","type","name","label","required","Index","caseId","menuItems","setMenuItems","enqueueSnackbar","setLoader","setTriggerCount","location","dialogData","setDialogData","open","setOpen","searchParams","URLSearchParams","search","themes","isBigScreen","breakpoints","up","breadcrumbs","caseObj","setCaseObj","getCase","state","response","error","getParties","params","data","length","map","id","value","variant","autoHideDuration","message","onBreadcrumbClick","selected","snakeCase","handleSuccess","draft","case","resolutionKind","handleDeleteAgreement","index","agreement_urls","setFieldValue","filtered","filter","v","idx","onFormSubmit","props","isDraft","payload","hasDuplication","requestedMediators","mediator","findIndex","el","email","updateDraft","claimantPartyId","createCase","deleteDraft","res","deleteDraftCase","deleteWaring","primaryBtnText","secondaryBtnText","clickPrimaryBtn","clickSecondarybtn","desc","heading","descriptionTextStyle","textAlign","fontFamily","fonts","primaryFontSemiBold","resetValuewhenCaseTypeChanges","values","openConfirmationPopUp","capitalize","s3Upload","file","field","setFieldError","key","s3Response","getS3URL","url","uploadToS3","validateSync","abortEarly","e","handleChange","errors","handleSubmit","touched","handleBlur","setFieldTouched","target","marginBottom","arbitrationNotice","marginTop","width","display","justifyContent","window","input","totalClaimValue","document_kind","upperCase"],"mappings":"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","sourcesContent":["import { useMediaQuery, useTheme } from \"@material-ui/core\";\nimport { navigate, useLocation } from \"@reach/router\";\nimport { Formik, yupToFormErrors } from \"formik\";\nimport _ from \"lodash\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport labels from \"../../../../src/helpers/labels.json\";\nimport theme from \"../../../assets/theme\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport { getErrorMessage, getFileName } from \"../../../helpers/functions\";\nimport { CreateCaseStep1Schema } from \"../../../helpers/validationSchema\";\nimport useCartCount from \"../../../hooks/useCartCount\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport AWSService from \"../../../services/AWSService\";\nimport CaseService from \"../../../services/CaseService\";\nimport PartyService from \"../../../services/PartyService\";\nimport ActionBar from \"../../common/ActionBar\";\nimport AlertDialog from \"../../common/Alert\";\nimport FormField from \"../../common/FormField/FormField\";\nimport { CustomFileUpload } from \"../../common/FormInputs\";\nimport { HyperLink } from \"../../common/styled-components\";\nimport AdditionalMediator from \"./components/AdditionalMediator\";\nimport CaseActionCTA from \"./components/CaseActionCTA\";\nimport CaseHeader from \"./components/CaseHeader\";\nimport CaseTypeRadioButton from \"./components/CaseTypeRadioButton\";\nimport MultipleUpload from \"./components/MultipleUpload\";\nimport PartySelect from \"./components/PartySelect\";\nimport TotalClaimValue from \"./components/TotalClaimValue\";\nimport { setInitalFormValue, setPostPayload } from \"./function\";\nimport {\n  Container,\n  CreateCaseContainer,\n  H2,\n  StyledForm,\n  StyledFormElementsWrapper,\n  StyledLabel,\n  StyledLabelNote,\n} from \"./Styles\";\n\nconst inputs = [\n  {\n    type: \"textarea\",\n    name: \"description\",\n    label: \"Case Description\",\n    required: true,\n  },\n];\n\nconst Index = ({ caseId }) => {\n  const [menuItems, setMenuItems] = useState([]);\n  const { enqueueSnackbar } = useSnackbar();\n  const { setLoader } = useLoader();\n  const { setTriggerCount } = useCartCount();\n  const location = useLocation();\n  const [dialogData, setDialogData] = useState(false);\n  const [open, setOpen] = useState(false);\n  const searchParams = new URLSearchParams(location.search);\n  const themes = useTheme();\n  const isBigScreen = useMediaQuery(themes.breakpoints.up(640));\n  const breadcrumbs = [\"My Cases\", \"Create New Case\"];\n\n  const [caseObj, setCaseObj] = useState({});\n  useEffect(() => {\n    async function getCase(caseId) {\n      try {\n        setLoader({ state: true });\n        const response = await CaseService.getCase(caseId);\n        if (response) {\n          setCaseObj(response);\n        }\n      } catch (error) {\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n    if (caseId) {\n      getCase(caseId);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [caseId]);\n\n  useEffect(() => {\n    async function getParties(params) {\n      try {\n        setLoader({ state: true });\n        const response = await PartyService.getParties(\n          \"?perPage=50&status=active\"\n        );\n        if (response?.data?.length) {\n          setMenuItems(\n            response.data.map(({ name, id }) => ({ label: name, value: id }))\n          );\n        } else {\n          enqueueSnackbar(\n            \"You need to create a party inorder to create a case\",\n            {\n              variant: \"error\",\n              autoHideDuration: 3000,\n            }\n          );\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\",\n        });\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n    getParties();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onBreadcrumbClick = (selected) => {\n    switch (_.snakeCase(selected)) {\n      case \"my_cases\":\n        navigate(\"/dashboard/cases\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSuccess = (response, draft) => {\n    if (response?.case?.id) {\n      setTriggerCount(true);\n      if (draft) {\n        enqueueSnackbar(\"Case added to draft successfully\", {\n          variant: \"success\",\n        });\n        navigate(`/dashboard/cases?caseType=${response?.case?.resolutionKind}`);\n      } else {\n        navigate(\n          `/dashboard/cases/create/${response.case.id}/step-2?caseType=${response?.case?.resolutionKind}`\n        );\n      }\n    }\n  };\n\n  const handleDeleteAgreement = (index, agreement_urls, setFieldValue) => {\n    if (agreement_urls?.length) {\n      const filtered = agreement_urls.filter((v, idx) => idx !== index);\n      setFieldValue(\"agreement_urls\", filtered);\n    }\n  };\n\n  async function onFormSubmit(params, props, isDraft = false) {\n    try {\n      setLoader({ state: true, message: \"submitting form...\" });\n      let payload = { ...params };\n      payload = setPostPayload(payload);\n      const hasDuplication =\n        payload?.requestedMediators?.length &&\n        payload?.requestedMediators?.filter(\n          (mediator, index) =>\n            payload?.requestedMediators?.findIndex(\n              (el) => el?.email === mediator?.email\n            ) !== index\n        )?.length;\n      if (hasDuplication) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"Duplicate email IDs found in Mediators\";\n      }\n      if (caseId) {\n        const response = await CaseService.updateDraft(\n          payload,\n          caseId,\n          params.claimantPartyId\n        );\n        handleSuccess(response, isDraft);\n      } else {\n        const response = await CaseService.createCase(\n          payload,\n          params.claimantPartyId\n        );\n        handleSuccess(response, isDraft);\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\",\n      });\n    } finally {\n      setLoader({ state: false });\n    }\n  }\n\n  /**\n   * @description Function to trigger the delete case\n   * @param {*} param0\n   */\n  const deleteDraft = async (id) => {\n    try {\n      setLoader({ state: true, message: \"Deleting Cases...\" });\n      const res = await CaseService.deleteDraftCase(id);\n      if (res?.message) {\n        enqueueSnackbar(res?.message, {\n          variant: \"success\",\n        });\n        if (caseObj?.resolutionKind === \"mediation\") {\n          navigate(\"/dashboard/cases?caseType=mediation\");\n        } else {\n          navigate(\"/dashboard/cases?caseType=negotiation\");\n        }\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\",\n      });\n    } finally {\n      setLoader({ state: false });\n      setOpen(false);\n    }\n  };\n\n  /**\n   * @description Function to show the delete warning\n   * @param {*} id\n   */\n  const deleteWaring = (id) => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Proceed\",\n      secondaryBtnText: \"Cancel\",\n      clickPrimaryBtn: () => deleteDraft(id),\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to delete this draft case?`,\n      heading: \"Delete Case\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold,\n      },\n    });\n  };\n\n  /**\n   * @description Function to reset the values\n   * @param {*} setFieldValue\n   */\n  const resetValuewhenCaseTypeChanges = (setFieldValue, type, values) => {\n    if (values?.requestedMediators?.length) {\n      if (type === \"mediation\") {\n        setFieldValue(\"requestedMediators\", [values?.requestedMediators[0]]);\n      } else if (type === \"negotiation\") {\n        setFieldValue(\"requestedMediators\", []);\n      }\n    }\n    if (type === \"negotiation\") {\n      setFieldValue(\"subscriptionKind\", \"normal\");\n    }\n  };\n\n  /**\n   * @description Function to open the confirmation popup when switch case radio buttons\n   * @param {*} value\n   * @param {*} setFieldValue\n   * @param {*} name\n   */\n  const openConfirmationPopUp = (value, setFieldValue, name, values) => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Yes\",\n      secondaryBtnText: \"No\",\n      clickPrimaryBtn: () => {\n        setFieldValue(name, value);\n        resetValuewhenCaseTypeChanges(setFieldValue, value, values);\n        setOpen(false);\n      },\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to switch to ${_.capitalize(value)}?`,\n      heading: \"Confirmation\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold,\n      },\n    });\n  };\n\n  async function s3Upload(file, field, setFieldValue, setFieldError) {\n    if (file) {\n      try {\n        setLoader({ state: true, message: `Uploading file: ${file.name} ...` });\n        const payload = {\n          key: file.name,\n        };\n        const s3Response = await AWSService.getS3URL(payload);\n        if (s3Response.url) {\n          const res = await AWSService.uploadToS3(s3Response.url, file);\n          setFieldValue(field, res);\n          enqueueSnackbar(\"Successfully Uploaded\", { variant: \"success\" });\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        setFieldError(field, \"Could not upload this file\");\n        enqueueSnackbar(message, { variant: \"error\" });\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n  }\n\n  return (\n    <Container>\n      <ActionBar {...{ breadcrumbs, onBreadcrumbClick }} />\n      <CreateCaseContainer className=\"CreateCase\">\n        <Formik\n          initialValues={setInitalFormValue(caseObj, menuItems, searchParams)}\n          validate={(values) => {\n            try {\n              CreateCaseStep1Schema.validateSync(values, {\n                abortEarly: false,\n                values,\n              });\n            } catch (e) {\n              return yupToFormErrors(e);\n            }\n          }}\n          enableReinitialize\n          onSubmit={onFormSubmit}\n          validateOnBlur\n          validateOnChange\n        >\n          {({\n            values,\n            handleChange,\n            errors,\n            handleSubmit,\n            touched,\n            handleBlur,\n            setFieldValue,\n            setFieldError,\n            setFieldTouched,\n          }) => (\n            <StyledForm>\n              {/* header part */}\n              <CaseHeader\n                resolutionKind={values?.resolutionKind}\n                onClick={() => deleteWaring(caseId)}\n                showDelete={!!caseId}\n              />\n              <H2>Enter Case Details</H2>\n              {/* radio button */}\n              <CaseTypeRadioButton\n                values={values}\n                handleChange={(e, type) => {\n                  if (caseId) {\n                    openConfirmationPopUp(\n                      e?.target?.value,\n                      setFieldValue,\n                      type,\n                      values\n                    );\n                  } else {\n                    handleChange(e);\n                  }\n                }}\n                resolutionKind={values.resolutionKind}\n              />\n\n              {values?.resolutionKind === \"arbitration\" && (\n                <StyledFormElementsWrapper style={{ marginBottom: 13 }}>\n                  <StyledLabel>\n                    Have you sent the notice of arbitration? If yes, upload the\n                    file. If no, download the template, send it to the\n                    respondent and upload the file\n                  </StyledLabel>\n                  <CustomFileUpload\n                    error={\n                      touched?.arbitrationNotice && errors?.arbitrationNotice\n                    }\n                    setFile={(file) =>\n                      s3Upload(\n                        file,\n                        `arbitrationNotice`,\n                        setFieldValue,\n                        setFieldError\n                      )\n                    }\n                    style={{\n                      marginTop: 10,\n                      width: \"100%\",\n                    }}\n                    accept=\".pdf, .mp3, .mp4, .docx, image/*\"\n                    file={{ name: getFileName(values?.arbitrationNotice) }}\n                  />\n                  <div className=\"template\">\n                    <HyperLink\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"flex-end\",\n                      }}\n                      onClick={() =>\n                        window.open(\n                          \"https://justact-api-uploads.s3.ap-south-1.amazonaws.com/160/1633000323853-2beda7f9-27e2-4b81-82fb-66418bbed710/Notice%20of%20Arbitration.docx\",\n                          \"_blank\"\n                        )\n                      }\n                    >\n                      Please download the template.\n                    </HyperLink>\n                  </div>\n                </StyledFormElementsWrapper>\n              )}\n\n              {/* drop down select claimant party */}\n              <PartySelect\n                {...{\n                  values,\n                  handleChange,\n                  handleSubmit,\n                  errors,\n                  touched,\n                  handleBlur,\n                  setFieldValue,\n                  menuItems,\n                }}\n              />\n\n              {/* Case description box */}\n              {inputs.map((input, key) => (\n                <StyledFormElementsWrapper\n                  style={{ marginBottom: 15 }}\n                  key={key}\n                >\n                  <FormField\n                    white\n                    {...{\n                      input,\n                      key,\n                      values,\n                      handleChange,\n                      errors,\n                      handleSubmit,\n                      touched,\n                      handleBlur,\n                      setFieldValue,\n                    }}\n                  />\n                </StyledFormElementsWrapper>\n              ))}\n\n              {/* claimvalue */}\n              <TotalClaimValue\n                ressolutionKind={values.resolutionKind}\n                values={values.totalClaimValue}\n                handleChange={handleChange}\n                {...{ errors }}\n                onBlur={(_) => {\n                  setFieldTouched(`totalClaimValue`, true);\n                }}\n              />\n\n              {/* note */}\n              <StyledFormElementsWrapper style={{ marginBottom: 13 }}>\n                {values?.resolutionKind === \"mediation\" ? (\n                  <StyledLabelNote>\n                    Note: The{\" \"}\n                    {values?.resolutionKind === \"negotiation\"\n                      ? labels[\"resolution.negotiation\"]\n                      : values?.document_kind === \"mediation\"\n                      ? _.upperCase(values?.resolutionKind)\n                      : _.capitalize(values?.resolutionKind)}{\" \"}\n                    process is completely confidential and the evidence\n                    submitted are not admissible in the court\n                  </StyledLabelNote>\n                ) : (\n                  \"\"\n                )}\n                {/* <StyledLabelNote>\n                  Note: The{\" \"}\n                  {values?.resolutionKind === \"negotiation\"\n                    ? labels[\"resolution.negotiation\"]\n                    : values?.document_kind === \"mediation\"\n                    ? _.upperCase(values?.resolutionKind)\n                    : _.capitalize(values?.resolutionKind)}{\" \"}\n                  process is completely confidential and the evidence submitted\n                  are not admissible in the court\n                </StyledLabelNote> */}\n              </StyledFormElementsWrapper>\n\n              {/* multiple upload */}\n              <MultipleUpload\n                values={values}\n                setFieldValue={setFieldValue}\n                getFileName={getFileName}\n                setFieldError={setFieldError}\n                handleDeleteAgreement={handleDeleteAgreement}\n                touched={touched}\n                errors={errors}\n                menuItems={caseDocumentType}\n                handleBlur={handleBlur}\n                {...{ s3Upload }}\n              />\n\n              {/* Additional Mediator for arbitration */}\n              <AdditionalMediator\n                {...{ values, setFieldValue, touched, errors, handleBlur }}\n              />\n              {/* Additional Mediator for arbitration */}\n\n              {/* buttons */}\n              <CaseActionCTA\n                isBigScreen={isBigScreen}\n                onClick={() => onFormSubmit(values, null, true)}\n                handleSubmit={handleSubmit}\n              />\n            </StyledForm>\n          )}\n        </Formik>\n      </CreateCaseContainer>\n      <AlertDialog isOpen={open} {...{ ...dialogData }} />\n    </Container>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}