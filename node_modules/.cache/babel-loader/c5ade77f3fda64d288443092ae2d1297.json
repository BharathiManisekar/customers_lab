{"ast":null,"code":"import AwesomeDebouncePromise from \"awesome-debounce-promise\";\nimport { useState } from \"react\";\nimport useConstant from \"use-constant\";\nimport { useAsync } from \"react-async-hook\";\n\nconst useDebouncedSearch = (searchFunction, timmer = 1500, initialState = undefined) => {\n  // Handle the input text state\n  const [inputText, setInputText] = useState(initialState); // Debounce the original search async function\n\n  const debouncedSearchFunction = useConstant(() => AwesomeDebouncePromise(searchFunction, timmer)); // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n\n  const searchResults = useAsync(async () => {\n    if (typeof inputText === \"string\") return debouncedSearchFunction(inputText);\n  }, [debouncedSearchFunction, inputText]); // Return everything needed for the hook consumer\n\n  return {\n    inputText,\n    setInputText,\n    searchResults\n  };\n};\n\nexport default useDebouncedSearch;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/hooks/useDebounceSearch.js"],"names":["AwesomeDebouncePromise","useState","useConstant","useAsync","useDebouncedSearch","searchFunction","timmer","initialState","undefined","inputText","setInputText","debouncedSearchFunction","searchResults"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,0BAAnC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAEA,MAAMC,kBAAkB,GAAG,CACzBC,cADyB,EAEzBC,MAAM,GAAG,IAFgB,EAGzBC,YAAY,GAAGC,SAHU,KAItB;AACH;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACM,YAAD,CAA1C,CAFG,CAGH;;AACA,QAAMI,uBAAuB,GAAGT,WAAW,CAAC,MAC1CF,sBAAsB,CAACK,cAAD,EAAiBC,MAAjB,CADmB,CAA3C,CAJG,CAQH;AACA;AACA;;AACA,QAAMM,aAAa,GAAGT,QAAQ,CAAC,YAAY;AACzC,QAAI,OAAOM,SAAP,KAAqB,QAAzB,EACE,OAAOE,uBAAuB,CAACF,SAAD,CAA9B;AACH,GAH6B,EAG3B,CAACE,uBAAD,EAA0BF,SAA1B,CAH2B,CAA9B,CAXG,CAgBH;;AACA,SAAO;AACLA,IAAAA,SADK;AAELC,IAAAA,YAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CA1BD;;AA4BA,eAAeR,kBAAf","sourcesContent":["import AwesomeDebouncePromise from \"awesome-debounce-promise\";\nimport { useState } from \"react\";\nimport useConstant from \"use-constant\";\nimport { useAsync } from \"react-async-hook\";\n\nconst useDebouncedSearch = (\n  searchFunction,\n  timmer = 1500,\n  initialState = undefined\n) => {\n  // Handle the input text state\n  const [inputText, setInputText] = useState(initialState);\n  // Debounce the original search async function\n  const debouncedSearchFunction = useConstant(() =>\n    AwesomeDebouncePromise(searchFunction, timmer)\n  );\n\n  // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n  const searchResults = useAsync(async () => {\n    if (typeof inputText === \"string\")\n      return debouncedSearchFunction(inputText);\n  }, [debouncedSearchFunction, inputText]);\n\n  // Return everything needed for the hook consumer\n  return {\n    inputText,\n    setInputText,\n    searchResults,\n  };\n};\n\nexport default useDebouncedSearch;\n"]},"metadata":{},"sourceType":"module"}