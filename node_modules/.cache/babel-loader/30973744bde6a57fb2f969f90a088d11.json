{"ast":null,"code":"import CartService from \"../../../services/CartService\";\nimport { PAYMENT_STATUS_CART } from \"../../../helpers/constants\";\nexport async function addCartItems(cases = []) {\n  const promises = [];\n\n  for (const case_item of cases) {\n    const new_promise = new Promise(async (resolve, reject) => {\n      try {\n        var _PAYMENT_STATUS_CART$;\n\n        const payload = {\n          caseId: case_item.id,\n          feeKind: (_PAYMENT_STATUS_CART$ = PAYMENT_STATUS_CART[case_item === null || case_item === void 0 ? void 0 : case_item.status]) === null || _PAYMENT_STATUS_CART$ === void 0 ? void 0 : _PAYMENT_STATUS_CART$.feeKind\n        };\n        const response = await CartService.createCartItem(payload);\n\n        if (response.cartItem) {\n          resolve(response.cartItem);\n        }\n      } catch (error) {\n        console.log(case_item, error);\n        reject(error);\n      }\n    });\n    promises.push(new_promise);\n  }\n\n  return await Promise.all(promises);\n}\nexport async function addAllCart(except = []) {\n  try {\n    const payload = {\n      exceptCaseIds: except\n    };\n    const response = await CartService.addAllCart(payload);\n\n    if (response.cartItem) {\n      return response.cartItem;\n    }\n  } catch (error) {\n    // console.log(error);\n    throw error;\n  }\n}\nexport async function removeAllCart(except = []) {\n  try {\n    const payload = {\n      exceptCaseIds: except\n    };\n    const response = await CartService.removeAllCart(payload);\n\n    if (response.cartItem) {\n      return response.cartItem;\n    }\n  } catch (error) {\n    console.log(error); // throw error;\n  }\n}\nexport async function removeCartItems(cases = []) {\n  const promises = [];\n\n  for (const case_item of cases) {\n    const new_promise = new Promise(async (resolve, reject) => {\n      try {\n        const response = await CartService.removeCartItem(case_item.id);\n\n        if (response.cartItem) {\n          resolve(response.cartItem);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n    promises.push(new_promise);\n  }\n\n  return await Promise.all(promises);\n}","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/CaseCart/functions.js"],"names":["CartService","PAYMENT_STATUS_CART","addCartItems","cases","promises","case_item","new_promise","Promise","resolve","reject","payload","caseId","id","feeKind","status","response","createCartItem","cartItem","error","console","log","push","all","addAllCart","except","exceptCaseIds","removeAllCart","removeCartItems","removeCartItem"],"mappings":"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","sourcesContent":["import CartService from \"../../../services/CartService\";\nimport { PAYMENT_STATUS_CART } from \"../../../helpers/constants\";\n\nexport async function addCartItems(cases = []) {\n  const promises = [];\n  for (const case_item of cases) {\n    const new_promise = new Promise(async (resolve, reject) => {\n      try {\n        const payload = {\n          caseId: case_item.id,\n          feeKind: PAYMENT_STATUS_CART[case_item?.status]?.feeKind,\n        };\n        const response = await CartService.createCartItem(payload);\n        if (response.cartItem) {\n          resolve(response.cartItem);\n        }\n      } catch (error) {\n        console.log(case_item, error);\n        reject(error);\n      }\n    });\n    promises.push(new_promise);\n  }\n  return await Promise.all(promises);\n}\n\nexport async function addAllCart(except = []) {\n  try {\n    const payload = {\n      exceptCaseIds: except,\n    };\n    const response = await CartService.addAllCart(payload);\n    if (response.cartItem) {\n      return response.cartItem;\n    }\n  } catch (error) {\n    // console.log(error);\n    throw error;\n  }\n}\nexport async function removeAllCart(except = []) {\n  try {\n    const payload = {\n      exceptCaseIds: except,\n    };\n    const response = await CartService.removeAllCart(payload);\n    if (response.cartItem) {\n      return response.cartItem;\n    }\n  } catch (error) {\n    console.log(error);\n    // throw error;\n  }\n}\n\nexport async function removeCartItems(cases = []) {\n  const promises = [];\n  for (const case_item of cases) {\n    const new_promise = new Promise(async (resolve, reject) => {\n      try {\n        const response = await CartService.removeCartItem(case_item.id);\n        if (response.cartItem) {\n          resolve(response.cartItem);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n    promises.push(new_promise);\n  }\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}