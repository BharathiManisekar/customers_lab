{"ast":null,"code":"import axios from \"axios\";\nimport { navigate } from \"@reach/router\";\nconst EXCLUDE_URL = [\"sessions\"];\n/**\n * Create an Axios Client with defaults\n */\n\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_BASE_API_URL,\n  timeout: 30000\n});\n/**\n * Request Wrapper with default success/error actions\n */\n\nconst Api = async (config = {\n  method: \"GET\",\n  data: {},\n  url: \"\"\n}, shouldAppendToken = true) => {\n  // Success\n  const onSuccess = response => {\n    return Promise.resolve(response.data);\n  }; // Error\n\n\n  const onError = error => {\n    if ((error === null || error === void 0 ? void 0 : error.message) === \"Network Error\") {\n      return Promise.reject(\"You have lost Network Connectivity. Please check your Network Settings\");\n    }\n\n    if (error.response.status === 401) {\n      /**\n       * If 401\n       * Clear the token from offline store\n       * and navigate to Initial Stack using Navigation Service\n       */\n      // User.clearToken();\n      if (!EXCLUDE_URL.some(el => el === config.url)) {\n        localStorage.removeItem(\"auth_token\");\n        navigate(\"/un-authorized\");\n      }\n    }\n\n    if (error.response.status === 500) {\n      //navigate(\"/dashboard\");\n      navigate(\"/internal-error\");\n    }\n\n    if (error.response) {\n      // Request was made but server responded with something\n      // other than 2xx\n      return Promise.reject(error.response.data);\n    } else {\n      // Something else happened while setting up the request\n      // triggered the error\n      return Promise.reject(error.message);\n    }\n  }; // Append headers\n\n\n  let headers = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-usage-mode\": \"agent\"\n  }; // Append auth token\n\n  if (shouldAppendToken) {\n    try {\n      const token = await localStorage.getItem(\"auth_token\");\n\n      if (token) {\n        headers[\"Authorization\"] = token;\n      } else {\n        return Promise.reject(\"Auth Token not found\");\n      }\n    } catch (error) {\n      // Token is not found\n      return Promise.reject(error.message);\n    }\n  } // Set headers\n\n\n  axiosClient.defaults.headers = headers; // console.log(\"Request Headers!\", axiosClient.defaults.headers);\n  // console.log(\"Request Configurations!\", config);\n\n  return axiosClient(config).then(onSuccess).catch(onError);\n};\n\nexport default Api;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/api/manager.js"],"names":["axios","navigate","EXCLUDE_URL","axiosClient","create","baseURL","process","env","REACT_APP_BASE_API_URL","timeout","Api","config","method","data","url","shouldAppendToken","onSuccess","response","Promise","resolve","onError","error","message","reject","status","some","el","localStorage","removeItem","headers","Accept","token","getItem","defaults","then","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA,MAAMC,WAAW,GAAG,CAAC,UAAD,CAApB;AAEA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBADU;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAb,CAApB;AAKA;AACA;AACA;;AACA,MAAMC,GAAG,GAAG,OACVC,MAAM,GAAG;AAAEC,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,IAAI,EAAE,EAAvB;AAA2BC,EAAAA,GAAG,EAAE;AAAhC,CADC,EAEVC,iBAAiB,GAAG,IAFV,KAGP;AACH;AACA,QAAMC,SAAS,GAAIC,QAAD,IAAc;AAC9B,WAAOC,OAAO,CAACC,OAAR,CAAgBF,QAAQ,CAACJ,IAAzB,CAAP;AACD,GAFD,CAFG,CAMH;;;AACA,QAAMO,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,OAAP,MAAmB,eAAvB,EAAwC;AACtC,aAAOJ,OAAO,CAACK,MAAR,CACL,wEADK,CAAP;AAGD;;AACD,QAAIF,KAAK,CAACJ,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AACjC;AACN;AACA;AACA;AACA;AACM;AACA,UAAI,CAACtB,WAAW,CAACuB,IAAZ,CAAkBC,EAAD,IAAQA,EAAE,KAAKf,MAAM,CAACG,GAAvC,CAAL,EAAkD;AAChDa,QAAAA,YAAY,CAACC,UAAb,CAAwB,YAAxB;AACA3B,QAAAA,QAAQ,CAAC,gBAAD,CAAR;AACD;AACF;;AACD,QAAIoB,KAAK,CAACJ,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AACjC;AACAvB,MAAAA,QAAQ,CAAC,iBAAD,CAAR;AACD;;AAED,QAAIoB,KAAK,CAACJ,QAAV,EAAoB;AAClB;AACA;AACA,aAAOC,OAAO,CAACK,MAAR,CAAeF,KAAK,CAACJ,QAAN,CAAeJ,IAA9B,CAAP;AACD,KAJD,MAIO;AACL;AACA;AACA,aAAOK,OAAO,CAACK,MAAR,CAAeF,KAAK,CAACC,OAArB,CAAP;AACD;AACF,GAhCD,CAPG,CAyCH;;;AACA,MAAIO,OAAO,GAAG;AACZ,oBAAgB,kBADJ;AAEZC,IAAAA,MAAM,EAAE,kBAFI;AAGZ,oBAAgB;AAHJ,GAAd,CA1CG,CAgDH;;AACA,MAAIf,iBAAJ,EAAuB;AACrB,QAAI;AACF,YAAMgB,KAAK,GAAG,MAAMJ,YAAY,CAACK,OAAb,CAAqB,YAArB,CAApB;;AACA,UAAID,KAAJ,EAAW;AACTF,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2BE,KAA3B;AACD,OAFD,MAEO;AACL,eAAOb,OAAO,CAACK,MAAR,CAAe,sBAAf,CAAP;AACD;AACF,KAPD,CAOE,OAAOF,KAAP,EAAc;AACd;AACA,aAAOH,OAAO,CAACK,MAAR,CAAeF,KAAK,CAACC,OAArB,CAAP;AACD;AACF,GA7DE,CA+DH;;;AACAnB,EAAAA,WAAW,CAAC8B,QAAZ,CAAqBJ,OAArB,GAA+BA,OAA/B,CAhEG,CAkEH;AACA;;AAEA,SAAO1B,WAAW,CAACQ,MAAD,CAAX,CAAoBuB,IAApB,CAAyBlB,SAAzB,EAAoCmB,KAApC,CAA0Cf,OAA1C,CAAP;AACD,CAzED;;AA2EA,eAAeV,GAAf","sourcesContent":["import axios from \"axios\";\nimport { navigate } from \"@reach/router\";\n\nconst EXCLUDE_URL = [\"sessions\"];\n\n/**\n * Create an Axios Client with defaults\n */\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_BASE_API_URL,\n  timeout: 30000,\n});\n\n/**\n * Request Wrapper with default success/error actions\n */\nconst Api = async (\n  config = { method: \"GET\", data: {}, url: \"\" },\n  shouldAppendToken = true\n) => {\n  // Success\n  const onSuccess = (response) => {\n    return Promise.resolve(response.data);\n  };\n\n  // Error\n  const onError = (error) => {\n    if (error?.message === \"Network Error\") {\n      return Promise.reject(\n        \"You have lost Network Connectivity. Please check your Network Settings\"\n      );\n    }\n    if (error.response.status === 401) {\n      /**\n       * If 401\n       * Clear the token from offline store\n       * and navigate to Initial Stack using Navigation Service\n       */\n      // User.clearToken();\n      if (!EXCLUDE_URL.some((el) => el === config.url)) {\n        localStorage.removeItem(\"auth_token\");\n        navigate(\"/un-authorized\");\n      }\n    }\n    if (error.response.status === 500) {\n      //navigate(\"/dashboard\");\n      navigate(\"/internal-error\");\n    }\n\n    if (error.response) {\n      // Request was made but server responded with something\n      // other than 2xx\n      return Promise.reject(error.response.data);\n    } else {\n      // Something else happened while setting up the request\n      // triggered the error\n      return Promise.reject(error.message);\n    }\n  };\n\n  // Append headers\n  let headers = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-usage-mode\": \"agent\",\n  };\n\n  // Append auth token\n  if (shouldAppendToken) {\n    try {\n      const token = await localStorage.getItem(\"auth_token\");\n      if (token) {\n        headers[\"Authorization\"] = token;\n      } else {\n        return Promise.reject(\"Auth Token not found\");\n      }\n    } catch (error) {\n      // Token is not found\n      return Promise.reject(error.message);\n    }\n  }\n\n  // Set headers\n  axiosClient.defaults.headers = headers;\n\n  // console.log(\"Request Headers!\", axiosClient.defaults.headers);\n  // console.log(\"Request Configurations!\", config);\n\n  return axiosClient(config).then(onSuccess).catch(onError);\n};\n\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}