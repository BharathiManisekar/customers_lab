{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/CreateCase/index.js\";\nimport { useMediaQuery, useTheme } from \"@material-ui/core\";\nimport { navigate, useLocation } from \"@reach/router\";\nimport { Formik, yupToFormErrors } from \"formik\";\nimport _ from \"lodash\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState, useRef, createRef } from \"react\";\nimport labels from \"../../../../src/helpers/labels.json\";\nimport theme from \"../../../assets/theme\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport { getErrorMessage, getFileName } from \"../../../helpers/functions\";\nimport { CreateCaseStep1Schema } from \"../../../helpers/validationSchema\";\nimport useCartCount from \"../../../hooks/useCartCount\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport AWSService from \"../../../services/AWSService\";\nimport CaseService from \"../../../services/CaseService\";\nimport PartyService from \"../../../services/PartyService\";\nimport ActionBar from \"../../common/ActionBar\";\nimport AlertDialog from \"../../common/Alert\";\nimport FormField from \"../../common/FormField/FormField\";\nimport { CustomFileUpload } from \"../../common/FormInputs\";\nimport { HyperLink } from \"../../common/styled-components\";\nimport AdditionalMediator from \"./components/AdditionalMediator\";\nimport CaseActionCTA from \"./components/CaseActionCTA\";\nimport CaseHeader from \"./components/CaseHeader\";\nimport CaseTypeRadioButton from \"./components/CaseTypeRadioButton\";\nimport MultipleUpload from \"./components/MultipleUpload\";\nimport PartySelect from \"./components/PartySelect\";\nimport TotalClaimValue from \"./components/TotalClaimValue\";\nimport { setInitalFormValue, setPostPayload } from \"./function\";\nimport { Container, CreateCaseContainer, H2, StyledForm, StyledFormElementsWrapper, StyledLabel, StyledLabelNote } from \"./Styles\";\nimport AddClaimValueMed from \"../CreateCase/components/AddClaimValueMed\";\nconst inputs = [{\n  type: \"textarea\",\n  name: \"description\",\n  label: \"Case Description\",\n  required: true\n}];\n\nconst Index = ({\n  caseId\n}) => {\n  const [menuItems, setMenuItems] = useState([]);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    setLoader\n  } = useLoader();\n  const {\n    setTriggerCount\n  } = useCartCount();\n  const location = useLocation();\n  const [dialogData, setDialogData] = useState(false);\n  const [open, setOpen] = useState(false);\n  const searchParams = new URLSearchParams(location.search);\n  const themes = useTheme();\n  const isBigScreen = useMediaQuery(themes.breakpoints.up(640));\n  const breadcrumbs = [\"My Cases\", \"Create New Case\"];\n  const [length, setLength] = useState(1);\n  const fileRef = useRef([]);\n  const [caseObj, setCaseObj] = useState({});\n  useEffect(() => {\n    async function getCase(caseId) {\n      try {\n        setLoader({\n          state: true\n        });\n        const response = await CaseService.getCase(caseId);\n\n        if (response) {\n          setCaseObj(response);\n\n          if (response.caseItems.length > 0) {\n            setLength(response.caseItems.length);\n          }\n        }\n      } catch (error) {} finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n\n    if (caseId) {\n      getCase(caseId);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [caseId]);\n  useEffect(() => {\n    async function getParties(params) {\n      try {\n        var _response$data;\n\n        setLoader({\n          state: true\n        });\n        const response = await PartyService.getParties(\"?perPage=50&status=active\");\n\n        if (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) {\n          setMenuItems(response.data.map(({\n            name,\n            id\n          }) => ({\n            label: name,\n            value: id\n          })));\n        } else {\n          enqueueSnackbar(\"You need to create a party inorder to create a case\", {\n            variant: \"error\",\n            autoHideDuration: 3000\n          });\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n      } finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n\n    getParties(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onBreadcrumbClick = selected => {\n    switch (_.snakeCase(selected)) {\n      case \"my_cases\":\n        navigate(\"/dashboard/cases\");\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSuccess = (response, draft) => {\n    var _response$case;\n\n    if (response === null || response === void 0 ? void 0 : (_response$case = response.case) === null || _response$case === void 0 ? void 0 : _response$case.id) {\n      setTriggerCount(true);\n\n      if (draft) {\n        var _response$case2;\n\n        enqueueSnackbar(\"Case added to draft successfully\", {\n          variant: \"success\"\n        });\n        navigate(`/dashboard/cases?caseType=${response === null || response === void 0 ? void 0 : (_response$case2 = response.case) === null || _response$case2 === void 0 ? void 0 : _response$case2.resolutionKind}`);\n      } else {\n        var _response$case3;\n\n        navigate(`/dashboard/cases/create/${response.case.id}/step-2?caseType=${response === null || response === void 0 ? void 0 : (_response$case3 = response.case) === null || _response$case3 === void 0 ? void 0 : _response$case3.resolutionKind}`);\n      }\n    }\n  };\n\n  const handleDeleteAgreement = (index, agreement_urls, setFieldValue) => {\n    if (agreement_urls === null || agreement_urls === void 0 ? void 0 : agreement_urls.length) {\n      const filtered = agreement_urls.filter((v, idx) => idx !== index);\n      setFieldValue(\"agreement_urls\", filtered);\n    }\n  };\n\n  useEffect(() => {\n    if (fileRef.current.length !== length) {\n      // add or remove refs\n      fileRef.current = Array(length).fill().map((_, i) => fileRef.current[i] || createRef());\n    }\n  }, [fileRef.current.length, length]);\n\n  async function deleteClaimItem(id, claimantPartyId, caseId) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await CaseService.deleteCaseItem(caseId, id, claimantPartyId);\n\n        if (response) {\n          resolve(response);\n        }\n\n        reject(\"Error\");\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  const addClaimItems = (values, setFieldValue) => {\n    var _values$claim_items_d;\n\n    const new_claim_items = [...(values === null || values === void 0 ? void 0 : values.claim_items_data), {\n      title: \"\",\n      claimValue: \"\",\n      index: (values === null || values === void 0 ? void 0 : (_values$claim_items_d = values.claim_items_data) === null || _values$claim_items_d === void 0 ? void 0 : _values$claim_items_d.length) || 0\n    }];\n    setLength(new_claim_items.length);\n    setFieldValue(\"claim_items_data\", new_claim_items);\n  };\n\n  async function addClaimItem(claim_item, claimantPartyId, caseId) {\n    console.log(claim_item);\n    return new Promise(async (resolve, reject) => {\n      try {\n        claim_item.claimValue = Number(claim_item.claimValue);\n        const response = await CaseService.createCaseItem(claim_item, caseId, claimantPartyId);\n\n        if (response) {\n          resolve({ ...response.caseItem,\n            index: (claim_item === null || claim_item === void 0 ? void 0 : claim_item.index) || 0\n          });\n        }\n\n        reject(\"Error\");\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async function updateClaimItem(claim_id, claim_item, claimantPartyId, caseId) {\n    console.log(claim_id);\n    console.log(claim_item);\n    return new Promise(async (resolve, reject) => {\n      try {\n        claim_item.claimValue = Number(claim_item.claimValue);\n        const response = await CaseService.updateCaseItem(caseId, claim_id, claim_item, claimantPartyId);\n\n        if (response) {\n          resolve(response.caseItem);\n        }\n\n        reject(\"Error\");\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async function getDeletedItems(orginalData, currentData) {\n    const originalIDs = await _.map(orginalData, \"id\");\n    const currentIDs = await _.map(currentData, \"id\");\n    const deletedIDs = await _.difference(originalIDs, currentIDs);\n    return deletedIDs;\n  }\n\n  const removeClaimItem = (index, values, setFieldValue) => {\n    const new_claim_items = [...(values === null || values === void 0 ? void 0 : values.claim_items_data)].filter((ci, idx) => idx !== index);\n    setLength(new_claim_items.length);\n    setFieldValue(\"claim_items_data\", new_claim_items);\n  };\n\n  async function onFormSubmit(params, props, isDraft = false) {\n    var _params$claim_items_d;\n\n    let values = JSON === null || JSON === void 0 ? void 0 : JSON.parse(JSON.stringify(params));\n    values.claim_items_data = params === null || params === void 0 ? void 0 : (_params$claim_items_d = params.claim_items_data) === null || _params$claim_items_d === void 0 ? void 0 : _params$claim_items_d.map(ci => {\n      var _ci$claimValue, _ci$claimValue$toStri, _ci$claimValue$toStri2;\n\n      return { ...ci,\n        claimValue: ci === null || ci === void 0 ? void 0 : (_ci$claimValue = ci.claimValue) === null || _ci$claimValue === void 0 ? void 0 : (_ci$claimValue$toStri = _ci$claimValue.toString()) === null || _ci$claimValue$toStri === void 0 ? void 0 : (_ci$claimValue$toStri2 = _ci$claimValue$toStri.split(\",\")) === null || _ci$claimValue$toStri2 === void 0 ? void 0 : _ci$claimValue$toStri2.join(\"\")\n      };\n    });\n\n    try {\n      var _payload, _payload$requestedMed, _payload2, _payload2$requestedMe, _payload2$requestedMe2;\n\n      setLoader({\n        state: true,\n        message: \"submitting form...\"\n      });\n      let payload = { ...params\n      };\n      payload = setPostPayload(payload);\n      const new_claim_items = values.claim_items_data.filter(ci => !ci.id);\n      const claimantPartyId = values === null || values === void 0 ? void 0 : values.claimantPartyId;\n      const old_claim_items = values.claim_items_data.filter(ci => ci.id);\n      const deleted_claim_items = await getDeletedItems(caseObj.caseItems, old_claim_items);\n      let count = 0;\n      let finalClaimItems = values.claim_items_data.map((el, index) => {\n        return { ...el,\n          index\n        };\n      });\n      const hasDuplication = ((_payload = payload) === null || _payload === void 0 ? void 0 : (_payload$requestedMed = _payload.requestedMediators) === null || _payload$requestedMed === void 0 ? void 0 : _payload$requestedMed.length) && ((_payload2 = payload) === null || _payload2 === void 0 ? void 0 : (_payload2$requestedMe = _payload2.requestedMediators) === null || _payload2$requestedMe === void 0 ? void 0 : (_payload2$requestedMe2 = _payload2$requestedMe.filter((mediator, index) => {\n        var _payload3, _payload3$requestedMe;\n\n        return ((_payload3 = payload) === null || _payload3 === void 0 ? void 0 : (_payload3$requestedMe = _payload3.requestedMediators) === null || _payload3$requestedMe === void 0 ? void 0 : _payload3$requestedMe.findIndex(el => (el === null || el === void 0 ? void 0 : el.email) === (mediator === null || mediator === void 0 ? void 0 : mediator.email))) !== index;\n      })) === null || _payload2$requestedMe2 === void 0 ? void 0 : _payload2$requestedMe2.length);\n\n      if (hasDuplication) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"Duplicate email IDs found in Mediators\";\n      }\n\n      if (caseId) {\n        const response = await CaseService.updateDraft(payload, caseId, params.claimantPartyId);\n        handleSuccess(response, isDraft);\n\n        if (response) {\n          if (deleted_claim_items) {\n            count = -deleted_claim_items.length;\n\n            for (const claim_item_id of deleted_claim_items) {\n              const deleted_item = await deleteClaimItem(claim_item_id, claimantPartyId, caseId);\n\n              if (deleted_item) {\n                count += 1;\n              }\n            }\n          }\n\n          if (old_claim_items) {\n            for (const claim_item of old_claim_items) {\n              const addedItem = await updateClaimItem(claim_item.id, claim_item, claimantPartyId, caseId);\n\n              if (addedItem.id) {\n                const index = _.findIndex(finalClaimItems, ci => (ci === null || ci === void 0 ? void 0 : ci.id) === (addedItem === null || addedItem === void 0 ? void 0 : addedItem.id));\n\n                finalClaimItems[index] = addedItem;\n                count += 1;\n              }\n            }\n          }\n\n          if (new_claim_items) {\n            for (const claim_item of new_claim_items) {\n              if (claim_item.title && claim_item.claimValue) {\n                // const caseId = response?.case?.id;\n                const addedItem = await addClaimItem(claim_item, claimantPartyId, caseId);\n\n                if (addedItem.id) {\n                  console.log(\"addedItem.id\", addedItem.id);\n\n                  const index = _.findIndex(finalClaimItems, ci => (ci === null || ci === void 0 ? void 0 : ci.index) === (addedItem === null || addedItem === void 0 ? void 0 : addedItem.index));\n\n                  finalClaimItems[index] = addedItem;\n                  setCaseObj({ ...caseObj,\n                    caseItems: finalClaimItems\n                  });\n                  count += 1;\n                }\n              }\n            }\n          }\n        }\n      } else {\n        const response = await CaseService.createCase(payload, params.claimantPartyId);\n        handleSuccess(response, isDraft);\n\n        if (response) {\n          if (new_claim_items) {\n            for (const claim_item of new_claim_items) {\n              if (claim_item.title && claim_item.claimValue) {\n                var _response$case4;\n\n                const caseId = response === null || response === void 0 ? void 0 : (_response$case4 = response.case) === null || _response$case4 === void 0 ? void 0 : _response$case4.id;\n                const addedItem = await addClaimItem(claim_item, claimantPartyId, caseId);\n\n                if (addedItem.id) {\n                  console.log(\"addedItem.id\", addedItem.id);\n\n                  const index = _.findIndex(finalClaimItems, ci => (ci === null || ci === void 0 ? void 0 : ci.index) === (addedItem === null || addedItem === void 0 ? void 0 : addedItem.index));\n\n                  finalClaimItems[index] = addedItem;\n                  setCaseObj({ ...caseObj,\n                    caseItems: finalClaimItems\n                  });\n                  count += 1;\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n    }\n  }\n  /**\n   * @description Function to trigger the delete case\n   * @param {*} param0\n   */\n\n\n  const deleteDraft = async id => {\n    try {\n      setLoader({\n        state: true,\n        message: \"Deleting Cases...\"\n      });\n      const res = await CaseService.deleteDraftCase(id);\n\n      if (res === null || res === void 0 ? void 0 : res.message) {\n        enqueueSnackbar(res === null || res === void 0 ? void 0 : res.message, {\n          variant: \"success\"\n        });\n\n        if ((caseObj === null || caseObj === void 0 ? void 0 : caseObj.resolutionKind) === \"mediation\") {\n          navigate(\"/dashboard/cases?caseType=mediation\");\n        } else {\n          navigate(\"/dashboard/cases?caseType=negotiation\");\n        }\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n      setOpen(false);\n    }\n  };\n  /**\n   * @description Function to show the delete warning\n   * @param {*} id\n   */\n\n\n  const deleteWaring = id => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Proceed\",\n      secondaryBtnText: \"Cancel\",\n      clickPrimaryBtn: () => deleteDraft(id),\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to delete this draft case?`,\n      heading: \"Delete Case\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold\n      }\n    });\n  };\n  /**\n   * @description Function to reset the values\n   * @param {*} setFieldValue\n   */\n\n\n  const resetValuewhenCaseTypeChanges = (setFieldValue, type, values) => {\n    var _values$requestedMedi;\n\n    if (values === null || values === void 0 ? void 0 : (_values$requestedMedi = values.requestedMediators) === null || _values$requestedMedi === void 0 ? void 0 : _values$requestedMedi.length) {\n      if (type === \"mediation\") {\n        setFieldValue(\"requestedMediators\", [values === null || values === void 0 ? void 0 : values.requestedMediators[0]]);\n      } else if (type === \"negotiation\") {\n        setFieldValue(\"requestedMediators\", []);\n      }\n    }\n\n    if (type === \"negotiation\") {\n      setFieldValue(\"subscriptionKind\", \"normal\");\n    }\n  };\n  /**\n   * @description Function to open the confirmation popup when switch case radio buttons\n   * @param {*} value\n   * @param {*} setFieldValue\n   * @param {*} name\n   */\n\n\n  const openConfirmationPopUp = (value, setFieldValue, name, values) => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Yes\",\n      secondaryBtnText: \"No\",\n      clickPrimaryBtn: () => {\n        setFieldValue(name, value);\n        resetValuewhenCaseTypeChanges(setFieldValue, value, values);\n        setOpen(false);\n      },\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to switch to ${_.capitalize(value)}?`,\n      heading: \"Confirmation\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold\n      }\n    });\n  };\n\n  async function s3Upload(file, field, setFieldValue, setFieldError) {\n    if (file) {\n      try {\n        setLoader({\n          state: true,\n          message: `Uploading file: ${file.name} ...`\n        });\n        const payload = {\n          key: file.name\n        };\n        const s3Response = await AWSService.getS3URL(payload);\n\n        if (s3Response.url) {\n          const res = await AWSService.uploadToS3(s3Response.url, file);\n          setFieldValue(field, res);\n          enqueueSnackbar(\"Successfully Uploaded\", {\n            variant: \"success\"\n          });\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        setFieldError(field, \"Could not upload this file\");\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n      } finally {\n        setLoader({\n          state: false\n        });\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ActionBar, {\n    breadcrumbs,\n    onBreadcrumbClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CreateCaseContainer, {\n    className: \"CreateCase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: setInitalFormValue(caseObj, menuItems, searchParams),\n    validate: values => {\n      try {\n        CreateCaseStep1Schema.validateSync(values, {\n          abortEarly: false,\n          values\n        });\n      } catch (e) {\n        return yupToFormErrors(e);\n      }\n    },\n    enableReinitialize: true,\n    onSubmit: onFormSubmit,\n    validateOnBlur: true,\n    validateOnChange: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    handleChange,\n    errors,\n    handleSubmit,\n    touched,\n    handleBlur,\n    setFieldValue,\n    setFieldError,\n    setFieldTouched\n  }) => /*#__PURE__*/React.createElement(StyledForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CaseHeader // resolutionKind={values?.resolutionKind}\n  , {\n    onClick: () => deleteWaring(caseId),\n    showDelete: !!caseId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(H2, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 15\n    }\n  }, \"Enter Case Details\"), /*#__PURE__*/React.createElement(CaseTypeRadioButton, {\n    values: values,\n    handleChange: (e, type) => {\n      if (caseId) {\n        var _e$target;\n\n        openConfirmationPopUp(e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value, setFieldValue, type, values);\n      } else {\n        handleChange(e);\n      }\n    },\n    resolutionKind: values.resolutionKind,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 15\n    }\n  }), (values === null || values === void 0 ? void 0 : values.resolutionKind) === \"arbitration\" && /*#__PURE__*/React.createElement(StyledFormElementsWrapper, {\n    style: {\n      marginBottom: 13\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StyledLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 19\n    }\n  }, \"Have you sent the notice of arbitration? If yes, upload the file. If no, download the template, send it to the respondent and upload the file\"), /*#__PURE__*/React.createElement(CustomFileUpload, {\n    error: (touched === null || touched === void 0 ? void 0 : touched.arbitrationNotice) && (errors === null || errors === void 0 ? void 0 : errors.arbitrationNotice),\n    setFile: file => s3Upload(file, `arbitrationNotice`, setFieldValue, setFieldError),\n    style: {\n      marginTop: 10,\n      width: \"100%\"\n    },\n    accept: \".pdf, .mp3, .mp4, .docx, image/*\",\n    file: {\n      name: getFileName(values === null || values === void 0 ? void 0 : values.arbitrationNotice)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(HyperLink, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    },\n    onClick: () => window.open(\"https://justact-api-uploads.s3.ap-south-1.amazonaws.com/160/1633000323853-2beda7f9-27e2-4b81-82fb-66418bbed710/Notice%20of%20Arbitration.docx\", \"_blank\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 21\n    }\n  }, \"Please download the template.\"))), /*#__PURE__*/React.createElement(PartySelect, {\n    values,\n    handleChange,\n    handleSubmit,\n    errors,\n    touched,\n    handleBlur,\n    setFieldValue,\n    menuItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 15\n    }\n  }), inputs.map((input, key) => /*#__PURE__*/React.createElement(StyledFormElementsWrapper, {\n    style: {\n      marginBottom: 15\n    },\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    white: true,\n    input,\n    key,\n    values,\n    handleChange,\n    errors,\n    handleSubmit,\n    touched,\n    handleBlur,\n    setFieldValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 19\n    }\n  }))), (values === null || values === void 0 ? void 0 : values.resolutionKind) == \"arbitration\" ? /*#__PURE__*/React.createElement(TotalClaimValue, {\n    ressolutionKind: values.resolutionKind,\n    values: values.totalClaimValue,\n    handleChange: handleChange,\n    errors,\n    onBlur: _ => {\n      setFieldTouched(`totalClaimValue`, true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 17\n    }\n  }) : \"\", (values === null || values === void 0 ? void 0 : values.resolutionKind) == \"mediation\" ? /*#__PURE__*/React.createElement(AddClaimValueMed, {\n    ressolutionKind: values.resolutionKind,\n    values: values,\n    handleChange: handleChange,\n    addClaimItems: addClaimItems,\n    removeClaimItem: removeClaimItem,\n    caseObj: caseObj,\n    errors,\n    setFieldValue,\n    enqueueSnackbar,\n    touched,\n    setFieldTouched,\n    handleBlur,\n    onBlur: _ => {\n      setFieldTouched(`totalClaimValue`, true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 17\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(StyledFormElementsWrapper, {\n    style: {\n      marginBottom: 13\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 15\n    }\n  }, (values === null || values === void 0 ? void 0 : values.resolutionKind) === \"mediation\" ? /*#__PURE__*/React.createElement(StyledLabelNote, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 19\n    }\n  }, \"Note: The\", \" \", (values === null || values === void 0 ? void 0 : values.resolutionKind) === \"negotiation\" ? labels[\"resolution.negotiation\"] : (values === null || values === void 0 ? void 0 : values.document_kind) === \"mediation\" ? _.upperCase(values === null || values === void 0 ? void 0 : values.resolutionKind) : _.capitalize(values === null || values === void 0 ? void 0 : values.resolutionKind), \" \", \"process is completely confidential and the evidence submitted are not admissible in the court\") : \"\"), /*#__PURE__*/React.createElement(MultipleUpload, {\n    values: values,\n    setFieldValue: setFieldValue,\n    getFileName: getFileName,\n    setFieldError: setFieldError,\n    handleDeleteAgreement: handleDeleteAgreement,\n    touched: touched,\n    errors: errors,\n    menuItems: caseDocumentType,\n    handleBlur: handleBlur,\n    s3Upload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(AdditionalMediator, {\n    values,\n    setFieldValue,\n    touched,\n    errors,\n    handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CaseActionCTA, {\n    isBigScreen: isBigScreen,\n    onClick: () => onFormSubmit(values, null, true),\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(AlertDialog, Object.assign({\n    isOpen: open\n  }, dialogData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/CreateCase/index.js"],"names":["useMediaQuery","useTheme","navigate","useLocation","Formik","yupToFormErrors","_","useSnackbar","React","useEffect","useState","useRef","createRef","labels","theme","caseDocumentType","getErrorMessage","getFileName","CreateCaseStep1Schema","useCartCount","useLoader","AWSService","CaseService","PartyService","ActionBar","AlertDialog","FormField","CustomFileUpload","HyperLink","AdditionalMediator","CaseActionCTA","CaseHeader","CaseTypeRadioButton","MultipleUpload","PartySelect","TotalClaimValue","setInitalFormValue","setPostPayload","Container","CreateCaseContainer","H2","StyledForm","StyledFormElementsWrapper","StyledLabel","StyledLabelNote","AddClaimValueMed","inputs","type","name","label","required","Index","caseId","menuItems","setMenuItems","enqueueSnackbar","setLoader","setTriggerCount","location","dialogData","setDialogData","open","setOpen","searchParams","URLSearchParams","search","themes","isBigScreen","breakpoints","up","breadcrumbs","length","setLength","fileRef","caseObj","setCaseObj","getCase","state","response","caseItems","error","getParties","params","data","map","id","value","variant","autoHideDuration","message","onBreadcrumbClick","selected","snakeCase","handleSuccess","draft","case","resolutionKind","handleDeleteAgreement","index","agreement_urls","setFieldValue","filtered","filter","v","idx","current","Array","fill","i","deleteClaimItem","claimantPartyId","Promise","resolve","reject","deleteCaseItem","addClaimItems","values","new_claim_items","claim_items_data","title","claimValue","addClaimItem","claim_item","console","log","Number","createCaseItem","caseItem","updateClaimItem","claim_id","updateCaseItem","getDeletedItems","orginalData","currentData","originalIDs","currentIDs","deletedIDs","difference","removeClaimItem","ci","onFormSubmit","props","isDraft","JSON","parse","stringify","toString","split","join","payload","old_claim_items","deleted_claim_items","count","finalClaimItems","el","hasDuplication","requestedMediators","mediator","findIndex","email","updateDraft","claim_item_id","deleted_item","addedItem","createCase","deleteDraft","res","deleteDraftCase","deleteWaring","primaryBtnText","secondaryBtnText","clickPrimaryBtn","clickSecondarybtn","desc","heading","descriptionTextStyle","textAlign","fontFamily","fonts","primaryFontSemiBold","resetValuewhenCaseTypeChanges","openConfirmationPopUp","capitalize","s3Upload","file","field","setFieldError","key","s3Response","getS3URL","url","uploadToS3","validateSync","abortEarly","e","handleChange","errors","handleSubmit","touched","handleBlur","setFieldTouched","target","marginBottom","arbitrationNotice","marginTop","width","display","justifyContent","window","input","totalClaimValue","document_kind","upperCase"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,mBAAxC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,eAAtC;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,QAAxC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,4BAA7C;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,YAAnD;AACA,SACEC,SADF,EAEEC,mBAFF,EAGEC,EAHF,EAIEC,UAJF,EAKEC,yBALF,EAMEC,WANF,EAOEC,eAPF,QAQO,UARP;AASA,OAAOC,gBAAP,MAA6B,2CAA7B;AAEA,MAAMC,MAAM,GAAG,CACb;AACEC,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,IAAI,EAAE,aAFR;AAGEC,EAAAA,KAAK,EAAE,kBAHT;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CADa,CAAf;;AASA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B5C,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAE6C,IAAAA;AAAF,MAAsBhD,WAAW,EAAvC;AACA,QAAM;AAAEiD,IAAAA;AAAF,MAAgBpC,SAAS,EAA/B;AACA,QAAM;AAAEqC,IAAAA;AAAF,MAAsBtC,YAAY,EAAxC;AACA,QAAMuC,QAAQ,GAAGvD,WAAW,EAA5B;AACA,QAAM,CAACwD,UAAD,EAAaC,aAAb,IAA8BlD,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACmD,IAAD,EAAOC,OAAP,IAAkBpD,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMqD,YAAY,GAAG,IAAIC,eAAJ,CAAoBN,QAAQ,CAACO,MAA7B,CAArB;AACA,QAAMC,MAAM,GAAGjE,QAAQ,EAAvB;AACA,QAAMkE,WAAW,GAAGnE,aAAa,CAACkE,MAAM,CAACE,WAAP,CAAmBC,EAAnB,CAAsB,GAAtB,CAAD,CAAjC;AACA,QAAMC,WAAW,GAAG,CAAC,UAAD,EAAa,iBAAb,CAApB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB9D,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM+D,OAAO,GAAG9D,MAAM,CAAC,EAAD,CAAtB;AAEA,QAAM,CAAC+D,OAAD,EAAUC,UAAV,IAAwBjE,QAAQ,CAAC,EAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAemE,OAAf,CAAuBxB,MAAvB,EAA+B;AAC7B,UAAI;AACFI,QAAAA,SAAS,CAAC;AAAEqB,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT;AACA,cAAMC,QAAQ,GAAG,MAAMxD,WAAW,CAACsD,OAAZ,CAAoBxB,MAApB,CAAvB;;AACA,YAAI0B,QAAJ,EAAc;AACZH,UAAAA,UAAU,CAACG,QAAD,CAAV;;AACA,cAAIA,QAAQ,CAACC,SAAT,CAAmBR,MAAnB,GAA4B,CAAhC,EAAmC;AACjCC,YAAAA,SAAS,CAACM,QAAQ,CAACC,SAAT,CAAmBR,MAApB,CAAT;AACD;AACF;AACF,OATD,CASE,OAAOS,KAAP,EAAc,CACf,CAVD,SAUU;AACRxB,QAAAA,SAAS,CAAC;AAAEqB,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT;AACD;AACF;;AACD,QAAIzB,MAAJ,EAAY;AACVwB,MAAAA,OAAO,CAACxB,MAAD,CAAP;AACD,KAlBa,CAmBd;;AACD,GApBQ,EAoBN,CAACA,MAAD,CApBM,CAAT;AAsBA3C,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAewE,UAAf,CAA0BC,MAA1B,EAAkC;AAChC,UAAI;AAAA;;AACF1B,QAAAA,SAAS,CAAC;AAAEqB,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT;AACA,cAAMC,QAAQ,GAAG,MAAMvD,YAAY,CAAC0D,UAAb,CACrB,2BADqB,CAAvB;;AAGA,YAAIH,QAAJ,aAAIA,QAAJ,yCAAIA,QAAQ,CAAEK,IAAd,mDAAI,eAAgBZ,MAApB,EAA4B;AAC1BjB,UAAAA,YAAY,CACVwB,QAAQ,CAACK,IAAT,CAAcC,GAAd,CAAkB,CAAC;AAAEpC,YAAAA,IAAF;AAAQqC,YAAAA;AAAR,WAAD,MAAmB;AAAEpC,YAAAA,KAAK,EAAED,IAAT;AAAesC,YAAAA,KAAK,EAAED;AAAtB,WAAnB,CAAlB,CADU,CAAZ;AAGD,SAJD,MAIO;AACL9B,UAAAA,eAAe,CACb,qDADa,EAEb;AACEgC,YAAAA,OAAO,EAAE,OADX;AAEEC,YAAAA,gBAAgB,EAAE;AAFpB,WAFa,CAAf;AAOD;AACF,OAlBD,CAkBE,OAAOR,KAAP,EAAc;AACd,cAAMS,OAAO,GAAGzE,eAAe,CAACgE,KAAD,CAA/B;AACAzB,QAAAA,eAAe,CAACkC,OAAD,EAAU;AACvBF,UAAAA,OAAO,EAAE;AADc,SAAV,CAAf;AAGD,OAvBD,SAuBU;AACR/B,QAAAA,SAAS,CAAC;AAAEqB,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT;AACD;AACF;;AACDI,IAAAA,UAAU,GA7BI,CA8Bd;AACD,GA/BQ,EA+BN,EA/BM,CAAT;;AAiCA,QAAMS,iBAAiB,GAAGC,QAAQ,IAAI;AACpC,YAAQrF,CAAC,CAACsF,SAAF,CAAYD,QAAZ,CAAR;AACE,WAAK,UAAL;AACEzF,QAAAA,QAAQ,CAAC,kBAAD,CAAR;AACA;;AACF;AACE;AALJ;AAOD,GARD;;AAUA,QAAM2F,aAAa,GAAG,CAACf,QAAD,EAAWgB,KAAX,KAAqB;AAAA;;AACzC,QAAIhB,QAAJ,aAAIA,QAAJ,yCAAIA,QAAQ,CAAEiB,IAAd,mDAAI,eAAgBV,EAApB,EAAwB;AACtB5B,MAAAA,eAAe,CAAC,IAAD,CAAf;;AACA,UAAIqC,KAAJ,EAAW;AAAA;;AACTvC,QAAAA,eAAe,CAAC,kCAAD,EAAqC;AAClDgC,UAAAA,OAAO,EAAE;AADyC,SAArC,CAAf;AAGArF,QAAAA,QAAQ,CAAE,6BAA4B4E,QAA7B,aAA6BA,QAA7B,0CAA6BA,QAAQ,CAAEiB,IAAvC,oDAA6B,gBAAgBC,cAAe,EAA7D,CAAR;AACD,OALD,MAKO;AAAA;;AACL9F,QAAAA,QAAQ,CACL,2BAA0B4E,QAAQ,CAACiB,IAAT,CAAcV,EAAG,oBAAmBP,QAA/D,aAA+DA,QAA/D,0CAA+DA,QAAQ,CAAEiB,IAAzE,oDAA+D,gBAAgBC,cAAe,EADxF,CAAR;AAGD;AACF;AACF,GAdD;;AAgBA,QAAMC,qBAAqB,GAAG,CAACC,KAAD,EAAQC,cAAR,EAAwBC,aAAxB,KAA0C;AACtE,QAAID,cAAJ,aAAIA,cAAJ,uBAAIA,cAAc,CAAE5B,MAApB,EAA4B;AAC1B,YAAM8B,QAAQ,GAAGF,cAAc,CAACG,MAAf,CAAsB,CAACC,CAAD,EAAIC,GAAJ,KAAYA,GAAG,KAAKN,KAA1C,CAAjB;AACAE,MAAAA,aAAa,CAAC,gBAAD,EAAmBC,QAAnB,CAAb;AACD;AACF,GALD;;AAOA5F,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgE,OAAO,CAACgC,OAAR,CAAgBlC,MAAhB,KAA2BA,MAA/B,EAAuC;AACrC;AACAE,MAAAA,OAAO,CAACgC,OAAR,GAAkBC,KAAK,CAACnC,MAAD,CAAL,CACfoC,IADe,GAEfvB,GAFe,CAEX,CAAC9E,CAAD,EAAIsG,CAAJ,KAAUnC,OAAO,CAACgC,OAAR,CAAgBG,CAAhB,KAAsBhG,SAAS,EAF9B,CAAlB;AAGD;AACF,GAPQ,EAON,CAAC6D,OAAO,CAACgC,OAAR,CAAgBlC,MAAjB,EAAyBA,MAAzB,CAPM,CAAT;;AASA,iBAAesC,eAAf,CAA+BxB,EAA/B,EAAmCyB,eAAnC,EAAoD1D,MAApD,EAA4D;AAC1D,WAAO,IAAI2D,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAI;AACF,cAAMnC,QAAQ,GAAG,MAAMxD,WAAW,CAAC4F,cAAZ,CACrB9D,MADqB,EAErBiC,EAFqB,EAGrByB,eAHqB,CAAvB;;AAKA,YAAIhC,QAAJ,EAAc;AACZkC,UAAAA,OAAO,CAAClC,QAAD,CAAP;AACD;;AACDmC,QAAAA,MAAM,CAAC,OAAD,CAAN;AACD,OAVD,CAUE,OAAOjC,KAAP,EAAc;AACdiC,QAAAA,MAAM,CAACjC,KAAD,CAAN;AACD;AACF,KAdM,CAAP;AAeD;;AAED,QAAMmC,aAAa,GAAG,CAACC,MAAD,EAAShB,aAAT,KAA2B;AAAA;;AAC/C,UAAMiB,eAAe,GAAG,CACtB,IAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEE,gBAAX,CADsB,EAEtB;AACEC,MAAAA,KAAK,EAAE,EADT;AAEEC,MAAAA,UAAU,EAAE,EAFd;AAGEtB,MAAAA,KAAK,EAAE,CAAAkB,MAAM,SAAN,IAAAA,MAAM,WAAN,qCAAAA,MAAM,CAAEE,gBAAR,gFAA0B/C,MAA1B,KAAoC;AAH7C,KAFsB,CAAxB;AAQAC,IAAAA,SAAS,CAAC6C,eAAe,CAAC9C,MAAjB,CAAT;AACA6B,IAAAA,aAAa,CAAC,kBAAD,EAAqBiB,eAArB,CAAb;AACD,GAXD;;AAaA,iBAAeI,YAAf,CAA4BC,UAA5B,EAAwCZ,eAAxC,EAAyD1D,MAAzD,EAAiE;AAC/DuE,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,WAAO,IAAIX,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAI;AACFS,QAAAA,UAAU,CAACF,UAAX,GAAwBK,MAAM,CAACH,UAAU,CAACF,UAAZ,CAA9B;AACA,cAAM1C,QAAQ,GAAG,MAAMxD,WAAW,CAACwG,cAAZ,CACrBJ,UADqB,EAErBtE,MAFqB,EAGrB0D,eAHqB,CAAvB;;AAKA,YAAIhC,QAAJ,EAAc;AACZkC,UAAAA,OAAO,CAAC,EAAE,GAAGlC,QAAQ,CAACiD,QAAd;AAAwB7B,YAAAA,KAAK,EAAE,CAAAwB,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAExB,KAAZ,KAAqB;AAApD,WAAD,CAAP;AACD;;AACDe,QAAAA,MAAM,CAAC,OAAD,CAAN;AACD,OAXD,CAWE,OAAOjC,KAAP,EAAc;AACdiC,QAAAA,MAAM,CAACjC,KAAD,CAAN;AACD;AACF,KAfM,CAAP;AAgBD;;AAED,iBAAegD,eAAf,CACEC,QADF,EAEEP,UAFF,EAGEZ,eAHF,EAIE1D,MAJF,EAKE;AACAuE,IAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,WAAO,IAAIX,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAI;AACFS,QAAAA,UAAU,CAACF,UAAX,GAAwBK,MAAM,CAACH,UAAU,CAACF,UAAZ,CAA9B;AACA,cAAM1C,QAAQ,GAAG,MAAMxD,WAAW,CAAC4G,cAAZ,CACrB9E,MADqB,EAErB6E,QAFqB,EAGrBP,UAHqB,EAIrBZ,eAJqB,CAAvB;;AAMA,YAAIhC,QAAJ,EAAc;AACZkC,UAAAA,OAAO,CAAClC,QAAQ,CAACiD,QAAV,CAAP;AACD;;AACDd,QAAAA,MAAM,CAAC,OAAD,CAAN;AACD,OAZD,CAYE,OAAOjC,KAAP,EAAc;AACdiC,QAAAA,MAAM,CAACjC,KAAD,CAAN;AACD;AACF,KAhBM,CAAP;AAiBD;;AAED,iBAAemD,eAAf,CAA+BC,WAA/B,EAA4CC,WAA5C,EAAyD;AACvD,UAAMC,WAAW,GAAG,MAAMhI,CAAC,CAAC8E,GAAF,CAAMgD,WAAN,EAAmB,IAAnB,CAA1B;AACA,UAAMG,UAAU,GAAG,MAAMjI,CAAC,CAAC8E,GAAF,CAAMiD,WAAN,EAAmB,IAAnB,CAAzB;AACA,UAAMG,UAAU,GAAG,MAAMlI,CAAC,CAACmI,UAAF,CAAaH,WAAb,EAA0BC,UAA1B,CAAzB;AACA,WAAOC,UAAP;AACD;;AAED,QAAME,eAAe,GAAG,CAACxC,KAAD,EAAQkB,MAAR,EAAgBhB,aAAhB,KAAkC;AACxD,UAAMiB,eAAe,GAAG,CAAC,IAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEE,gBAAX,CAAD,EAA8BhB,MAA9B,CACtB,CAACqC,EAAD,EAAKnC,GAAL,KAAaA,GAAG,KAAKN,KADC,CAAxB;AAGA1B,IAAAA,SAAS,CAAC6C,eAAe,CAAC9C,MAAjB,CAAT;AACA6B,IAAAA,aAAa,CAAC,kBAAD,EAAqBiB,eAArB,CAAb;AACD,GAND;;AAQA,iBAAeuB,YAAf,CAA4B1D,MAA5B,EAAoC2D,KAApC,EAA2CC,OAAO,GAAG,KAArD,EAA4D;AAAA;;AAC1D,QAAI1B,MAAM,GAAG2B,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEC,KAAN,CAAYD,IAAI,CAACE,SAAL,CAAe/D,MAAf,CAAZ,CAAb;AACAkC,IAAAA,MAAM,CAACE,gBAAP,GAA0BpC,MAA1B,aAA0BA,MAA1B,gDAA0BA,MAAM,CAAEoC,gBAAlC,0DAA0B,sBAA0BlC,GAA1B,CAA8BuD,EAAE;AAAA;;AAAA,aAAK,EAC7D,GAAGA,EAD0D;AAE7DnB,QAAAA,UAAU,EAAEmB,EAAF,aAAEA,EAAF,yCAAEA,EAAE,CAAEnB,UAAN,4EAAE,eACR0B,QADQ,EAAF,oFAAE,sBAERC,KAFQ,CAEF,GAFE,CAAF,2DAAE,uBAGRC,IAHQ,CAGH,EAHG;AAFiD,OAAL;AAAA,KAAhC,CAA1B;;AAOA,QAAI;AAAA;;AACF5F,MAAAA,SAAS,CAAC;AAAEqB,QAAAA,KAAK,EAAE,IAAT;AAAeY,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAT;AACA,UAAI4D,OAAO,GAAG,EAAE,GAAGnE;AAAL,OAAd;AACAmE,MAAAA,OAAO,GAAGhH,cAAc,CAACgH,OAAD,CAAxB;AACA,YAAMhC,eAAe,GAAGD,MAAM,CAACE,gBAAP,CAAwBhB,MAAxB,CAA+BqC,EAAE,IAAI,CAACA,EAAE,CAACtD,EAAzC,CAAxB;AACA,YAAMyB,eAAe,GAAGM,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEN,eAAhC;AACA,YAAMwC,eAAe,GAAGlC,MAAM,CAACE,gBAAP,CAAwBhB,MAAxB,CAA+BqC,EAAE,IAAIA,EAAE,CAACtD,EAAxC,CAAxB;AACA,YAAMkE,mBAAmB,GAAG,MAAMpB,eAAe,CAC/CzD,OAAO,CAACK,SADuC,EAE/CuE,eAF+C,CAAjD;AAIA,UAAIE,KAAK,GAAG,CAAZ;AACA,UAAIC,eAAe,GAAGrC,MAAM,CAACE,gBAAP,CAAwBlC,GAAxB,CAA4B,CAACsE,EAAD,EAAKxD,KAAL,KAAe;AAC/D,eAAO,EAAE,GAAGwD,EAAL;AAASxD,UAAAA;AAAT,SAAP;AACD,OAFqB,CAAtB;AAGA,YAAMyD,cAAc,GAClB,aAAAN,OAAO,UAAP,qEAASO,kBAAT,gFAA6BrF,MAA7B,mBACA8E,OADA,uEACA,UAASO,kBADT,oFACA,sBAA6BtD,MAA7B,CACE,CAACuD,QAAD,EAAW3D,KAAX;AAAA;;AAAA,eACE,cAAAmD,OAAO,UAAP,uEAASO,kBAAT,gFAA6BE,SAA7B,CACEJ,EAAE,IAAI,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEK,KAAJ,OAAcF,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAEE,KAAxB,CADR,OAEM7D,KAHR;AAAA,OADF,CADA,2DACA,uBAKG3B,MANH,CADF;;AAQA,UAAIoF,cAAJ,EAAoB;AAClB;AACA,cAAM,wCAAN;AACD;;AACD,UAAIvG,MAAJ,EAAY;AACV,cAAM0B,QAAQ,GAAG,MAAMxD,WAAW,CAAC0I,WAAZ,CACrBX,OADqB,EAErBjG,MAFqB,EAGrB8B,MAAM,CAAC4B,eAHc,CAAvB;AAKAjB,QAAAA,aAAa,CAACf,QAAD,EAAWgE,OAAX,CAAb;;AACA,YAAIhE,QAAJ,EAAc;AACZ,cAAIyE,mBAAJ,EAAyB;AACvBC,YAAAA,KAAK,GAAG,CAACD,mBAAmB,CAAChF,MAA7B;;AACA,iBAAK,MAAM0F,aAAX,IAA4BV,mBAA5B,EAAiD;AAC/C,oBAAMW,YAAY,GAAG,MAAMrD,eAAe,CACxCoD,aADwC,EAExCnD,eAFwC,EAGxC1D,MAHwC,CAA1C;;AAKA,kBAAI8G,YAAJ,EAAkB;AAChBV,gBAAAA,KAAK,IAAI,CAAT;AACD;AACF;AACF;;AAED,cAAIF,eAAJ,EAAqB;AACnB,iBAAK,MAAM5B,UAAX,IAAyB4B,eAAzB,EAA0C;AACxC,oBAAMa,SAAS,GAAG,MAAMnC,eAAe,CACrCN,UAAU,CAACrC,EAD0B,EAErCqC,UAFqC,EAGrCZ,eAHqC,EAIrC1D,MAJqC,CAAvC;;AAMA,kBAAI+G,SAAS,CAAC9E,EAAd,EAAkB;AAChB,sBAAMa,KAAK,GAAG5F,CAAC,CAACwJ,SAAF,CACZL,eADY,EAEZd,EAAE,IAAI,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEtD,EAAJ,OAAW8E,SAAX,aAAWA,SAAX,uBAAWA,SAAS,CAAE9E,EAAtB,CAFM,CAAd;;AAIAoE,gBAAAA,eAAe,CAACvD,KAAD,CAAf,GAAyBiE,SAAzB;AACAX,gBAAAA,KAAK,IAAI,CAAT;AACD;AACF;AACF;;AACD,cAAInC,eAAJ,EAAqB;AACnB,iBAAK,MAAMK,UAAX,IAAyBL,eAAzB,EAA0C;AACxC,kBAAIK,UAAU,CAACH,KAAX,IAAoBG,UAAU,CAACF,UAAnC,EAA+C;AAC7C;AACA,sBAAM2C,SAAS,GAAG,MAAM1C,YAAY,CAClCC,UADkC,EAElCZ,eAFkC,EAGlC1D,MAHkC,CAApC;;AAKA,oBAAI+G,SAAS,CAAC9E,EAAd,EAAkB;AAChBsC,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BuC,SAAS,CAAC9E,EAAtC;;AACA,wBAAMa,KAAK,GAAG5F,CAAC,CAACwJ,SAAF,CACZL,eADY,EAEZd,EAAE,IAAI,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEzC,KAAJ,OAAciE,SAAd,aAAcA,SAAd,uBAAcA,SAAS,CAAEjE,KAAzB,CAFM,CAAd;;AAIAuD,kBAAAA,eAAe,CAACvD,KAAD,CAAf,GAAyBiE,SAAzB;AACAxF,kBAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAcK,oBAAAA,SAAS,EAAE0E;AAAzB,mBAAD,CAAV;AACAD,kBAAAA,KAAK,IAAI,CAAT;AACD;AACF;AACF;AACF;AACF;AACF,OA/DD,MA+DO;AACL,cAAM1E,QAAQ,GAAG,MAAMxD,WAAW,CAAC8I,UAAZ,CACrBf,OADqB,EAErBnE,MAAM,CAAC4B,eAFc,CAAvB;AAIAjB,QAAAA,aAAa,CAACf,QAAD,EAAWgE,OAAX,CAAb;;AACA,YAAIhE,QAAJ,EAAc;AACZ,cAAIuC,eAAJ,EAAqB;AACnB,iBAAK,MAAMK,UAAX,IAAyBL,eAAzB,EAA0C;AACxC,kBAAIK,UAAU,CAACH,KAAX,IAAoBG,UAAU,CAACF,UAAnC,EAA+C;AAAA;;AAC7C,sBAAMpE,MAAM,GAAG0B,QAAH,aAAGA,QAAH,0CAAGA,QAAQ,CAAEiB,IAAb,oDAAG,gBAAgBV,EAA/B;AACA,sBAAM8E,SAAS,GAAG,MAAM1C,YAAY,CAClCC,UADkC,EAElCZ,eAFkC,EAGlC1D,MAHkC,CAApC;;AAKA,oBAAI+G,SAAS,CAAC9E,EAAd,EAAkB;AAChBsC,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BuC,SAAS,CAAC9E,EAAtC;;AACA,wBAAMa,KAAK,GAAG5F,CAAC,CAACwJ,SAAF,CACZL,eADY,EAEZd,EAAE,IAAI,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEzC,KAAJ,OAAciE,SAAd,aAAcA,SAAd,uBAAcA,SAAS,CAAEjE,KAAzB,CAFM,CAAd;;AAIAuD,kBAAAA,eAAe,CAACvD,KAAD,CAAf,GAAyBiE,SAAzB;AACAxF,kBAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAcK,oBAAAA,SAAS,EAAE0E;AAAzB,mBAAD,CAAV;AACAD,kBAAAA,KAAK,IAAI,CAAT;AACD;AACF;AACF;AACF;AACF;AACF;AACF,KAzHD,CAyHE,OAAOxE,KAAP,EAAc;AACd,YAAMS,OAAO,GAAGzE,eAAe,CAACgE,KAAD,CAA/B;AACAzB,MAAAA,eAAe,CAACkC,OAAD,EAAU;AACvBF,QAAAA,OAAO,EAAE;AADc,OAAV,CAAf;AAGD,KA9HD,SA8HU;AACR/B,MAAAA,SAAS,CAAC;AAAEqB,QAAAA,KAAK,EAAE;AAAT,OAAD,CAAT;AACD;AACF;AAED;AACF;AACA;AACA;;;AACE,QAAMwF,WAAW,GAAG,MAAMhF,EAAN,IAAY;AAC9B,QAAI;AACF7B,MAAAA,SAAS,CAAC;AAAEqB,QAAAA,KAAK,EAAE,IAAT;AAAeY,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAT;AACA,YAAM6E,GAAG,GAAG,MAAMhJ,WAAW,CAACiJ,eAAZ,CAA4BlF,EAA5B,CAAlB;;AACA,UAAIiF,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAE7E,OAAT,EAAkB;AAChBlC,QAAAA,eAAe,CAAC+G,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAE7E,OAAN,EAAe;AAC5BF,UAAAA,OAAO,EAAE;AADmB,SAAf,CAAf;;AAGA,YAAI,CAAAb,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEsB,cAAT,MAA4B,WAAhC,EAA6C;AAC3C9F,UAAAA,QAAQ,CAAC,qCAAD,CAAR;AACD,SAFD,MAEO;AACLA,UAAAA,QAAQ,CAAC,uCAAD,CAAR;AACD;AACF;AACF,KAbD,CAaE,OAAO8E,KAAP,EAAc;AACd,YAAMS,OAAO,GAAGzE,eAAe,CAACgE,KAAD,CAA/B;AACAzB,MAAAA,eAAe,CAACkC,OAAD,EAAU;AACvBF,QAAAA,OAAO,EAAE;AADc,OAAV,CAAf;AAGD,KAlBD,SAkBU;AACR/B,MAAAA,SAAS,CAAC;AAAEqB,QAAAA,KAAK,EAAE;AAAT,OAAD,CAAT;AACAf,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GAvBD;AAyBA;AACF;AACA;AACA;;;AACE,QAAM0G,YAAY,GAAGnF,EAAE,IAAI;AACzBvB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAF,IAAAA,aAAa,CAAC;AACZ6G,MAAAA,cAAc,EAAE,SADJ;AAEZC,MAAAA,gBAAgB,EAAE,QAFN;AAGZC,MAAAA,eAAe,EAAE,MAAMN,WAAW,CAAChF,EAAD,CAHtB;AAIZuF,MAAAA,iBAAiB,EAAE,MAAM9G,OAAO,CAAC,KAAD,CAJpB;AAKZ+G,MAAAA,IAAI,EAAG,kDALK;AAMZC,MAAAA,OAAO,EAAE,aANG;AAOZC,MAAAA,oBAAoB,EAAE;AACpBC,QAAAA,SAAS,EAAE,QADS;AAEpBC,QAAAA,UAAU,EAAEnK,KAAK,CAACoK,KAAN,CAAYC;AAFJ;AAPV,KAAD,CAAb;AAYD,GAdD;AAgBA;AACF;AACA;AACA;;;AACE,QAAMC,6BAA6B,GAAG,CAAChF,aAAD,EAAgBrD,IAAhB,EAAsBqE,MAAtB,KAAiC;AAAA;;AACrE,QAAIA,MAAJ,aAAIA,MAAJ,gDAAIA,MAAM,CAAEwC,kBAAZ,0DAAI,sBAA4BrF,MAAhC,EAAwC;AACtC,UAAIxB,IAAI,KAAK,WAAb,EAA0B;AACxBqD,QAAAA,aAAa,CAAC,oBAAD,EAAuB,CAACgB,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEwC,kBAAR,CAA2B,CAA3B,CAAD,CAAvB,CAAb;AACD,OAFD,MAEO,IAAI7G,IAAI,KAAK,aAAb,EAA4B;AACjCqD,QAAAA,aAAa,CAAC,oBAAD,EAAuB,EAAvB,CAAb;AACD;AACF;;AACD,QAAIrD,IAAI,KAAK,aAAb,EAA4B;AAC1BqD,MAAAA,aAAa,CAAC,kBAAD,EAAqB,QAArB,CAAb;AACD;AACF,GAXD;AAaA;AACF;AACA;AACA;AACA;AACA;;;AACE,QAAMiF,qBAAqB,GAAG,CAAC/F,KAAD,EAAQc,aAAR,EAAuBpD,IAAvB,EAA6BoE,MAA7B,KAAwC;AACpEtD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAF,IAAAA,aAAa,CAAC;AACZ6G,MAAAA,cAAc,EAAE,KADJ;AAEZC,MAAAA,gBAAgB,EAAE,IAFN;AAGZC,MAAAA,eAAe,EAAE,MAAM;AACrBvE,QAAAA,aAAa,CAACpD,IAAD,EAAOsC,KAAP,CAAb;AACA8F,QAAAA,6BAA6B,CAAChF,aAAD,EAAgBd,KAAhB,EAAuB8B,MAAvB,CAA7B;AACAtD,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAPW;AAQZ8G,MAAAA,iBAAiB,EAAE,MAAM9G,OAAO,CAAC,KAAD,CARpB;AASZ+G,MAAAA,IAAI,EAAG,sCAAqCvK,CAAC,CAACgL,UAAF,CAAahG,KAAb,CAAoB,GATpD;AAUZwF,MAAAA,OAAO,EAAE,cAVG;AAWZC,MAAAA,oBAAoB,EAAE;AACpBC,QAAAA,SAAS,EAAE,QADS;AAEpBC,QAAAA,UAAU,EAAEnK,KAAK,CAACoK,KAAN,CAAYC;AAFJ;AAXV,KAAD,CAAb;AAgBD,GAlBD;;AAoBA,iBAAeI,QAAf,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCrF,aAArC,EAAoDsF,aAApD,EAAmE;AACjE,QAAIF,IAAJ,EAAU;AACR,UAAI;AACFhI,QAAAA,SAAS,CAAC;AAAEqB,UAAAA,KAAK,EAAE,IAAT;AAAeY,UAAAA,OAAO,EAAG,mBAAkB+F,IAAI,CAACxI,IAAK;AAArD,SAAD,CAAT;AACA,cAAMqG,OAAO,GAAG;AACdsC,UAAAA,GAAG,EAAEH,IAAI,CAACxI;AADI,SAAhB;AAGA,cAAM4I,UAAU,GAAG,MAAMvK,UAAU,CAACwK,QAAX,CAAoBxC,OAApB,CAAzB;;AACA,YAAIuC,UAAU,CAACE,GAAf,EAAoB;AAClB,gBAAMxB,GAAG,GAAG,MAAMjJ,UAAU,CAAC0K,UAAX,CAAsBH,UAAU,CAACE,GAAjC,EAAsCN,IAAtC,CAAlB;AACApF,UAAAA,aAAa,CAACqF,KAAD,EAAQnB,GAAR,CAAb;AACA/G,UAAAA,eAAe,CAAC,uBAAD,EAA0B;AAAEgC,YAAAA,OAAO,EAAE;AAAX,WAA1B,CAAf;AACD;AACF,OAXD,CAWE,OAAOP,KAAP,EAAc;AACd,cAAMS,OAAO,GAAGzE,eAAe,CAACgE,KAAD,CAA/B;AACA0G,QAAAA,aAAa,CAACD,KAAD,EAAQ,4BAAR,CAAb;AACAlI,QAAAA,eAAe,CAACkC,OAAD,EAAU;AAAEF,UAAAA,OAAO,EAAE;AAAX,SAAV,CAAf;AACD,OAfD,SAeU;AACR/B,QAAAA,SAAS,CAAC;AAAEqB,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT;AACD;AACF;AACF;;AAED,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAiBP,IAAAA,WAAjB;AAA8BoB,IAAAA,iBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,mBAAD;AAAqB,IAAA,SAAS,EAAC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAEtD,kBAAkB,CAACsC,OAAD,EAAUrB,SAAV,EAAqBU,YAArB,CADnC;AAEE,IAAA,QAAQ,EAAEqD,MAAM,IAAI;AAClB,UAAI;AACFlG,QAAAA,qBAAqB,CAAC8K,YAAtB,CAAmC5E,MAAnC,EAA2C;AACzC6E,UAAAA,UAAU,EAAE,KAD6B;AAEzC7E,UAAAA;AAFyC,SAA3C;AAID,OALD,CAKE,OAAO8E,CAAP,EAAU;AACV,eAAO7L,eAAe,CAAC6L,CAAD,CAAtB;AACD;AACF,KAXH;AAYE,IAAA,kBAAkB,MAZpB;AAaE,IAAA,QAAQ,EAAEtD,YAbZ;AAcE,IAAA,cAAc,MAdhB;AAeE,IAAA,gBAAgB,MAflB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBG,CAAC;AACAxB,IAAAA,MADA;AAEA+E,IAAAA,YAFA;AAGAC,IAAAA,MAHA;AAIAC,IAAAA,YAJA;AAKAC,IAAAA,OALA;AAMAC,IAAAA,UANA;AAOAnG,IAAAA,aAPA;AAQAsF,IAAAA,aARA;AASAc,IAAAA;AATA,GAAD,kBAWC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,UAAD,CACE;AADF;AAEE,IAAA,OAAO,EAAE,MAAMhC,YAAY,CAACpH,MAAD,CAF7B;AAGE,IAAA,UAAU,EAAE,CAAC,CAACA,MAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAOE,oBAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAPF,eASE,oBAAC,mBAAD;AACE,IAAA,MAAM,EAAEgE,MADV;AAEE,IAAA,YAAY,EAAE,CAAC8E,CAAD,EAAInJ,IAAJ,KAAa;AACzB,UAAIK,MAAJ,EAAY;AAAA;;AACViI,QAAAA,qBAAqB,CACnBa,CADmB,aACnBA,CADmB,oCACnBA,CAAC,CAAEO,MADgB,8CACnB,UAAWnH,KADQ,EAEnBc,aAFmB,EAGnBrD,IAHmB,EAInBqE,MAJmB,CAArB;AAMD,OAPD,MAOO;AACL+E,QAAAA,YAAY,CAACD,CAAD,CAAZ;AACD;AACF,KAbH;AAcE,IAAA,cAAc,EAAE9E,MAAM,CAACpB,cAdzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EA0BG,CAAAoB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEpB,cAAR,MAA2B,aAA3B,iBACC,oBAAC,yBAAD;AAA2B,IAAA,KAAK,EAAE;AAAE0G,MAAAA,YAAY,EAAE;AAAhB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qJADF,eAME,oBAAC,gBAAD;AACE,IAAA,KAAK,EACH,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,iBAAT,MAA8BP,MAA9B,aAA8BA,MAA9B,uBAA8BA,MAAM,CAAEO,iBAAtC,CAFJ;AAIE,IAAA,OAAO,EAAEnB,IAAI,IACXD,QAAQ,CACNC,IADM,EAEL,mBAFK,EAGNpF,aAHM,EAINsF,aAJM,CALZ;AAYE,IAAA,KAAK,EAAE;AACLkB,MAAAA,SAAS,EAAE,EADN;AAELC,MAAAA,KAAK,EAAE;AAFF,KAZT;AAgBE,IAAA,MAAM,EAAC,kCAhBT;AAiBE,IAAA,IAAI,EAAE;AAAE7J,MAAAA,IAAI,EAAE/B,WAAW,CAACmG,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEuF,iBAAT;AAAnB,KAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAyBE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,cAAc,EAAE;AAFX,KADT;AAKE,IAAA,OAAO,EAAE,MACPC,MAAM,CAACnJ,IAAP,CACE,+IADF,EAEE,QAFF,CANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,CAzBF,CA3BJ,eAwEE,oBAAC,WAAD;AAEIuD,IAAAA,MAFJ;AAGI+E,IAAAA,YAHJ;AAIIE,IAAAA,YAJJ;AAKID,IAAAA,MALJ;AAMIE,IAAAA,OANJ;AAOIC,IAAAA,UAPJ;AAQInG,IAAAA,aARJ;AASI/C,IAAAA,SATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxEF,EAsFGP,MAAM,CAACsC,GAAP,CAAW,CAAC6H,KAAD,EAAQtB,GAAR,kBACV,oBAAC,yBAAD;AACE,IAAA,KAAK,EAAE;AAAEe,MAAAA,YAAY,EAAE;AAAhB,KADT;AAEE,IAAA,GAAG,EAAEf,GAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,SAAD;AACE,IAAA,KAAK,MADP;AAGIsB,IAAAA,KAHJ;AAIItB,IAAAA,GAJJ;AAKIvE,IAAAA,MALJ;AAMI+E,IAAAA,YANJ;AAOIC,IAAAA,MAPJ;AAQIC,IAAAA,YARJ;AASIC,IAAAA,OATJ;AAUIC,IAAAA,UAVJ;AAWInG,IAAAA,aAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADD,CAtFH,EA6GG,CAAAgB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEpB,cAAR,KAA0B,aAA1B,gBACC,oBAAC,eAAD;AACE,IAAA,eAAe,EAAEoB,MAAM,CAACpB,cAD1B;AAEE,IAAA,MAAM,EAAEoB,MAAM,CAAC8F,eAFjB;AAGE,IAAA,YAAY,EAAEf,YAHhB;AAIQC,IAAAA,MAJR;AAKE,IAAA,MAAM,EAAE9L,CAAC,IAAI;AACXkM,MAAAA,eAAe,CAAE,iBAAF,EAAoB,IAApB,CAAf;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAWC,EAxHJ,EA2HG,CAAApF,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEpB,cAAR,KAA0B,WAA1B,gBACC,oBAAC,gBAAD;AACE,IAAA,eAAe,EAAEoB,MAAM,CAACpB,cAD1B;AAEE,IAAA,MAAM,EAAEoB,MAFV;AAGE,IAAA,YAAY,EAAE+E,YAHhB;AAIE,IAAA,aAAa,EAAEhF,aAJjB;AAKE,IAAA,eAAe,EAAEuB,eALnB;AAME,IAAA,OAAO,EAAEhE,OANX;AAQI0H,IAAAA,MARJ;AASIhG,IAAAA,aATJ;AAUI7C,IAAAA,eAVJ;AAWI+I,IAAAA,OAXJ;AAYIE,IAAAA,eAZJ;AAaID,IAAAA,UAbJ;AAeE,IAAA,MAAM,EAAEjM,CAAC,IAAI;AACXkM,MAAAA,eAAe,CAAE,iBAAF,EAAoB,IAApB,CAAf;AACD,KAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAqBC,EAhJJ,eAoJE,oBAAC,yBAAD;AAA2B,IAAA,KAAK,EAAE;AAAEE,MAAAA,YAAY,EAAE;AAAhB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAAtF,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEpB,cAAR,MAA2B,WAA3B,gBACC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACY,GADZ,EAEG,CAAAoB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEpB,cAAR,MAA2B,aAA3B,GACGnF,MAAM,CAAC,wBAAD,CADT,GAEG,CAAAuG,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE+F,aAAR,MAA0B,WAA1B,GACA7M,CAAC,CAAC8M,SAAF,CAAYhG,MAAZ,aAAYA,MAAZ,uBAAYA,MAAM,CAAEpB,cAApB,CADA,GAEA1F,CAAC,CAACgL,UAAF,CAAalE,MAAb,aAAaA,MAAb,uBAAaA,MAAM,CAAEpB,cAArB,CANN,EAM4C,GAN5C,kGADD,GAYC,EAbJ,CApJF,eAgLE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAEoB,MADV;AAEE,IAAA,aAAa,EAAEhB,aAFjB;AAGE,IAAA,WAAW,EAAEnF,WAHf;AAIE,IAAA,aAAa,EAAEyK,aAJjB;AAKE,IAAA,qBAAqB,EAAEzF,qBALzB;AAME,IAAA,OAAO,EAAEqG,OANX;AAOE,IAAA,MAAM,EAAEF,MAPV;AAQE,IAAA,SAAS,EAAErL,gBARb;AASE,IAAA,UAAU,EAAEwL,UATd;AAUQhB,IAAAA,QAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhLF,eA8LE,oBAAC,kBAAD;AACQnE,IAAAA,MADR;AACgBhB,IAAAA,aADhB;AAC+BkG,IAAAA,OAD/B;AACwCF,IAAAA,MADxC;AACgDG,IAAAA,UADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9LF,eAoME,oBAAC,aAAD;AACE,IAAA,WAAW,EAAEpI,WADf;AAEE,IAAA,OAAO,EAAE,MAAMyE,YAAY,CAACxB,MAAD,EAAS,IAAT,EAAe,IAAf,CAF7B;AAGE,IAAA,YAAY,EAAEiF,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApMF,CA5BJ,CADF,CAFF,eA4OE,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAExI;AAArB,KAAoCF,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5OF,CADF;AAgPD,CA7rBD;;AA+rBA,eAAeR,KAAf","sourcesContent":["import { useMediaQuery, useTheme } from \"@material-ui/core\";\nimport { navigate, useLocation } from \"@reach/router\";\nimport { Formik, yupToFormErrors } from \"formik\";\nimport _ from \"lodash\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState, useRef, createRef } from \"react\";\nimport labels from \"../../../../src/helpers/labels.json\";\nimport theme from \"../../../assets/theme\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport { getErrorMessage, getFileName } from \"../../../helpers/functions\";\nimport { CreateCaseStep1Schema } from \"../../../helpers/validationSchema\";\nimport useCartCount from \"../../../hooks/useCartCount\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport AWSService from \"../../../services/AWSService\";\nimport CaseService from \"../../../services/CaseService\";\nimport PartyService from \"../../../services/PartyService\";\nimport ActionBar from \"../../common/ActionBar\";\nimport AlertDialog from \"../../common/Alert\";\nimport FormField from \"../../common/FormField/FormField\";\nimport { CustomFileUpload } from \"../../common/FormInputs\";\nimport { HyperLink } from \"../../common/styled-components\";\nimport AdditionalMediator from \"./components/AdditionalMediator\";\nimport CaseActionCTA from \"./components/CaseActionCTA\";\nimport CaseHeader from \"./components/CaseHeader\";\nimport CaseTypeRadioButton from \"./components/CaseTypeRadioButton\";\nimport MultipleUpload from \"./components/MultipleUpload\";\nimport PartySelect from \"./components/PartySelect\";\nimport TotalClaimValue from \"./components/TotalClaimValue\";\nimport { setInitalFormValue, setPostPayload } from \"./function\";\nimport {\n  Container,\n  CreateCaseContainer,\n  H2,\n  StyledForm,\n  StyledFormElementsWrapper,\n  StyledLabel,\n  StyledLabelNote\n} from \"./Styles\";\nimport AddClaimValueMed from \"../CreateCase/components/AddClaimValueMed\";\n\nconst inputs = [\n  {\n    type: \"textarea\",\n    name: \"description\",\n    label: \"Case Description\",\n    required: true\n  }\n];\n\nconst Index = ({ caseId }) => {\n  const [menuItems, setMenuItems] = useState([]);\n  const { enqueueSnackbar } = useSnackbar();\n  const { setLoader } = useLoader();\n  const { setTriggerCount } = useCartCount();\n  const location = useLocation();\n  const [dialogData, setDialogData] = useState(false);\n  const [open, setOpen] = useState(false);\n  const searchParams = new URLSearchParams(location.search);\n  const themes = useTheme();\n  const isBigScreen = useMediaQuery(themes.breakpoints.up(640));\n  const breadcrumbs = [\"My Cases\", \"Create New Case\"];\n  const [length, setLength] = useState(1);\n  const fileRef = useRef([]);\n\n  const [caseObj, setCaseObj] = useState({});\n  useEffect(() => {\n    async function getCase(caseId) {\n      try {\n        setLoader({ state: true });\n        const response = await CaseService.getCase(caseId);\n        if (response) {\n          setCaseObj(response);\n          if (response.caseItems.length > 0) {\n            setLength(response.caseItems.length);\n          }\n        }\n      } catch (error) {\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n    if (caseId) {\n      getCase(caseId);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [caseId]);\n\n  useEffect(() => {\n    async function getParties(params) {\n      try {\n        setLoader({ state: true });\n        const response = await PartyService.getParties(\n          \"?perPage=50&status=active\"\n        );\n        if (response?.data?.length) {\n          setMenuItems(\n            response.data.map(({ name, id }) => ({ label: name, value: id }))\n          );\n        } else {\n          enqueueSnackbar(\n            \"You need to create a party inorder to create a case\",\n            {\n              variant: \"error\",\n              autoHideDuration: 3000\n            }\n          );\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        enqueueSnackbar(message, {\n          variant: \"error\"\n        });\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n    getParties();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onBreadcrumbClick = selected => {\n    switch (_.snakeCase(selected)) {\n      case \"my_cases\":\n        navigate(\"/dashboard/cases\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSuccess = (response, draft) => {\n    if (response?.case?.id) {\n      setTriggerCount(true);\n      if (draft) {\n        enqueueSnackbar(\"Case added to draft successfully\", {\n          variant: \"success\"\n        });\n        navigate(`/dashboard/cases?caseType=${response?.case?.resolutionKind}`);\n      } else {\n        navigate(\n          `/dashboard/cases/create/${response.case.id}/step-2?caseType=${response?.case?.resolutionKind}`\n        );\n      }\n    }\n  };\n\n  const handleDeleteAgreement = (index, agreement_urls, setFieldValue) => {\n    if (agreement_urls?.length) {\n      const filtered = agreement_urls.filter((v, idx) => idx !== index);\n      setFieldValue(\"agreement_urls\", filtered);\n    }\n  };\n\n  useEffect(() => {\n    if (fileRef.current.length !== length) {\n      // add or remove refs\n      fileRef.current = Array(length)\n        .fill()\n        .map((_, i) => fileRef.current[i] || createRef());\n    }\n  }, [fileRef.current.length, length]);\n\n  async function deleteClaimItem(id, claimantPartyId, caseId) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await CaseService.deleteCaseItem(\n          caseId,\n          id,\n          claimantPartyId\n        );\n        if (response) {\n          resolve(response);\n        }\n        reject(\"Error\");\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  const addClaimItems = (values, setFieldValue) => {\n    const new_claim_items = [\n      ...values?.claim_items_data,\n      {\n        title: \"\",\n        claimValue: \"\",\n        index: values?.claim_items_data?.length || 0\n      }\n    ];\n    setLength(new_claim_items.length);\n    setFieldValue(\"claim_items_data\", new_claim_items);\n  };\n\n  async function addClaimItem(claim_item, claimantPartyId, caseId) {\n    console.log(claim_item);\n    return new Promise(async (resolve, reject) => {\n      try {\n        claim_item.claimValue = Number(claim_item.claimValue);\n        const response = await CaseService.createCaseItem(\n          claim_item,\n          caseId,\n          claimantPartyId\n        );\n        if (response) {\n          resolve({ ...response.caseItem, index: claim_item?.index || 0 });\n        }\n        reject(\"Error\");\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async function updateClaimItem(\n    claim_id,\n    claim_item,\n    claimantPartyId,\n    caseId\n  ) {\n    console.log(claim_id);\n    console.log(claim_item);\n    return new Promise(async (resolve, reject) => {\n      try {\n        claim_item.claimValue = Number(claim_item.claimValue);\n        const response = await CaseService.updateCaseItem(\n          caseId,\n          claim_id,\n          claim_item,\n          claimantPartyId\n        );\n        if (response) {\n          resolve(response.caseItem);\n        }\n        reject(\"Error\");\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async function getDeletedItems(orginalData, currentData) {\n    const originalIDs = await _.map(orginalData, \"id\");\n    const currentIDs = await _.map(currentData, \"id\");\n    const deletedIDs = await _.difference(originalIDs, currentIDs);\n    return deletedIDs;\n  }\n\n  const removeClaimItem = (index, values, setFieldValue) => {\n    const new_claim_items = [...values?.claim_items_data].filter(\n      (ci, idx) => idx !== index\n    );\n    setLength(new_claim_items.length);\n    setFieldValue(\"claim_items_data\", new_claim_items);\n  };\n\n  async function onFormSubmit(params, props, isDraft = false) {\n    let values = JSON?.parse(JSON.stringify(params));\n    values.claim_items_data = params?.claim_items_data?.map(ci => ({\n      ...ci,\n      claimValue: ci?.claimValue\n        ?.toString()\n        ?.split(\",\")\n        ?.join(\"\")\n    }));\n    try {\n      setLoader({ state: true, message: \"submitting form...\" });\n      let payload = { ...params };\n      payload = setPostPayload(payload);\n      const new_claim_items = values.claim_items_data.filter(ci => !ci.id);\n      const claimantPartyId = values?.claimantPartyId;\n      const old_claim_items = values.claim_items_data.filter(ci => ci.id);\n      const deleted_claim_items = await getDeletedItems(\n        caseObj.caseItems,\n        old_claim_items\n      );\n      let count = 0;\n      let finalClaimItems = values.claim_items_data.map((el, index) => {\n        return { ...el, index };\n      });\n      const hasDuplication =\n        payload?.requestedMediators?.length &&\n        payload?.requestedMediators?.filter(\n          (mediator, index) =>\n            payload?.requestedMediators?.findIndex(\n              el => el?.email === mediator?.email\n            ) !== index\n        )?.length;\n      if (hasDuplication) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"Duplicate email IDs found in Mediators\";\n      }\n      if (caseId) {\n        const response = await CaseService.updateDraft(\n          payload,\n          caseId,\n          params.claimantPartyId\n        );\n        handleSuccess(response, isDraft);\n        if (response) {\n          if (deleted_claim_items) {\n            count = -deleted_claim_items.length;\n            for (const claim_item_id of deleted_claim_items) {\n              const deleted_item = await deleteClaimItem(\n                claim_item_id,\n                claimantPartyId,\n                caseId\n              );\n              if (deleted_item) {\n                count += 1;\n              }\n            }\n          }\n\n          if (old_claim_items) {\n            for (const claim_item of old_claim_items) {\n              const addedItem = await updateClaimItem(\n                claim_item.id,\n                claim_item,\n                claimantPartyId,\n                caseId\n              );\n              if (addedItem.id) {\n                const index = _.findIndex(\n                  finalClaimItems,\n                  ci => ci?.id === addedItem?.id\n                );\n                finalClaimItems[index] = addedItem;\n                count += 1;\n              }\n            }\n          }\n          if (new_claim_items) {\n            for (const claim_item of new_claim_items) {\n              if (claim_item.title && claim_item.claimValue) {\n                // const caseId = response?.case?.id;\n                const addedItem = await addClaimItem(\n                  claim_item,\n                  claimantPartyId,\n                  caseId\n                );\n                if (addedItem.id) {\n                  console.log(\"addedItem.id\", addedItem.id);\n                  const index = _.findIndex(\n                    finalClaimItems,\n                    ci => ci?.index === addedItem?.index\n                  );\n                  finalClaimItems[index] = addedItem;\n                  setCaseObj({ ...caseObj, caseItems: finalClaimItems });\n                  count += 1;\n                }\n              }\n            }\n          }\n        }\n      } else {\n        const response = await CaseService.createCase(\n          payload,\n          params.claimantPartyId\n        );\n        handleSuccess(response, isDraft);\n        if (response) {\n          if (new_claim_items) {\n            for (const claim_item of new_claim_items) {\n              if (claim_item.title && claim_item.claimValue) {\n                const caseId = response?.case?.id;\n                const addedItem = await addClaimItem(\n                  claim_item,\n                  claimantPartyId,\n                  caseId\n                );\n                if (addedItem.id) {\n                  console.log(\"addedItem.id\", addedItem.id);\n                  const index = _.findIndex(\n                    finalClaimItems,\n                    ci => ci?.index === addedItem?.index\n                  );\n                  finalClaimItems[index] = addedItem;\n                  setCaseObj({ ...caseObj, caseItems: finalClaimItems });\n                  count += 1;\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({ state: false });\n    }\n  }\n\n  /**\n   * @description Function to trigger the delete case\n   * @param {*} param0\n   */\n  const deleteDraft = async id => {\n    try {\n      setLoader({ state: true, message: \"Deleting Cases...\" });\n      const res = await CaseService.deleteDraftCase(id);\n      if (res?.message) {\n        enqueueSnackbar(res?.message, {\n          variant: \"success\"\n        });\n        if (caseObj?.resolutionKind === \"mediation\") {\n          navigate(\"/dashboard/cases?caseType=mediation\");\n        } else {\n          navigate(\"/dashboard/cases?caseType=negotiation\");\n        }\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({ state: false });\n      setOpen(false);\n    }\n  };\n\n  /**\n   * @description Function to show the delete warning\n   * @param {*} id\n   */\n  const deleteWaring = id => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Proceed\",\n      secondaryBtnText: \"Cancel\",\n      clickPrimaryBtn: () => deleteDraft(id),\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to delete this draft case?`,\n      heading: \"Delete Case\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold\n      }\n    });\n  };\n\n  /**\n   * @description Function to reset the values\n   * @param {*} setFieldValue\n   */\n  const resetValuewhenCaseTypeChanges = (setFieldValue, type, values) => {\n    if (values?.requestedMediators?.length) {\n      if (type === \"mediation\") {\n        setFieldValue(\"requestedMediators\", [values?.requestedMediators[0]]);\n      } else if (type === \"negotiation\") {\n        setFieldValue(\"requestedMediators\", []);\n      }\n    }\n    if (type === \"negotiation\") {\n      setFieldValue(\"subscriptionKind\", \"normal\");\n    }\n  };\n\n  /**\n   * @description Function to open the confirmation popup when switch case radio buttons\n   * @param {*} value\n   * @param {*} setFieldValue\n   * @param {*} name\n   */\n  const openConfirmationPopUp = (value, setFieldValue, name, values) => {\n    setOpen(true);\n    setDialogData({\n      primaryBtnText: \"Yes\",\n      secondaryBtnText: \"No\",\n      clickPrimaryBtn: () => {\n        setFieldValue(name, value);\n        resetValuewhenCaseTypeChanges(setFieldValue, value, values);\n        setOpen(false);\n      },\n      clickSecondarybtn: () => setOpen(false),\n      desc: `Are you sure you want to switch to ${_.capitalize(value)}?`,\n      heading: \"Confirmation\",\n      descriptionTextStyle: {\n        textAlign: \"center\",\n        fontFamily: theme.fonts.primaryFontSemiBold\n      }\n    });\n  };\n\n  async function s3Upload(file, field, setFieldValue, setFieldError) {\n    if (file) {\n      try {\n        setLoader({ state: true, message: `Uploading file: ${file.name} ...` });\n        const payload = {\n          key: file.name\n        };\n        const s3Response = await AWSService.getS3URL(payload);\n        if (s3Response.url) {\n          const res = await AWSService.uploadToS3(s3Response.url, file);\n          setFieldValue(field, res);\n          enqueueSnackbar(\"Successfully Uploaded\", { variant: \"success\" });\n        }\n      } catch (error) {\n        const message = getErrorMessage(error);\n        setFieldError(field, \"Could not upload this file\");\n        enqueueSnackbar(message, { variant: \"error\" });\n      } finally {\n        setLoader({ state: false });\n      }\n    }\n  }\n\n  return (\n    <Container>\n      <ActionBar {...{ breadcrumbs, onBreadcrumbClick }} />\n      <CreateCaseContainer className=\"CreateCase\">\n        <Formik\n          initialValues={setInitalFormValue(caseObj, menuItems, searchParams)}\n          validate={values => {\n            try {\n              CreateCaseStep1Schema.validateSync(values, {\n                abortEarly: false,\n                values\n              });\n            } catch (e) {\n              return yupToFormErrors(e);\n            }\n          }}\n          enableReinitialize\n          onSubmit={onFormSubmit}\n          validateOnBlur\n          validateOnChange\n        >\n          {({\n            values,\n            handleChange,\n            errors,\n            handleSubmit,\n            touched,\n            handleBlur,\n            setFieldValue,\n            setFieldError,\n            setFieldTouched\n          }) => (\n            <StyledForm>\n              {/* header part */}\n              <CaseHeader\n                // resolutionKind={values?.resolutionKind}\n                onClick={() => deleteWaring(caseId)}\n                showDelete={!!caseId}\n              />\n              <H2>Enter Case Details</H2>\n              {/* radio button */}\n              <CaseTypeRadioButton\n                values={values}\n                handleChange={(e, type) => {\n                  if (caseId) {\n                    openConfirmationPopUp(\n                      e?.target?.value,\n                      setFieldValue,\n                      type,\n                      values\n                    );\n                  } else {\n                    handleChange(e);\n                  }\n                }}\n                resolutionKind={values.resolutionKind}\n              />\n\n              {values?.resolutionKind === \"arbitration\" && (\n                <StyledFormElementsWrapper style={{ marginBottom: 13 }}>\n                  <StyledLabel>\n                    Have you sent the notice of arbitration? If yes, upload the\n                    file. If no, download the template, send it to the\n                    respondent and upload the file\n                  </StyledLabel>\n                  <CustomFileUpload\n                    error={\n                      touched?.arbitrationNotice && errors?.arbitrationNotice\n                    }\n                    setFile={file =>\n                      s3Upload(\n                        file,\n                        `arbitrationNotice`,\n                        setFieldValue,\n                        setFieldError\n                      )\n                    }\n                    style={{\n                      marginTop: 10,\n                      width: \"100%\"\n                    }}\n                    accept=\".pdf, .mp3, .mp4, .docx, image/*\"\n                    file={{ name: getFileName(values?.arbitrationNotice) }}\n                  />\n                  <div className=\"template\">\n                    <HyperLink\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"flex-end\"\n                      }}\n                      onClick={() =>\n                        window.open(\n                          \"https://justact-api-uploads.s3.ap-south-1.amazonaws.com/160/1633000323853-2beda7f9-27e2-4b81-82fb-66418bbed710/Notice%20of%20Arbitration.docx\",\n                          \"_blank\"\n                        )\n                      }\n                    >\n                      Please download the template.\n                    </HyperLink>\n                  </div>\n                </StyledFormElementsWrapper>\n              )}\n\n              {/* drop down select claimant party */}\n              <PartySelect\n                {...{\n                  values,\n                  handleChange,\n                  handleSubmit,\n                  errors,\n                  touched,\n                  handleBlur,\n                  setFieldValue,\n                  menuItems\n                }}\n              />\n\n              {/* Case description box */}\n              {inputs.map((input, key) => (\n                <StyledFormElementsWrapper\n                  style={{ marginBottom: 15 }}\n                  key={key}\n                >\n                  <FormField\n                    white\n                    {...{\n                      input,\n                      key,\n                      values,\n                      handleChange,\n                      errors,\n                      handleSubmit,\n                      touched,\n                      handleBlur,\n                      setFieldValue\n                    }}\n                  />\n                </StyledFormElementsWrapper>\n              ))}\n\n              {/* claimvalue */}\n              {values?.resolutionKind == \"arbitration\" ? (\n                <TotalClaimValue\n                  ressolutionKind={values.resolutionKind}\n                  values={values.totalClaimValue}\n                  handleChange={handleChange}\n                  {...{ errors }}\n                  onBlur={_ => {\n                    setFieldTouched(`totalClaimValue`, true);\n                  }}\n                />\n              ) : (\n                \"\"\n              )}\n\n              {values?.resolutionKind == \"mediation\" ? (\n                <AddClaimValueMed\n                  ressolutionKind={values.resolutionKind}\n                  values={values}\n                  handleChange={handleChange}\n                  addClaimItems={addClaimItems}\n                  removeClaimItem={removeClaimItem}\n                  caseObj={caseObj}\n                  {...{\n                    errors,\n                    setFieldValue,\n                    enqueueSnackbar,\n                    touched,\n                    setFieldTouched,\n                    handleBlur\n                  }}\n                  onBlur={_ => {\n                    setFieldTouched(`totalClaimValue`, true);\n                  }}\n                />\n              ) : (\n                \"\"\n              )}\n\n              {/* note */}\n              <StyledFormElementsWrapper style={{ marginBottom: 13 }}>\n                {values?.resolutionKind === \"mediation\" ? (\n                  <StyledLabelNote>\n                    Note: The{\" \"}\n                    {values?.resolutionKind === \"negotiation\"\n                      ? labels[\"resolution.negotiation\"]\n                      : values?.document_kind === \"mediation\"\n                      ? _.upperCase(values?.resolutionKind)\n                      : _.capitalize(values?.resolutionKind)}{\" \"}\n                    process is completely confidential and the evidence\n                    submitted are not admissible in the court\n                  </StyledLabelNote>\n                ) : (\n                  \"\"\n                )}\n                {/* <StyledLabelNote>\n                  Note: The{\" \"}\n                  {values?.resolutionKind === \"negotiation\"\n                    ? labels[\"resolution.negotiation\"]\n                    : values?.document_kind === \"mediation\"\n                    ? _.upperCase(values?.resolutionKind)\n                    : _.capitalize(values?.resolutionKind)}{\" \"}\n                  process is completely confidential and the evidence submitted\n                  are not admissible in the court\n                </StyledLabelNote> */}\n              </StyledFormElementsWrapper>\n\n              {/* multiple upload */}\n              <MultipleUpload\n                values={values}\n                setFieldValue={setFieldValue}\n                getFileName={getFileName}\n                setFieldError={setFieldError}\n                handleDeleteAgreement={handleDeleteAgreement}\n                touched={touched}\n                errors={errors}\n                menuItems={caseDocumentType}\n                handleBlur={handleBlur}\n                {...{ s3Upload }}\n              />\n\n              {/* Additional Mediator for arbitration */}\n              <AdditionalMediator\n                {...{ values, setFieldValue, touched, errors, handleBlur }}\n              />\n              {/* Additional Mediator for arbitration */}\n\n              {/* buttons */}\n              <CaseActionCTA\n                isBigScreen={isBigScreen}\n                onClick={() => onFormSubmit(values, null, true)}\n                handleSubmit={handleSubmit}\n              />\n            </StyledForm>\n          )}\n        </Formik>\n      </CreateCaseContainer>\n      <AlertDialog isOpen={open} {...{ ...dialogData }} />\n    </Container>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}