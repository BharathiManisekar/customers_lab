{"ast":null,"code":"var _jsxFileName = \"/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/DocumentTypeChange/DocTypeChange.js\",\n    _theme$breakpoints;\n\nimport React, { useState } from \"react\";\nimport theme from \"../../../assets/theme\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport CustomSelect from \"../../common/CustomSelect/CustomSelectDoc\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport styled from \"styled-components\";\n\nconst DocChangeType = ({\n  rowData,\n  setState\n}) => {\n  var _rowData$url;\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    setLoader\n  } = useLoader();\n  let docId = rowData === null || rowData === void 0 ? void 0 : rowData.id;\n  let caseId = rowData === null || rowData === void 0 ? void 0 : rowData.entityId;\n  let docName = rowData === null || rowData === void 0 ? void 0 : (_rowData$url = rowData.url) === null || _rowData$url === void 0 ? void 0 : _rowData$url.uploadType;\n  const [docType, setDocType] = useState(docName);\n\n  const changeDocType = async value => {\n    try {\n      setLoader({\n        state: true,\n        message: \"Change Document...\"\n      });\n      const payload = {\n        uploadType: value\n      };\n      const res = await CaseService.changeDocType(payload, caseId, docId);\n      console.log(docType);\n\n      if (res) {\n        enqueueSnackbar(\"Document Type Changed Successfully\", {\n          variant: \"success\",\n          message: res\n        });\n        setDocType(\"\");\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({\n        state: false\n      });\n      setState(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomSelect, {\n    menuItemValues: caseDocumentType,\n    name: docType,\n    value: docType,\n    disabled: docType === \"Arbitration Notice\" ? true : false,\n    onChange: e => changeDocType(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default DocChangeType;\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  @media ${theme === null || theme === void 0 ? void 0 : (_theme$breakpoints = theme.breakpoints) === null || _theme$breakpoints === void 0 ? void 0 : _theme$breakpoints.sm_up} {\n    width: auto;\n  }\n`;","map":{"version":3,"sources":["/home/justact/13-12-2021(Frontend Dev)/justact-fe/src/components/internal/DocumentTypeChange/DocTypeChange.js"],"names":["React","useState","theme","CaseService","getErrorMessage","useSnackbar","CustomSelect","useLoader","caseDocumentType","styled","DocChangeType","rowData","setState","enqueueSnackbar","setLoader","docId","id","caseId","entityId","docName","url","uploadType","docType","setDocType","changeDocType","value","state","message","payload","res","console","log","variant","error","display","alignItems","e","target","Container","div","breakpoints","sm_up"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport theme from \"../../../assets/theme\";\nimport CaseService from \"../../../services/CaseService\";\nimport { getErrorMessage } from \"../../../helpers/functions\";\nimport { useSnackbar } from \"notistack\";\nimport CustomSelect from \"../../common/CustomSelect/CustomSelectDoc\";\nimport useLoader from \"../../../hooks/useLoader\";\nimport { caseDocumentType } from \"../../../helpers/constants\";\nimport styled from \"styled-components\";\n\nconst DocChangeType = ({ rowData, setState }) => {\n  const { enqueueSnackbar } = useSnackbar();\n  const { setLoader } = useLoader();\n  let docId = rowData?.id;\n  let caseId = rowData?.entityId;\n  let docName = rowData?.url?.uploadType\n  const [docType, setDocType] = useState(docName);\n  \n  const changeDocType = async value => {\n    try {\n      setLoader({ state: true, message: \"Change Document...\" });\n      const payload = {\n        uploadType: value\n      };\n      const res = await CaseService.changeDocType(payload, caseId, docId);\n      console.log(docType);\n      if (res) {\n        enqueueSnackbar(\"Document Type Changed Successfully\", {\n          variant: \"success\",\n          message: res\n        });\n        setDocType(\"\");\n      }\n    } catch (error) {\n      const message = getErrorMessage(error);\n      enqueueSnackbar(message, {\n        variant: \"error\"\n      });\n    } finally {\n      setLoader({ state: false });\n      setState(false);\n    }\n  };\n\n  return (\n    <Container style={{ display: \"flex\", alignItems: \"center\" }}>\n      <CustomSelect\n        menuItemValues={caseDocumentType}\n        name={docType}\n        value={docType}\n        disabled={docType === \"Arbitration Notice\" ? true : false}\n        onChange={e => changeDocType(e.target.value)}\n      />\n    </Container>\n  );\n};\n\nexport default DocChangeType;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  @media ${theme?.breakpoints?.sm_up} {\n    width: auto;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}